use ::libc;
extern "C" {
<<<<<<< HEAD
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    pub type PyMemberDef;
    pub type _xmlBuf;
    pub type _xmlDict;
    pub type _xmlHashTable;
    pub type _xmlStartTag;
    pub type _xmlAutomataState;
    pub type _xmlAutomata;
    pub type _xmlValidState;
    pub type _xmlXPathCompExpr;
    pub type _xmlRelaxNGValidCtxt;
    pub type _xmlSchemaValidCtxt;
    pub type _xmlTextReader;
    pub type _xmlSaveCtxt;
    fn PyType_IsSubtype(_: *mut PyTypeObject, _: *mut PyTypeObject) -> i32;
    static mut stdout: *mut FILE;
    static mut stderr: *mut FILE;
    fn fprintf(_: *mut FILE, _: *const i8, _: ...) -> i32;
    fn printf(_: *const i8, _: ...) -> i32;
    fn vfprintf(
        _: *mut FILE,
        _: *const i8,
        _: ::std::ffi::VaList,
    ) -> i32;
    fn vsnprintf(
        _: *mut i8,
        _: u64,
        _: *const i8,
        _: ::std::ffi::VaList,
    ) -> i32;
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: u64,
    ) -> *mut libc::c_void;
    fn memset(
        _: *mut libc::c_void,
        _: i32,
        _: u64,
    ) -> *mut libc::c_void;
    fn PyUnicodeUCS4_AsUTF8String(unicode: *mut PyObject) -> *mut PyObject;
    fn PyLong_FromLong(_: i64) -> *mut PyObject;
    fn PyLong_AsLong(_: *mut PyObject) -> i64;
    fn PyLong_FromVoidPtr(_: *mut libc::c_void) -> *mut PyObject;
    fn PyString_FromStringAndSize(
        _: *const i8,
        _: Py_ssize_t,
    ) -> *mut PyObject;
    fn PyString_FromString(_: *const i8) -> *mut PyObject;
    fn PyString_Size(_: *mut PyObject) -> Py_ssize_t;
    fn PyString_AsString(_: *mut PyObject) -> *mut i8;
    fn PyTuple_New(size: Py_ssize_t) -> *mut PyObject;
    fn PyTuple_SetItem(_: *mut PyObject, _: Py_ssize_t, _: *mut PyObject) -> i32;
    fn PyList_New(size: Py_ssize_t) -> *mut PyObject;
    fn PyList_SetItem(_: *mut PyObject, _: Py_ssize_t, _: *mut PyObject) -> i32;
    fn PyDict_New() -> *mut PyObject;
    fn PyDict_SetItem(
        mp: *mut PyObject,
        key: *mut PyObject,
        item: *mut PyObject,
    ) -> i32;
    static mut PyFile_Type: PyTypeObject;
    fn PyFile_AsFile(_: *mut PyObject) -> *mut FILE;
    static mut PyCapsule_Type: PyTypeObject;
    fn PyCapsule_GetPointer(
        capsule: *mut PyObject,
        name: *const i8,
    ) -> *mut libc::c_void;
    fn PyCapsule_GetName(capsule: *mut PyObject) -> *const i8;
    fn PyErr_WarnEx(
        _: *mut PyObject,
        _: *const i8,
        _: Py_ssize_t,
    ) -> i32;
    fn PyErr_SetString(_: *mut PyObject, _: *const i8);
    fn PyErr_Occurred() -> *mut PyObject;
    static mut PyExc_Exception: *mut PyObject;
    static mut PyExc_AssertionError: *mut PyObject;
    static mut PyExc_IndexError: *mut PyObject;
    static mut PyExc_MemoryError: *mut PyObject;
    static mut PyExc_TypeError: *mut PyObject;
    static mut PyExc_ValueError: *mut PyObject;
    static mut PyExc_PendingDeprecationWarning: *mut PyObject;
    fn PyErr_NoMemory() -> *mut PyObject;
    fn _PyArg_ParseTuple_SizeT(
        _: *mut PyObject,
        _: *const i8,
        _: ...
    ) -> i32;
    fn _Py_BuildValue_SizeT(_: *const i8, _: ...) -> *mut PyObject;
    fn Py_InitModule4_64(
        name: *const i8,
        methods: *mut PyMethodDef,
        doc: *const i8,
        self_0: *mut PyObject,
        apiver: i32,
    ) -> *mut PyObject;
    fn PyErr_Print();
    fn PyEval_CallObjectWithKeywords(
        _: *mut PyObject,
        _: *mut PyObject,
        _: *mut PyObject,
    ) -> *mut PyObject;
    fn PyEval_CallMethod(
        obj: *mut PyObject,
        methodname: *const i8,
        format: *const i8,
        _: ...
    ) -> *mut PyObject;
    fn _PyObject_CallFunction_SizeT(
        callable_object: *mut PyObject,
        format: *mut i8,
        _: ...
    ) -> *mut PyObject;
    fn _PyObject_CallMethod_SizeT(
        o: *mut PyObject,
        m: *mut i8,
        format: *mut i8,
        _: ...
    ) -> *mut PyObject;
    fn PyObject_HasAttrString(_: *mut PyObject, _: *const i8) -> i32;
    fn PyCallable_Check(_: *mut PyObject) -> i32;
    static mut _Py_NoneStruct: PyObject;
    fn xmlBufferCreate() -> xmlBufferPtr;
    fn xmlBufferFree(buf: xmlBufferPtr);
    fn xmlNewNode(ns: xmlNsPtr, name: *const xmlChar) -> xmlNodePtr;
    fn xmlMemSetup(
        freeFunc_0: xmlFreeFunc,
        mallocFunc_0: xmlMallocFunc,
        reallocFunc_0: xmlReallocFunc,
        strdupFunc_0: xmlStrdupFunc,
    ) -> i32;
    fn xmlMemGet(
=======
    
    
    
    pub type PyMemberDef;
    pub type _xmlBuf;
    
    
    
    
    
    
    pub type _xmlXPathCompExpr;
    
    
    
    pub type _xmlSaveCtxt;
    fn PyType_IsSubtype(_: * mut crate::src::python::libxml::_typeobject, _: * mut crate::src::python::libxml::_typeobject) -> i32;
    static mut stdout: * mut crate::src::python::libxml::_IO_FILE;
    static mut stderr: * mut crate::src::python::libxml::_IO_FILE;
    fn fprintf(_: * mut crate::src::python::libxml::_IO_FILE, _: * const i8, _: ...) -> i32;
    fn printf(_: * const i8, _: ...) -> i32;
    fn vfprintf(
        _: * mut crate::src::python::libxml::_IO_FILE,
        _: * const i8,
        _: core::ffi::VaList,
    ) -> i32;
    fn vsnprintf(
        _: * mut i8,
        _: u64,
        _: * const i8,
        _: core::ffi::VaList,
    ) -> i32;
    fn memcpy(
        _: * mut core::ffi::c_void,
        _: * const core::ffi::c_void,
        _: u64,
    ) -> * mut core::ffi::c_void;
    fn memset(
        _: * mut core::ffi::c_void,
        _: i32,
        _: u64,
    ) -> * mut core::ffi::c_void;
    fn PyUnicodeUCS4_AsUTF8String(unicode: * mut crate::src::python::libxml::_object) -> * mut crate::src::python::libxml::_object;
    fn PyLong_FromLong(_: i64) -> * mut crate::src::python::libxml::_object;
    fn PyLong_AsLong(_: * mut crate::src::python::libxml::_object) -> i64;
    fn PyLong_FromVoidPtr(_: * mut core::ffi::c_void) -> * mut crate::src::python::libxml::_object;
    fn PyString_FromStringAndSize(
        _: * const i8,
        _: i64,
    ) -> * mut crate::src::python::libxml::_object;
    fn PyString_FromString(_: * const i8) -> * mut crate::src::python::libxml::_object;
    fn PyString_Size(_: * mut crate::src::python::libxml::_object) -> i64;
    fn PyString_AsString(_: * mut crate::src::python::libxml::_object) -> * mut i8;
    fn PyTuple_New(size: i64) -> * mut crate::src::python::libxml::_object;
    fn PyTuple_SetItem(_: * mut crate::src::python::libxml::_object, _: i64, _: * mut crate::src::python::libxml::_object) -> i32;
    fn PyList_New(size: i64) -> * mut crate::src::python::libxml::_object;
    fn PyList_SetItem(_: * mut crate::src::python::libxml::_object, _: i64, _: * mut crate::src::python::libxml::_object) -> i32;
    fn PyDict_New() -> * mut crate::src::python::libxml::_object;
    fn PyDict_SetItem(
        mp: * mut crate::src::python::libxml::_object,
        key: * mut crate::src::python::libxml::_object,
        item: * mut crate::src::python::libxml::_object,
    ) -> i32;
    static mut PyFile_Type: crate::src::python::libxml::_typeobject;
    fn PyFile_AsFile(_: * mut crate::src::python::libxml::_object) -> * mut crate::src::python::libxml::_IO_FILE;
    static mut PyCapsule_Type: crate::src::python::libxml::_typeobject;
    fn PyCapsule_GetPointer(
        capsule: * mut crate::src::python::libxml::_object,
        name: * const i8,
    ) -> * mut core::ffi::c_void;
    fn PyCapsule_GetName(capsule: * mut crate::src::python::libxml::_object) -> * const i8;
    fn PyErr_WarnEx(
        _: * mut crate::src::python::libxml::_object,
        _: * const i8,
        _: i64,
    ) -> i32;
    fn PyErr_SetString(_: * mut crate::src::python::libxml::_object, _: * const i8);
    fn PyErr_Occurred() -> * mut crate::src::python::libxml::_object;
    static mut PyExc_Exception: * mut crate::src::python::libxml::_object;
    static mut PyExc_AssertionError: * mut crate::src::python::libxml::_object;
    static mut PyExc_IndexError: * mut crate::src::python::libxml::_object;
    static mut PyExc_MemoryError: * mut crate::src::python::libxml::_object;
    static mut PyExc_TypeError: * mut crate::src::python::libxml::_object;
    static mut PyExc_ValueError: * mut crate::src::python::libxml::_object;
    static mut PyExc_PendingDeprecationWarning: * mut crate::src::python::libxml::_object;
    fn PyErr_NoMemory() -> * mut crate::src::python::libxml::_object;
    fn _PyArg_ParseTuple_SizeT(
        _: * mut crate::src::python::libxml::_object,
        _: * const i8,
        _: ...
    ) -> i32;
    fn _Py_BuildValue_SizeT(_: * const i8, _: ...) -> * mut crate::src::python::libxml::_object;
    fn Py_InitModule4_64(
        name: * const i8,
        methods: * mut crate::src::python::libxml::PyMethodDef,
        doc: * const i8,
        self_0: * mut crate::src::python::libxml::_object,
        apiver: i32,
    ) -> * mut crate::src::python::libxml::_object;
    fn PyErr_Print();
    fn PyEval_CallObjectWithKeywords(
        _: * mut crate::src::python::libxml::_object,
        _: * mut crate::src::python::libxml::_object,
        _: * mut crate::src::python::libxml::_object,
    ) -> * mut crate::src::python::libxml::_object;
    fn PyEval_CallMethod(
        obj: * mut crate::src::python::libxml::_object,
        methodname: * const i8,
        format: * const i8,
        _: ...
    ) -> * mut crate::src::python::libxml::_object;
    fn _PyObject_CallFunction_SizeT(
        callable_object: * mut crate::src::python::libxml::_object,
        format: * mut i8,
        _: ...
    ) -> * mut crate::src::python::libxml::_object;
    fn _PyObject_CallMethod_SizeT(
        o: * mut crate::src::python::libxml::_object,
        m: * mut i8,
        format: * mut i8,
        _: ...
    ) -> * mut crate::src::python::libxml::_object;
    fn PyObject_HasAttrString(_: * mut crate::src::python::libxml::_object, _: * const i8) -> i32;
    fn PyCallable_Check(_: * mut crate::src::python::libxml::_object) -> i32;
    static mut _Py_NoneStruct: crate::src::python::libxml::_object;
    fn xmlBufferCreate() -> * mut crate::src::python::libxml::_xmlBuffer;
    fn xmlBufferFree(buf: * mut crate::src::python::libxml::_xmlBuffer);
    fn xmlNewNode(ns: * mut crate::src::python::libxml::_xmlNs, name: * const u8) -> * mut crate::src::python::libxml::_xmlNode;
    fn xmlMemSetup(
        freeFunc_0: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> ()>,
        mallocFunc_0: Option<unsafe extern "C"  fn(_: u64,) -> * mut core::ffi::c_void>,
        reallocFunc_0: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: u64,) -> * mut core::ffi::c_void>,
        strdupFunc_0: Option<unsafe extern "C"  fn(_: * const i8,) -> * mut i8>,
    ) -> i32;
    fn xmlMemGet(
        // freeFunc_0: * mut Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> ()>,
        // mallocFunc_0: * mut Option<unsafe extern "C"  fn(_: u64,) -> * mut core::ffi::c_void>,
        // reallocFunc_0: * mut Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: u64,) -> * mut core::ffi::c_void>,
        // strdupFunc_0: * mut Option<unsafe extern "C"  fn(_: * const i8,) -> * mut i8>,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        freeFunc_0: *mut xmlFreeFunc,
        mallocFunc_0: *mut xmlMallocFunc,
        reallocFunc_0: *mut xmlReallocFunc,
        strdupFunc_0: *mut xmlStrdupFunc,
    ) -> i32;
    fn xmlMemUsed() -> i32;
    fn xmlMemoryDump();
<<<<<<< HEAD
    fn xmlMemMalloc(size: size_t) -> *mut libc::c_void;
    fn xmlMemRealloc(ptr: *mut libc::c_void, size: size_t) -> *mut libc::c_void;
    fn xmlMemFree(ptr: *mut libc::c_void);
    fn xmlMemoryStrdup(str: *const i8) -> *mut i8;
    static mut xmlFree: xmlFreeFunc;
    static mut xmlRealloc: xmlReallocFunc;
    static mut xmlMalloc: xmlMallocFunc;
    fn xmlThrDefSetGenericErrorFunc(
        ctx: *mut libc::c_void,
        handler: xmlGenericErrorFunc,
    );
    fn xmlSetGenericErrorFunc(ctx: *mut libc::c_void, handler: xmlGenericErrorFunc);
    fn xmlParserError(ctx: *mut libc::c_void, msg: *const i8, _: ...);
    fn xmlParserWarning(ctx: *mut libc::c_void, msg: *const i8, _: ...);
    fn xmlParserValidityError(ctx: *mut libc::c_void, msg: *const i8, _: ...);
    fn xmlParserValidityWarning(
        ctx: *mut libc::c_void,
        msg: *const i8,
        _: ...
    );
    fn xmlStrEqual(str1: *const xmlChar, str2: *const xmlChar) -> i32;
    fn xmlStrdup(cur: *const xmlChar) -> *mut xmlChar;
    fn xmlFreeValidCtxt(_: xmlValidCtxtPtr);
    fn xmlFindCharEncodingHandler(
        name: *const i8,
    ) -> xmlCharEncodingHandlerPtr;
    fn xmlParseCharEncoding(name: *const i8) -> xmlCharEncoding;
    fn xmlPopInputCallbacks() -> i32;
    fn xmlAllocParserInputBuffer(enc: xmlCharEncoding) -> xmlParserInputBufferPtr;
    fn xmlParserGetDirectory(filename: *const i8) -> *mut i8;
    fn xmlRegisterInputCallbacks(
        matchFunc: xmlInputMatchCallback,
        openFunc: xmlInputOpenCallback,
        readFunc: xmlInputReadCallback,
        closeFunc: xmlInputCloseCallback,
    ) -> i32;
    fn xmlAllocOutputBuffer(encoder: xmlCharEncodingHandlerPtr) -> xmlOutputBufferPtr;
    fn xmlOutputBufferCreateFile(
        file: *mut FILE,
        encoder: xmlCharEncodingHandlerPtr,
    ) -> xmlOutputBufferPtr;
    fn xmlOutputBufferFlush(out: xmlOutputBufferPtr) -> i32;
    fn xmlOutputBufferClose(out: xmlOutputBufferPtr) -> i32;
    fn xmlInitParser();
    fn xmlCleanupParser();
    fn xmlSAXUserParseFile(
        sax: xmlSAXHandlerPtr,
        user_data: *mut libc::c_void,
        filename: *const i8,
    ) -> i32;
    fn xmlFreeParserCtxt(ctxt: xmlParserCtxtPtr);
    fn xmlCreatePushParserCtxt(
        sax: xmlSAXHandlerPtr,
        user_data: *mut libc::c_void,
        chunk: *const i8,
        size: i32,
        filename: *const i8,
    ) -> xmlParserCtxtPtr;
    fn xmlNewIOInputStream(
        ctxt: xmlParserCtxtPtr,
        input: xmlParserInputBufferPtr,
        enc: xmlCharEncoding,
    ) -> xmlParserInputPtr;
    fn xmlSetExternalEntityLoader(f: xmlExternalEntityLoader);
    fn xmlGetExternalEntityLoader() -> xmlExternalEntityLoader;
    fn xmlSaveFormatFileTo(
        buf: xmlOutputBufferPtr,
        cur: xmlDocPtr,
        encoding: *const i8,
        format: i32,
    ) -> i32;
    fn xmlNodeDumpOutput(
        buf: xmlOutputBufferPtr,
        doc: xmlDocPtr,
        cur: xmlNodePtr,
        level: i32,
        format: i32,
        encoding: *const i8,
    );
    fn xmlSaveFileTo(
        buf: xmlOutputBufferPtr,
        cur: xmlDocPtr,
        encoding: *const i8,
    ) -> i32;
    fn xmlXPathRegisterFuncLookup(
        ctxt: xmlXPathContextPtr,
        f: xmlXPathFuncLookupFunc,
        funcCtxt: *mut libc::c_void,
    );
    fn xmlXPathRegisterVariableNS(
        ctxt: xmlXPathContextPtr,
        name: *const xmlChar,
        ns_uri: *const xmlChar,
        value: xmlXPathObjectPtr,
    ) -> i32;
    fn valuePop(ctxt: xmlXPathParserContextPtr) -> xmlXPathObjectPtr;
    fn valuePush(
        ctxt: xmlXPathParserContextPtr,
        value: xmlXPathObjectPtr,
    ) -> i32;
    fn xmlC14NDocSaveTo(
        doc: xmlDocPtr,
        nodes: xmlNodeSetPtr,
        mode: i32,
        inclusive_ns_prefixes: *mut *mut xmlChar,
        with_comments: i32,
        buf: xmlOutputBufferPtr,
    ) -> i32;
    fn xmlC14NDocDumpMemory(
        doc: xmlDocPtr,
        nodes: xmlNodeSetPtr,
        mode: i32,
        inclusive_ns_prefixes: *mut *mut xmlChar,
        with_comments: i32,
        doc_txt_ptr: *mut *mut xmlChar,
    ) -> i32;
    fn xmlFreeTextReader(reader: xmlTextReaderPtr);
    fn xmlRelaxNGFreeValidCtxt(ctxt: xmlRelaxNGValidCtxtPtr);
    fn xmlRelaxNGSetValidErrors(
        ctxt: xmlRelaxNGValidCtxtPtr,
        err: xmlRelaxNGValidityErrorFunc,
        warn: xmlRelaxNGValidityWarningFunc,
        ctx: *mut libc::c_void,
    );
    fn xmlTextReaderSetErrorHandler(
        reader: xmlTextReaderPtr,
        f: xmlTextReaderErrorFunc,
        arg: *mut libc::c_void,
    );
    fn xmlTextReaderGetErrorHandler(
        reader: xmlTextReaderPtr,
        f: *mut xmlTextReaderErrorFunc,
        arg: *mut *mut libc::c_void,
    );
    fn xmlRelaxNGGetValidErrors(
        ctxt: xmlRelaxNGValidCtxtPtr,
        err: *mut xmlRelaxNGValidityErrorFunc,
        warn: *mut xmlRelaxNGValidityWarningFunc,
        ctx: *mut *mut libc::c_void,
    ) -> i32;
    fn xmlSchemaSetValidErrors(
        ctxt: xmlSchemaValidCtxtPtr,
        err: xmlSchemaValidityErrorFunc,
        warn: xmlSchemaValidityWarningFunc,
        ctx: *mut libc::c_void,
    );
    fn xmlSchemaFreeValidCtxt(ctxt: xmlSchemaValidCtxtPtr);
    fn xmlSchemaGetValidErrors(
        ctxt: xmlSchemaValidCtxtPtr,
        err: *mut xmlSchemaValidityErrorFunc,
        warn: *mut xmlSchemaValidityWarningFunc,
        ctx: *mut *mut libc::c_void,
    ) -> i32;
    fn xmlSaveToBuffer(
        buffer: xmlBufferPtr,
        encoding: *const i8,
        options: i32,
    ) -> xmlSaveCtxtPtr;
    fn xmlSaveDoc(ctxt: xmlSaveCtxtPtr, doc: xmlDocPtr) -> i64;
    fn xmlSaveTree(ctxt: xmlSaveCtxtPtr, node: xmlNodePtr) -> i64;
    fn xmlSaveClose(ctxt: xmlSaveCtxtPtr) -> i32;
    fn htmlCreatePushParserCtxt(
        sax: htmlSAXHandlerPtr,
        user_data: *mut libc::c_void,
        chunk: *const i8,
        size: i32,
        filename: *const i8,
        enc: xmlCharEncoding,
    ) -> htmlParserCtxtPtr;
    fn xmlCatalogAddLocal(
        catalogs: *mut libc::c_void,
        URL: *const xmlChar,
    ) -> *mut libc::c_void;
    fn htmlGetMetaEncoding(doc: htmlDocPtr) -> *const xmlChar;
    fn htmlSAXParseFile(
        filename: *const i8,
        encoding: *const i8,
        sax: htmlSAXHandlerPtr,
        userData: *mut libc::c_void,
    ) -> htmlDocPtr;
    fn htmlNodeDumpFormatOutput(
        buf: xmlOutputBufferPtr,
        doc: xmlDocPtr,
        cur: xmlNodePtr,
        encoding: *const i8,
        format: i32,
    );
    fn htmlDocContentDumpFormatOutput(
        buf: xmlOutputBufferPtr,
        cur: xmlDocPtr,
        encoding: *const i8,
        format: i32,
    );
    fn libxml_xmlXPathObjectPtrConvert(obj: *mut PyObject) -> xmlXPathObjectPtr;
    fn libxml_xmlTextReaderLocatorPtrWrap(
        locator: xmlTextReaderLocatorPtr,
    ) -> *mut PyObject;
    fn libxml_xmlParserInputBufferPtrWrap(
        buffer: xmlParserInputBufferPtr,
    ) -> *mut PyObject;
    fn libxml_xmlOutputBufferPtrWrap(buffer: xmlOutputBufferPtr) -> *mut PyObject;
    fn libxml_xmlXPathObjectPtrWrap(obj: xmlXPathObjectPtr) -> *mut PyObject;
    fn libxml_xmlXPathParserContextPtrWrap(
        ctxt: xmlXPathParserContextPtr,
    ) -> *mut PyObject;
    fn libxml_xmlParserCtxtPtrWrap(ctxt: xmlParserCtxtPtr) -> *mut PyObject;
    fn libxml_xmlNsPtrWrap(ns: xmlNsPtr) -> *mut PyObject;
    fn libxml_xmlAttrPtrWrap(attr: xmlAttrPtr) -> *mut PyObject;
    fn libxml_xmlNodePtrWrap(node: xmlNodePtr) -> *mut PyObject;
    fn libxml_xmlDocPtrWrap(doc: xmlDocPtr) -> *mut PyObject;
    fn libxml_charPtrConstWrap(str: *const i8) -> *mut PyObject;
    fn libxml_charPtrWrap(str: *mut i8) -> *mut PyObject;
    fn libxml_constxmlCharPtrWrap(str: *const xmlChar) -> *mut PyObject;
    fn libxml_longWrap(val: i64) -> *mut PyObject;
    fn libxml_intWrap(val: i32) -> *mut PyObject;
    fn libxml_htmlAutoCloseTag(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlCreateFileParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlCreateMemoryParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlCtxtReadDoc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlCtxtReadFd(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlCtxtReadFile(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlCtxtReadMemory(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlCtxtReset(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_htmlCtxtUseOptions(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlDefaultSAXHandlerInit(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlDocContentDumpFormatOutput(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlDocContentDumpOutput(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlDocDump(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_htmlFreeParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlGetMetaEncoding(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlHandleOmittedElem(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlInitAutoClose(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlIsAutoClosed(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlIsBooleanAttr(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlIsScriptAttribute(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlNewDoc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_htmlNewDocNoDtD(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlNewParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlNodeDumpFile(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlNodeDumpFileFormat(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlNodeDumpFormatOutput(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlNodeDumpOutput(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlParseCharRef(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlParseChunk(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlParseDoc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_htmlParseDocument(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlParseElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlParseFile(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_htmlReadDoc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_htmlReadFd(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_htmlReadFile(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_htmlReadMemory(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlSaveFile(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_htmlSaveFileEnc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlSaveFileFormat(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_htmlSetMetaEncoding(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_namePop(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_namePush(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_nodePop(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_nodePush(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_valuePop(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlACatalogAdd(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlACatalogDump(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlACatalogRemove(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlACatalogResolve(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlACatalogResolvePublic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlACatalogResolveSystem(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlACatalogResolveURI(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlAddChild(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlAddChildList(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlAddDocEntity(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlAddDtdEntity(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlAddEncodingAlias(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlAddNextSibling(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlAddPrevSibling(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlAddSibling(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlBoolToText(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlBuildQName(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlBuildRelativeURI(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlBuildURI(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlByteConsumed(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCanonicPath(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogAdd(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCatalogCleanup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogConvert(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogDump(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogGetPublic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogGetSystem(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogIsEmpty(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogRemove(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogResolve(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogResolvePublic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogResolveSystem(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogResolveURI(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCatalogSetDebug(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCharStrdup(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCharStrndup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCheckFilename(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCheckLanguageID(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCheckUTF8(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCheckVersion(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCleanupCharEncodingHandlers(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCleanupEncodingAliases(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCleanupGlobals(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCleanupInputCallbacks(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCleanupOutputCallbacks(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCleanupPredefinedEntities(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlClearParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlConvertSGMLCatalog(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCopyChar(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCopyCharMultiByte(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCopyDoc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCopyDtd(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCopyError(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCopyNamespace(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCopyNamespaceList(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCopyNode(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCopyNodeList(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCopyProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCopyPropList(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCreateDocParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCreateEntityParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCreateFileParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCreateIntSubset(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCreateMemoryParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCreateURI(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCreateURLParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCtxtReadDoc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCtxtReadFd(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCtxtReadFile(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCtxtReadMemory(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCtxtReset(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlCtxtResetPush(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlCtxtUseOptions(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDebugCheckDocument(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDebugDumpAttr(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDebugDumpAttrList(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDebugDumpDTD(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDebugDumpDocument(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDebugDumpDocumentHead(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDebugDumpEntities(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDebugDumpNode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDebugDumpNodeList(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDebugDumpOneNode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDebugDumpString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDecodeEntities(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDefaultSAXHandlerInit(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDelEncodingAlias(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDictCleanup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDocCopyNode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDocCopyNodeList(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDocDump(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlDocFormatDump(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDocGetRootElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlDocSetRootElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlElemDump(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlEncodeEntities(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlEncodeEntitiesReentrant(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlEncodeSpecialChars(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlErrorGetCode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlErrorGetDomain(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlErrorGetFile(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlErrorGetLevel(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlErrorGetLine(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlErrorGetMessage(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlFileMatch(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlFirstElementChild(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlFreeCatalog(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlFreeDoc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlFreeDtd(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlFreeNode(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlFreeNodeList(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlFreeNs(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlFreeNsList(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlFreeParserInputBuffer(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlFreeProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlFreePropList(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlFreeURI(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlGetCompressMode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetDocCompressMode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetDocEntity(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetDtdAttrDesc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetDtdElementDesc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetDtdEntity(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetDtdQAttrDesc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetDtdQElementDesc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetEncodingAlias(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetID(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlGetIntSubset(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetLastChild(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetLastError(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetLineNo(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlGetNoNsProp(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetNodePath(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetNsProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlGetParameterEntity(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetPredefinedEntity(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlGetProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlHandleEntity(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlHasNsProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlHasProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlIOFTPMatch(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlIOHTTPMatch(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlInitCharEncodingHandlers(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlInitGlobals(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlInitParser(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlInitParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlInitializeCatalog(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlInitializeDict(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlInitializePredefinedEntities(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlIsBaseChar(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlIsBlank(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlIsBlankNode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlIsChar(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlIsCombining(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlIsDigit(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlIsExtender(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlIsID(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlIsIdeographic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlIsLetter(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlIsMixedElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlIsPubidChar(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlIsRef(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlIsXHTML(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlKeepBlanksDefault(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlLastElementChild(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlLineNumbersDefault(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlLoadACatalog(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlLoadCatalog(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlLoadCatalogs(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlLoadSGMLSuperCatalog(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlLsCountNode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlLsOneNode(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNamespaceParseNCName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNamespaceParseNSDef(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNanoFTPCleanup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNanoFTPInit(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNanoFTPProxy(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNanoFTPScanProxy(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNanoHTTPCleanup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNanoHTTPInit(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNanoHTTPScanProxy(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewCDataBlock(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewCatalog(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewCharRef(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewChild(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewComment(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewDoc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewDocComment(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewDocFragment(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewDocNode(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewDocNodeEatName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewDocPI(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewDocProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewDocRawNode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewDocText(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewDocTextLen(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewDtd(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewEntity(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewGlobalNs(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewNodeEatName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewNs(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewNsProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewNsPropEatName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewPI(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewReference(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewText(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewTextChild(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewTextLen(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNewTextReader(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewTextReaderFilename(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNewValidCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNextChar(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNextElementSibling(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeAddContent(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeAddContentLen(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeDumpOutput(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeGetBase(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeGetContent(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeGetLang(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeGetSpacePreserve(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeIsText(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlNodeListGetRawString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeListGetString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeSetBase(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeSetContent(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeSetContentLen(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeSetLang(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeSetName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNodeSetSpacePreserve(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNormalizeURIPath(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlNormalizeWindowsPath(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlOutputBufferGetContent(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlOutputBufferWrite(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlOutputBufferWriteString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseAttValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseAttributeListDecl(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseCDSect(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseCatalogFile(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseCharData(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseCharRef(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseChunk(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlParseComment(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseContent(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseDTD(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlParseDoc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlParseDocTypeDecl(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseDocument(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseElementDecl(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseEncName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseEncodingDecl(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseEndTag(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseEntity(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseEntityDecl(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseEntityRef(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseExtParsedEnt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseExternalSubset(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseFile(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlParseMarkupDecl(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseMemory(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseMisc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlParseName(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlParseNamespace(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseNmtoken(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseNotationDecl(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParsePEReference(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParsePI(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlParsePITarget(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParsePubidLiteral(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseQuotedString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseReference(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseSDDecl(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseStartTag(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseSystemLiteral(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseTextDecl(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseURI(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlParseURIRaw(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseURIReference(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseVersionInfo(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseVersionNum(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParseXMLDecl(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserGetDirectory(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserGetDoc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserGetIsValid(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserGetWellFormed(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserHandlePEReference(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserHandleReference(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserInputBufferGrow(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserInputBufferPush(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserInputBufferRead(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserSetLineNumbers(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserSetLoadSubset(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserSetPedantic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserSetReplaceEntities(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlParserSetValidate(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlPathToURI(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlPedanticParserDefault(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlPopInput(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlPopOutputCallbacks(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlPreviousElementSibling(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlPrintURI(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlReadDoc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlReadFd(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlReadFile(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlReadMemory(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlReaderForDoc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlReaderForFd(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlReaderForFile(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlReaderForMemory(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlReaderNewDoc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlReaderNewFd(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlReaderNewFile(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlReaderNewMemory(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlReaderNewWalker(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlReaderWalker(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlReconciliateNs(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRecoverDoc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlRecoverFile(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRecoverMemory(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRegFreeRegexp(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRegexpCompile(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRegexpExec(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlRegexpIsDeterminist(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRegexpPrint(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRegisterDefaultInputCallbacks(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRegisterDefaultOutputCallbacks(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRegisterHTTPPostCallbacks(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGCleanupTypes(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGDump(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGDumpTree(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGFree(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGFreeParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGInitTypes(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGNewDocParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGNewMemParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGNewParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGNewValidCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGParse(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGValidateDoc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGValidateFullElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGValidatePopElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGValidatePushCData(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxNGValidatePushElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRelaxParserSetFlag(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlRemoveID(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlRemoveProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlRemoveRef(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlReplaceNode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlResetError(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlResetLastError(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSAXDefaultVersion(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSaveFile(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlSaveFileEnc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSaveFormatFile(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSaveFormatFileEnc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSaveUri(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlScanName(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlSchemaCleanupTypes(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaCollapseString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaDump(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlSchemaFree(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlSchemaFreeParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaInitTypes(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaIsValid(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaNewDocParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaNewMemParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaNewParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaNewValidCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaParse(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaSetValidOptions(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaValidCtxtGetOptions(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaValidCtxtGetParserCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaValidateDoc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaValidateFile(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaValidateOneElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaValidateSetFilename(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSchemaWhiteSpaceReplace(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSearchNs(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlSearchNsByHref(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSetCompressMode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSetDocCompressMode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSetListDoc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlSetNs(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlSetNsProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlSetProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlSetTreeDoc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlSetupParserForBuffer(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlShellPrintNode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlShellPrintXPathError(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlSkipBlankChars(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlStopParser(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrEqual(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrQEqual(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrcasecmp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrcasestr(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrcat(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrchr(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrcmp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrdup(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStringDecodeEntities(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlStringGetNodeList(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlStringLenDecodeEntities(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlStringLenGetNodeList(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlStrlen(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrncasecmp(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlStrncat(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrncatNew(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrncmp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrndup(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrstr(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlStrsub(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlSubstituteEntitiesDefault(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextConcat(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlTextMerge(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlTextReaderAttributeCount(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderByteConsumed(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderClose(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderConstBaseUri(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderConstEncoding(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderConstLocalName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderConstName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderConstNamespaceUri(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderConstPrefix(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderConstString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderConstValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderConstXmlLang(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderConstXmlVersion(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderCurrentDoc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderCurrentNode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderDepth(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderExpand(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderGetAttribute(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderGetAttributeNo(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderGetAttributeNs(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderGetParserColumnNumber(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderGetParserLineNumber(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderGetParserProp(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderGetRemainder(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderHasAttributes(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderHasValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderIsDefault(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderIsEmptyElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderIsNamespaceDecl(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderIsValid(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderLocatorBaseURI(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderLocatorLineNumber(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderLookupNamespace(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderMoveToAttribute(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderMoveToAttributeNo(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderMoveToAttributeNs(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderMoveToElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderMoveToFirstAttribute(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderMoveToNextAttribute(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderNext(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderNextSibling(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderNodeType(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderNormalization(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderPreserve(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderQuoteChar(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderRead(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderReadAttributeValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderReadInnerXml(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderReadOuterXml(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderReadState(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderReadString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderRelaxNGSetSchema(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderRelaxNGValidate(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderRelaxNGValidateCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderSchemaValidate(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderSchemaValidateCtxt(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderSetParserProp(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderSetSchema(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderSetup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlTextReaderStandalone(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefDefaultBufferSize(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefDoValidityCheckingDefaultValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefGetWarningsDefaultValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefIndentTreeOutput(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefKeepBlanksDefaultValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefLineNumbersDefaultValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefLoadExtDtdDefaultValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefParserDebugEntities(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefPedanticParserDefaultValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefSaveNoEmptyTags(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefSubstituteEntitiesDefaultValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlThrDefTreeIndentString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsAegeanNumbers(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsAlphabeticPresentationForms(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsArabic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsArabicPresentationFormsA(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsArabicPresentationFormsB(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsArmenian(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsArrows(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsBasicLatin(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsBengali(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsBlock(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsBlockElements(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsBopomofo(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsBopomofoExtended(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsBoxDrawing(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsBraillePatterns(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsBuhid(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsByzantineMusicalSymbols(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCJKCompatibility(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCJKCompatibilityForms(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCJKCompatibilityIdeographs(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCJKCompatibilityIdeographsSupplement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCJKRadicalsSupplement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCJKSymbolsandPunctuation(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCJKUnifiedIdeographs(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCJKUnifiedIdeographsExtensionA(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCJKUnifiedIdeographsExtensionB(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCat(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatC(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatCc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatCf(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatCo(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatCs(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatL(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatLl(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatLm(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatLo(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatLt(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatLu(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatM(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatMc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatMe(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatMn(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatN(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatNd(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatNl(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatNo(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatP(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatPc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatPd(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatPe(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatPf(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatPi(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatPo(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatPs(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatS(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatSc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatSk(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatSm(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatSo(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatZ(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatZl(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatZp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCatZs(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsCherokee(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCombiningDiacriticalMarks(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCombiningDiacriticalMarksforSymbols(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCombiningHalfMarks(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCombiningMarksforSymbols(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsControlPictures(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCurrencySymbols(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCypriotSyllabary(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCyrillic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsCyrillicSupplement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsDeseret(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsDevanagari(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsDingbats(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsEnclosedAlphanumerics(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsEnclosedCJKLettersandMonths(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsEthiopic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsGeneralPunctuation(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsGeometricShapes(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsGeorgian(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsGothic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsGreek(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsGreekExtended(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsGreekandCoptic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsGujarati(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsGurmukhi(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsHalfwidthandFullwidthForms(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsHangulCompatibilityJamo(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsHangulJamo(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsHangulSyllables(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsHanunoo(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsHebrew(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsHighPrivateUseSurrogates(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsHighSurrogates(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsHiragana(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsIPAExtensions(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsIdeographicDescriptionCharacters(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsKanbun(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsKangxiRadicals(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsKannada(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsKatakana(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsKatakanaPhoneticExtensions(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsKhmer(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsKhmerSymbols(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsLao(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsLatin1Supplement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsLatinExtendedA(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsLatinExtendedAdditional(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsLatinExtendedB(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsLetterlikeSymbols(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsLimbu(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsLinearBIdeograms(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsLinearBSyllabary(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsLowSurrogates(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsMalayalam(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsMathematicalAlphanumericSymbols(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsMathematicalOperators(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsMiscellaneousMathematicalSymbolsA(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsMiscellaneousMathematicalSymbolsB(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsMiscellaneousSymbols(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsMiscellaneousSymbolsandArrows(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsMiscellaneousTechnical(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsMongolian(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsMusicalSymbols(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsMyanmar(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsNumberForms(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsOgham(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsOldItalic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsOpticalCharacterRecognition(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsOriya(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsOsmanya(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsPhoneticExtensions(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsPrivateUse(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsPrivateUseArea(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsRunic(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsShavian(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsSinhala(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsSmallFormVariants(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsSpacingModifierLetters(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsSpecials(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsSuperscriptsandSubscripts(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsSupplementalArrowsA(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsSupplementalArrowsB(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsSupplementalMathematicalOperators(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsSupplementaryPrivateUseAreaA(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsSupplementaryPrivateUseAreaB(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsSyriac(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsTagalog(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsTagbanwa(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsTags(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsTaiLe(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsTaiXuanJingSymbols(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsTamil(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsTelugu(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsThaana(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsThai(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUCSIsTibetan(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsUgaritic(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsUnifiedCanadianAboriginalSyllabics(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsVariationSelectors(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsVariationSelectorsSupplement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsYiRadicals(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsYiSyllables(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUCSIsYijingHexagramSymbols(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURIEscape(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlURIEscapeStr(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURIGetAuthority(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURIGetFragment(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURIGetOpaque(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURIGetPath(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlURIGetPort(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlURIGetQuery(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURIGetQueryRaw(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURIGetScheme(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURIGetServer(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURIGetUser(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlURISetAuthority(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURISetFragment(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURISetOpaque(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURISetPath(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlURISetPort(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlURISetQuery(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURISetQueryRaw(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURISetScheme(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURISetServer(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlURISetUser(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlURIUnescapeString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUTF8Charcmp(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUTF8Size(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUTF8Strlen(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUTF8Strloc(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUTF8Strndup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUTF8Strpos(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUTF8Strsize(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUTF8Strsub(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUnlinkNode(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlUnsetNsProp(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlUnsetProp(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlValidCtxtNormalizeAttributeValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidNormalizeAttributeValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateDocument(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateDocumentFinal(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateDtd(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateDtdFinal(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateNCName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateNMToken(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateNameValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateNamesValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateNmtokenValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateNmtokensValue(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateNotationUse(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateOneAttribute(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateOneElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateOneNamespace(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidatePopElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidatePushCData(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidatePushElement(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateQName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlValidateRoot(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXIncludeProcess(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXIncludeProcessFlags(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXIncludeProcessTree(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXIncludeProcessTreeFlags(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathAddValues(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathBooleanFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCastBooleanToNumber(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCastBooleanToString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCastNodeToNumber(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCastNodeToString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCastNumberToBoolean(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCastNumberToString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCastStringToBoolean(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCastStringToNumber(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCeilingFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCmpNodes(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCompareValues(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathConcatFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathContainsFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathContextSetCache(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathCountFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathDivValues(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathEqualValues(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathErr(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlXPathEval(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlXPathEvalExpr(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathEvalExpression(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathFalseFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathFloorFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathFreeContext(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathFreeParserContext(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathGetContextDoc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathGetContextNode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathGetContextPosition(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathGetContextSize(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathGetFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathGetFunctionURI(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathIdFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathInit(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlXPathIsInf(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlXPathIsNaN(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlXPathIsNodeType(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathLangFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathLastFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathLocalNameFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathModValues(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathMultValues(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNamespaceURIFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNewBoolean(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNewCString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNewContext(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNewFloat(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNewNodeSet(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNewParserContext(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNewString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNewValueTree(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextAncestor(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextAncestorOrSelf(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextAttribute(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextChild(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextDescendant(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextDescendantOrSelf(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextFollowing(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextFollowingSibling(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextNamespace(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextParent(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextPreceding(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextPrecedingSibling(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNextSelf(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNodeEval(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNodeSetFreeNs(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNormalizeFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNotEqualValues(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNotFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNsLookup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathNumberFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathOrderDocElems(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathParseNCName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathParseName(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathParserGetContext(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathPopBoolean(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathPopNumber(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathPopString(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathPositionFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathRegisterAllFunctions(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathRegisterNs(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathRegisteredFuncsCleanup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathRegisteredNsCleanup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathRegisteredVariablesCleanup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathRoot(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlXPathRoundFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathSetContextDoc(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathSetContextNode(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathStartsWithFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathStringEvalNumber(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathStringFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathStringLengthFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathSubValues(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathSubstringAfterFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathSubstringBeforeFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathSubstringFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathSumFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathTranslateFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathTrueFunction(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathValueFlipSign(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathVariableLookup(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPathVariableLookupNS(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
    fn libxml_xmlXPatherror(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlXPtrEval(self_0: *mut PyObject, args: *mut PyObject) -> *mut PyObject;
    fn libxml_xmlXPtrNewContext(
        self_0: *mut PyObject,
        args: *mut PyObject,
    ) -> *mut PyObject;
}
pub type __builtin_va_list = [__va_list_tag; 1];
=======
    fn xmlMemMalloc(size: u64) -> * mut core::ffi::c_void;
    fn xmlMemRealloc(ptr: * mut core::ffi::c_void, size: u64) -> * mut core::ffi::c_void;
    fn xmlMemFree(ptr: * mut core::ffi::c_void);
    fn xmlMemoryStrdup(str: * const i8) -> * mut i8;
    static mut xmlFree: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> ()>;
    static mut xmlRealloc: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: u64,) -> * mut core::ffi::c_void>;
    static mut xmlMalloc: Option<unsafe extern "C"  fn(_: u64,) -> * mut core::ffi::c_void>;
    fn xmlThrDefSetGenericErrorFunc(
        ctx: * mut core::ffi::c_void,
        handler: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
    );
    fn xmlSetGenericErrorFunc(ctx: * mut core::ffi::c_void, handler: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>);
    fn xmlParserError(ctx: * mut core::ffi::c_void, msg: * const i8, _: ...);
    fn xmlParserWarning(ctx: * mut core::ffi::c_void, msg: * const i8, _: ...);
    fn xmlParserValidityError(ctx: * mut core::ffi::c_void, msg: * const i8, _: ...);
    fn xmlParserValidityWarning(
        ctx: * mut core::ffi::c_void,
        msg: * const i8,
        _: ...
    );
    fn xmlStrEqual(str1: * const u8, str2: * const u8) -> i32;
    fn xmlStrdup(cur: * const u8) -> * mut u8;
    fn xmlFreeValidCtxt(_: * mut crate::src::python::libxml::_xmlValidCtxt);
    fn xmlFindCharEncodingHandler(
        name: * const i8,
    ) -> * mut crate::src::python::libxml::_xmlCharEncodingHandler;
    fn xmlParseCharEncoding(name: * const i8) -> i32;
    fn xmlPopInputCallbacks() -> i32;
    fn xmlAllocParserInputBuffer(enc: i32) -> * mut crate::src::python::libxml::_xmlParserInputBuffer;
    fn xmlParserGetDirectory(filename: * const i8) -> * mut i8;
    fn xmlRegisterInputCallbacks(
        matchFunc: Option<unsafe extern "C"  fn(_: * const i8,) -> i32>,
        openFunc: Option<unsafe extern "C"  fn(_: * const i8,) -> * mut core::ffi::c_void>,
        readFunc: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * mut i8,_: i32,) -> i32>,
        closeFunc: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> i32>,
    ) -> i32;
    fn xmlAllocOutputBuffer(encoder: * mut crate::src::python::libxml::_xmlCharEncodingHandler) -> * mut crate::src::python::libxml::_xmlOutputBuffer;
    fn xmlOutputBufferCreateFile(
        file: * mut crate::src::python::libxml::_IO_FILE,
        encoder: * mut crate::src::python::libxml::_xmlCharEncodingHandler,
    ) -> * mut crate::src::python::libxml::_xmlOutputBuffer;
    fn xmlOutputBufferFlush(out: * mut crate::src::python::libxml::_xmlOutputBuffer) -> i32;
    fn xmlOutputBufferClose(out: * mut crate::src::python::libxml::_xmlOutputBuffer) -> i32;
    fn xmlInitParser();
    fn xmlCleanupParser();
    fn xmlSAXUserParseFile(
        sax: * mut crate::src::python::libxml::_xmlSAXHandler,
        user_data: * mut core::ffi::c_void,
        filename: * const i8,
    ) -> i32;
    fn xmlFreeParserCtxt(ctxt: * mut crate::src::python::libxml::_xmlParserCtxt);
    fn xmlCreatePushParserCtxt(
        sax: * mut crate::src::python::libxml::_xmlSAXHandler,
        user_data: * mut core::ffi::c_void,
        chunk: * const i8,
        size: i32,
        filename: * const i8,
    ) -> * mut crate::src::python::libxml::_xmlParserCtxt;
    fn xmlNewIOInputStream(
        ctxt: * mut crate::src::python::libxml::_xmlParserCtxt,
        input: * mut crate::src::python::libxml::_xmlParserInputBuffer,
        enc: i32,
    ) -> * mut crate::src::python::libxml::_xmlParserInput;
    fn xmlSetExternalEntityLoader(f: Option<unsafe extern "C"  fn(_: * const i8,_: * const i8,_: * mut crate::src::python::libxml::_xmlParserCtxt,) -> * mut crate::src::python::libxml::_xmlParserInput>);
    fn xmlGetExternalEntityLoader() -> Option<unsafe extern "C"  fn(_: * const i8,_: * const i8,_: * mut crate::src::python::libxml::_xmlParserCtxt,) -> * mut crate::src::python::libxml::_xmlParserInput>;
    fn xmlSaveFormatFileTo(
        buf: * mut crate::src::python::libxml::_xmlOutputBuffer,
        cur: * mut crate::src::python::libxml::_xmlDoc,
        encoding: * const i8,
        format: i32,
    ) -> i32;
    fn xmlNodeDumpOutput(
        buf: * mut crate::src::python::libxml::_xmlOutputBuffer,
        doc: * mut crate::src::python::libxml::_xmlDoc,
        cur: * mut crate::src::python::libxml::_xmlNode,
        level: i32,
        format: i32,
        encoding: * const i8,
    );
    fn xmlSaveFileTo(
        buf: * mut crate::src::python::libxml::_xmlOutputBuffer,
        cur: * mut crate::src::python::libxml::_xmlDoc,
        encoding: * const i8,
    ) -> i32;
    fn xmlXPathRegisterFuncLookup(
        ctxt: * mut crate::src::python::libxml::_xmlXPathContext,
        f: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,) -> Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_xmlXPathParserContext,_: i32,) -> ()>>,
        funcCtxt: * mut core::ffi::c_void,
    );
    fn xmlXPathRegisterVariableNS(
        ctxt: * mut crate::src::python::libxml::_xmlXPathContext,
        name: * const u8,
        ns_uri: * const u8,
        value: * mut crate::src::python::libxml::_xmlXPathObject,
    ) -> i32;
    fn valuePop(ctxt: * mut crate::src::python::libxml::_xmlXPathParserContext) -> * mut crate::src::python::libxml::_xmlXPathObject;
    fn valuePush(
        ctxt: * mut crate::src::python::libxml::_xmlXPathParserContext,
        value: * mut crate::src::python::libxml::_xmlXPathObject,
    ) -> i32;
    fn xmlC14NDocSaveTo(
        doc: * mut crate::src::python::libxml::_xmlDoc,
        nodes: * mut crate::src::python::libxml::_xmlNodeSet,
        mode: i32,
        inclusive_ns_prefixes: * mut * mut u8,
        with_comments: i32,
        buf: * mut crate::src::python::libxml::_xmlOutputBuffer,
    ) -> i32;
    fn xmlC14NDocDumpMemory(
        doc: * mut crate::src::python::libxml::_xmlDoc,
        nodes: * mut crate::src::python::libxml::_xmlNodeSet,
        mode: i32,
        inclusive_ns_prefixes: * mut * mut u8,
        with_comments: i32,
        doc_txt_ptr: * mut * mut u8,
    ) -> i32;
    fn xmlFreeTextReader(reader: * mut crate::src::python::types::_xmlTextReader);
    fn xmlRelaxNGFreeValidCtxt(ctxt: * mut crate::src::python::types::_xmlRelaxNGValidCtxt);
    fn xmlRelaxNGSetValidErrors(
        ctxt: * mut crate::src::python::types::_xmlRelaxNGValidCtxt,
        err: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
        warn: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
        ctx: * mut core::ffi::c_void,
    );
    fn xmlTextReaderSetErrorHandler(
        reader: * mut crate::src::python::types::_xmlTextReader,
        f: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: u32,_: * mut core::ffi::c_void,) -> ()>,
        arg: * mut core::ffi::c_void,
    );
    fn xmlTextReaderGetErrorHandler(
        reader: * mut crate::src::python::types::_xmlTextReader,
        f: * mut Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: u32,_: * mut core::ffi::c_void,) -> ()>,
        arg: * mut * mut core::ffi::c_void,
    );
    fn xmlRelaxNGGetValidErrors(
        // ctxt: * mut crate::src::python::types::_xmlRelaxNGValidCtxt,
        // err: * mut Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
        // warn: * mut Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
        ctxt: xmlRelaxNGValidCtxtPtr,
        err: *mut xmlRelaxNGValidityErrorFunc,
        warn: *mut xmlRelaxNGValidityWarningFunc,
        ctx: * mut * mut core::ffi::c_void,
    ) -> i32;
    fn xmlSchemaSetValidErrors(
        ctxt: * mut crate::src::python::types::_xmlSchemaValidCtxt,
        err: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
        warn: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
        ctx: * mut core::ffi::c_void,
    );
    fn xmlSchemaFreeValidCtxt(ctxt: * mut crate::src::python::types::_xmlSchemaValidCtxt);
    fn xmlSchemaGetValidErrors(
        // ctxt: * mut crate::src::python::types::_xmlSchemaValidCtxt,
        // err: * mut Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
        // warn: * mut Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
        ctxt: xmlSchemaValidCtxtPtr,
        err: *mut xmlSchemaValidityErrorFunc,
        warn: *mut xmlSchemaValidityWarningFunc,
        ctx: * mut * mut core::ffi::c_void,
    ) -> i32;
    fn xmlSaveToBuffer(
        buffer: * mut crate::src::python::libxml::_xmlBuffer,
        encoding: * const i8,
        options: i32,
    ) -> * mut crate::src::python::libxml::_xmlSaveCtxt;
    fn xmlSaveDoc(ctxt: * mut crate::src::python::libxml::_xmlSaveCtxt, doc: * mut crate::src::python::libxml::_xmlDoc) -> i64;
    fn xmlSaveTree(ctxt: * mut crate::src::python::libxml::_xmlSaveCtxt, node: * mut crate::src::python::libxml::_xmlNode) -> i64;
    fn xmlSaveClose(ctxt: * mut crate::src::python::libxml::_xmlSaveCtxt) -> i32;
    fn htmlCreatePushParserCtxt(
        sax: * mut crate::src::python::libxml::_xmlSAXHandler,
        user_data: * mut core::ffi::c_void,
        chunk: * const i8,
        size: i32,
        filename: * const i8,
        enc: i32,
    ) -> * mut crate::src::python::libxml::_xmlParserCtxt;
    fn xmlCatalogAddLocal(
        catalogs: * mut core::ffi::c_void,
        URL: * const u8,
    ) -> * mut core::ffi::c_void;
    fn htmlGetMetaEncoding(doc: * mut crate::src::python::libxml::_xmlDoc) -> * const u8;
    fn htmlSAXParseFile(
        filename: * const i8,
        encoding: * const i8,
        sax: * mut crate::src::python::libxml::_xmlSAXHandler,
        userData: * mut core::ffi::c_void,
    ) -> * mut crate::src::python::libxml::_xmlDoc;
    fn htmlNodeDumpFormatOutput(
        buf: * mut crate::src::python::libxml::_xmlOutputBuffer,
        doc: * mut crate::src::python::libxml::_xmlDoc,
        cur: * mut crate::src::python::libxml::_xmlNode,
        encoding: * const i8,
        format: i32,
    );
    fn htmlDocContentDumpFormatOutput(
        buf: * mut crate::src::python::libxml::_xmlOutputBuffer,
        cur: * mut crate::src::python::libxml::_xmlDoc,
        encoding: * const i8,
        format: i32,
    );
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
pub use crate::src::python::libxml2_py::libxml_htmlAutoCloseTag;
pub use crate::src::python::libxml2_py::libxml_htmlCreateFileParserCtxt;
pub use crate::src::python::libxml2_py::libxml_htmlCreateMemoryParserCtxt;
pub use crate::src::python::libxml2_py::libxml_htmlCtxtReadDoc;
pub use crate::src::python::libxml2_py::libxml_htmlCtxtReadFd;
pub use crate::src::python::libxml2_py::libxml_htmlCtxtReadFile;
pub use crate::src::python::libxml2_py::libxml_htmlCtxtReadMemory;
pub use crate::src::python::libxml2_py::libxml_htmlCtxtReset;
pub use crate::src::python::libxml2_py::libxml_htmlCtxtUseOptions;
pub use crate::src::python::libxml2_py::libxml_htmlDefaultSAXHandlerInit;
pub use crate::src::python::libxml2_py::libxml_htmlDocContentDumpFormatOutput;
pub use crate::src::python::libxml2_py::libxml_htmlDocContentDumpOutput;
pub use crate::src::python::libxml2_py::libxml_htmlDocDump;
pub use crate::src::python::libxml2_py::libxml_htmlFreeParserCtxt;
pub use crate::src::python::libxml2_py::libxml_htmlGetMetaEncoding;
pub use crate::src::python::libxml2_py::libxml_htmlHandleOmittedElem;
pub use crate::src::python::libxml2_py::libxml_htmlInitAutoClose;
pub use crate::src::python::libxml2_py::libxml_htmlIsAutoClosed;
pub use crate::src::python::libxml2_py::libxml_htmlIsBooleanAttr;
pub use crate::src::python::libxml2_py::libxml_htmlIsScriptAttribute;
pub use crate::src::python::libxml2_py::libxml_htmlNewDoc;
pub use crate::src::python::libxml2_py::libxml_htmlNewDocNoDtD;
pub use crate::src::python::libxml2_py::libxml_htmlNewParserCtxt;
pub use crate::src::python::libxml2_py::libxml_htmlNodeDumpFile;
pub use crate::src::python::libxml2_py::libxml_htmlNodeDumpFileFormat;
pub use crate::src::python::libxml2_py::libxml_htmlNodeDumpFormatOutput;
pub use crate::src::python::libxml2_py::libxml_htmlNodeDumpOutput;
pub use crate::src::python::libxml2_py::libxml_htmlParseCharRef;
pub use crate::src::python::libxml2_py::libxml_htmlParseChunk;
pub use crate::src::python::libxml2_py::libxml_htmlParseDoc;
pub use crate::src::python::libxml2_py::libxml_htmlParseDocument;
pub use crate::src::python::libxml2_py::libxml_htmlParseElement;
pub use crate::src::python::libxml2_py::libxml_htmlParseFile;
pub use crate::src::python::libxml2_py::libxml_htmlReadDoc;
pub use crate::src::python::libxml2_py::libxml_htmlReadFd;
pub use crate::src::python::libxml2_py::libxml_htmlReadFile;
pub use crate::src::python::libxml2_py::libxml_htmlReadMemory;
pub use crate::src::python::libxml2_py::libxml_htmlSaveFile;
pub use crate::src::python::libxml2_py::libxml_htmlSaveFileEnc;
pub use crate::src::python::libxml2_py::libxml_htmlSaveFileFormat;
pub use crate::src::python::libxml2_py::libxml_htmlSetMetaEncoding;
pub use crate::src::python::libxml2_py::libxml_namePop;
pub use crate::src::python::libxml2_py::libxml_namePush;
pub use crate::src::python::libxml2_py::libxml_nodePop;
pub use crate::src::python::libxml2_py::libxml_nodePush;
pub use crate::src::python::libxml2_py::libxml_valuePop;
pub use crate::src::python::libxml2_py::libxml_xmlACatalogAdd;
pub use crate::src::python::libxml2_py::libxml_xmlACatalogDump;
pub use crate::src::python::libxml2_py::libxml_xmlACatalogRemove;
pub use crate::src::python::libxml2_py::libxml_xmlACatalogResolve;
pub use crate::src::python::libxml2_py::libxml_xmlACatalogResolvePublic;
pub use crate::src::python::libxml2_py::libxml_xmlACatalogResolveSystem;
pub use crate::src::python::libxml2_py::libxml_xmlACatalogResolveURI;
pub use crate::src::python::libxml2_py::libxml_xmlAddChild;
pub use crate::src::python::libxml2_py::libxml_xmlAddChildList;
pub use crate::src::python::libxml2_py::libxml_xmlAddDocEntity;
pub use crate::src::python::libxml2_py::libxml_xmlAddDtdEntity;
pub use crate::src::python::libxml2_py::libxml_xmlAddEncodingAlias;
pub use crate::src::python::libxml2_py::libxml_xmlAddNextSibling;
pub use crate::src::python::libxml2_py::libxml_xmlAddPrevSibling;
pub use crate::src::python::libxml2_py::libxml_xmlAddSibling;
pub use crate::src::python::libxml2_py::libxml_xmlBoolToText;
pub use crate::src::python::libxml2_py::libxml_xmlBuildQName;
pub use crate::src::python::libxml2_py::libxml_xmlBuildRelativeURI;
pub use crate::src::python::libxml2_py::libxml_xmlBuildURI;
pub use crate::src::python::libxml2_py::libxml_xmlByteConsumed;
pub use crate::src::python::libxml2_py::libxml_xmlCanonicPath;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogAdd;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogCleanup;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogConvert;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogDump;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogGetPublic;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogGetSystem;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogIsEmpty;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogRemove;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogResolve;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogResolvePublic;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogResolveSystem;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogResolveURI;
pub use crate::src::python::libxml2_py::libxml_xmlCatalogSetDebug;
pub use crate::src::python::libxml2_py::libxml_xmlCharStrdup;
pub use crate::src::python::libxml2_py::libxml_xmlCharStrndup;
pub use crate::src::python::libxml2_py::libxml_xmlCheckFilename;
pub use crate::src::python::libxml2_py::libxml_xmlCheckLanguageID;
pub use crate::src::python::libxml2_py::libxml_xmlCheckUTF8;
pub use crate::src::python::libxml2_py::libxml_xmlCheckVersion;
pub use crate::src::python::libxml2_py::libxml_xmlCleanupCharEncodingHandlers;
pub use crate::src::python::libxml2_py::libxml_xmlCleanupEncodingAliases;
pub use crate::src::python::libxml2_py::libxml_xmlCleanupGlobals;
pub use crate::src::python::libxml2_py::libxml_xmlCleanupInputCallbacks;
pub use crate::src::python::libxml2_py::libxml_xmlCleanupOutputCallbacks;
pub use crate::src::python::libxml2_py::libxml_xmlCleanupPredefinedEntities;
pub use crate::src::python::libxml2_py::libxml_xmlClearParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlConvertSGMLCatalog;
pub use crate::src::python::libxml2_py::libxml_xmlCopyChar;
pub use crate::src::python::libxml2_py::libxml_xmlCopyCharMultiByte;
pub use crate::src::python::libxml2_py::libxml_xmlCopyDoc;
pub use crate::src::python::libxml2_py::libxml_xmlCopyDtd;
pub use crate::src::python::libxml2_py::libxml_xmlCopyError;
pub use crate::src::python::libxml2_py::libxml_xmlCopyNamespace;
pub use crate::src::python::libxml2_py::libxml_xmlCopyNamespaceList;
pub use crate::src::python::libxml2_py::libxml_xmlCopyNode;
pub use crate::src::python::libxml2_py::libxml_xmlCopyNodeList;
pub use crate::src::python::libxml2_py::libxml_xmlCopyProp;
pub use crate::src::python::libxml2_py::libxml_xmlCopyPropList;
pub use crate::src::python::libxml2_py::libxml_xmlCreateDocParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlCreateEntityParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlCreateFileParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlCreateIntSubset;
pub use crate::src::python::libxml2_py::libxml_xmlCreateMemoryParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlCreateURI;
pub use crate::src::python::libxml2_py::libxml_xmlCreateURLParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlCtxtReadDoc;
pub use crate::src::python::libxml2_py::libxml_xmlCtxtReadFd;
pub use crate::src::python::libxml2_py::libxml_xmlCtxtReadFile;
pub use crate::src::python::libxml2_py::libxml_xmlCtxtReadMemory;
pub use crate::src::python::libxml2_py::libxml_xmlCtxtReset;
pub use crate::src::python::libxml2_py::libxml_xmlCtxtResetPush;
pub use crate::src::python::libxml2_py::libxml_xmlCtxtUseOptions;
pub use crate::src::python::libxml2_py::libxml_xmlDebugCheckDocument;
pub use crate::src::python::libxml2_py::libxml_xmlDebugDumpAttr;
pub use crate::src::python::libxml2_py::libxml_xmlDebugDumpAttrList;
pub use crate::src::python::libxml2_py::libxml_xmlDebugDumpDTD;
pub use crate::src::python::libxml2_py::libxml_xmlDebugDumpDocument;
pub use crate::src::python::libxml2_py::libxml_xmlDebugDumpDocumentHead;
pub use crate::src::python::libxml2_py::libxml_xmlDebugDumpEntities;
pub use crate::src::python::libxml2_py::libxml_xmlDebugDumpNode;
pub use crate::src::python::libxml2_py::libxml_xmlDebugDumpNodeList;
pub use crate::src::python::libxml2_py::libxml_xmlDebugDumpOneNode;
pub use crate::src::python::libxml2_py::libxml_xmlDebugDumpString;
pub use crate::src::python::libxml2_py::libxml_xmlDecodeEntities;
pub use crate::src::python::libxml2_py::libxml_xmlDefaultSAXHandlerInit;
pub use crate::src::python::libxml2_py::libxml_xmlDelEncodingAlias;
pub use crate::src::python::libxml2_py::libxml_xmlDictCleanup;
pub use crate::src::python::libxml2_py::libxml_xmlDocCopyNode;
pub use crate::src::python::libxml2_py::libxml_xmlDocCopyNodeList;
pub use crate::src::python::libxml2_py::libxml_xmlDocDump;
pub use crate::src::python::libxml2_py::libxml_xmlDocFormatDump;
pub use crate::src::python::libxml2_py::libxml_xmlDocGetRootElement;
pub use crate::src::python::libxml2_py::libxml_xmlDocSetRootElement;
pub use crate::src::python::libxml2_py::libxml_xmlElemDump;
pub use crate::src::python::libxml2_py::libxml_xmlEncodeEntities;
pub use crate::src::python::libxml2_py::libxml_xmlEncodeEntitiesReentrant;
pub use crate::src::python::libxml2_py::libxml_xmlEncodeSpecialChars;
pub use crate::src::python::libxml2_py::libxml_xmlErrorGetCode;
pub use crate::src::python::libxml2_py::libxml_xmlErrorGetDomain;
pub use crate::src::python::libxml2_py::libxml_xmlErrorGetFile;
pub use crate::src::python::libxml2_py::libxml_xmlErrorGetLevel;
pub use crate::src::python::libxml2_py::libxml_xmlErrorGetLine;
pub use crate::src::python::libxml2_py::libxml_xmlErrorGetMessage;
pub use crate::src::python::libxml2_py::libxml_xmlFileMatch;
pub use crate::src::python::libxml2_py::libxml_xmlFirstElementChild;
pub use crate::src::python::libxml2_py::libxml_xmlFreeCatalog;
pub use crate::src::python::libxml2_py::libxml_xmlFreeDoc;
pub use crate::src::python::libxml2_py::libxml_xmlFreeDtd;
pub use crate::src::python::libxml2_py::libxml_xmlFreeNode;
pub use crate::src::python::libxml2_py::libxml_xmlFreeNodeList;
pub use crate::src::python::libxml2_py::libxml_xmlFreeNs;
pub use crate::src::python::libxml2_py::libxml_xmlFreeNsList;
pub use crate::src::python::libxml2_py::libxml_xmlFreeParserInputBuffer;
pub use crate::src::python::libxml2_py::libxml_xmlFreeProp;
pub use crate::src::python::libxml2_py::libxml_xmlFreePropList;
pub use crate::src::python::libxml2_py::libxml_xmlFreeURI;
pub use crate::src::python::libxml2_py::libxml_xmlGetCompressMode;
pub use crate::src::python::libxml2_py::libxml_xmlGetDocCompressMode;
pub use crate::src::python::libxml2_py::libxml_xmlGetDocEntity;
pub use crate::src::python::libxml2_py::libxml_xmlGetDtdAttrDesc;
pub use crate::src::python::libxml2_py::libxml_xmlGetDtdElementDesc;
pub use crate::src::python::libxml2_py::libxml_xmlGetDtdEntity;
pub use crate::src::python::libxml2_py::libxml_xmlGetDtdQAttrDesc;
pub use crate::src::python::libxml2_py::libxml_xmlGetDtdQElementDesc;
pub use crate::src::python::libxml2_py::libxml_xmlGetEncodingAlias;
pub use crate::src::python::libxml2_py::libxml_xmlGetID;
pub use crate::src::python::libxml2_py::libxml_xmlGetIntSubset;
pub use crate::src::python::libxml2_py::libxml_xmlGetLastChild;
pub use crate::src::python::libxml2_py::libxml_xmlGetLastError;
pub use crate::src::python::libxml2_py::libxml_xmlGetLineNo;
pub use crate::src::python::libxml2_py::libxml_xmlGetNoNsProp;
pub use crate::src::python::libxml2_py::libxml_xmlGetNodePath;
pub use crate::src::python::libxml2_py::libxml_xmlGetNsProp;
pub use crate::src::python::libxml2_py::libxml_xmlGetParameterEntity;
pub use crate::src::python::libxml2_py::libxml_xmlGetPredefinedEntity;
pub use crate::src::python::libxml2_py::libxml_xmlGetProp;
pub use crate::src::python::libxml2_py::libxml_xmlHandleEntity;
pub use crate::src::python::libxml2_py::libxml_xmlHasNsProp;
pub use crate::src::python::libxml2_py::libxml_xmlHasProp;
pub use crate::src::python::libxml2_py::libxml_xmlIOFTPMatch;
pub use crate::src::python::libxml2_py::libxml_xmlIOHTTPMatch;
pub use crate::src::python::libxml2_py::libxml_xmlInitCharEncodingHandlers;
pub use crate::src::python::libxml2_py::libxml_xmlInitGlobals;
pub use crate::src::python::libxml2_py::libxml_xmlInitParser;
pub use crate::src::python::libxml2_py::libxml_xmlInitParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlInitializeCatalog;
pub use crate::src::python::libxml2_py::libxml_xmlInitializeDict;
pub use crate::src::python::libxml2_py::libxml_xmlInitializePredefinedEntities;
pub use crate::src::python::libxml2_py::libxml_xmlIsBaseChar;
pub use crate::src::python::libxml2_py::libxml_xmlIsBlank;
pub use crate::src::python::libxml2_py::libxml_xmlIsBlankNode;
pub use crate::src::python::libxml2_py::libxml_xmlIsChar;
pub use crate::src::python::libxml2_py::libxml_xmlIsCombining;
pub use crate::src::python::libxml2_py::libxml_xmlIsDigit;
pub use crate::src::python::libxml2_py::libxml_xmlIsExtender;
pub use crate::src::python::libxml2_py::libxml_xmlIsID;
pub use crate::src::python::libxml2_py::libxml_xmlIsIdeographic;
pub use crate::src::python::libxml2_py::libxml_xmlIsLetter;
pub use crate::src::python::libxml2_py::libxml_xmlIsMixedElement;
pub use crate::src::python::libxml2_py::libxml_xmlIsPubidChar;
pub use crate::src::python::libxml2_py::libxml_xmlIsRef;
pub use crate::src::python::libxml2_py::libxml_xmlIsXHTML;
pub use crate::src::python::libxml2_py::libxml_xmlKeepBlanksDefault;
pub use crate::src::python::libxml2_py::libxml_xmlLastElementChild;
pub use crate::src::python::libxml2_py::libxml_xmlLineNumbersDefault;
pub use crate::src::python::libxml2_py::libxml_xmlLoadACatalog;
pub use crate::src::python::libxml2_py::libxml_xmlLoadCatalog;
pub use crate::src::python::libxml2_py::libxml_xmlLoadCatalogs;
pub use crate::src::python::libxml2_py::libxml_xmlLoadSGMLSuperCatalog;
pub use crate::src::python::libxml2_py::libxml_xmlLsCountNode;
pub use crate::src::python::libxml2_py::libxml_xmlLsOneNode;
pub use crate::src::python::libxml2_py::libxml_xmlNamespaceParseNCName;
pub use crate::src::python::libxml2_py::libxml_xmlNamespaceParseNSDef;
pub use crate::src::python::libxml2_py::libxml_xmlNanoFTPCleanup;
pub use crate::src::python::libxml2_py::libxml_xmlNanoFTPInit;
pub use crate::src::python::libxml2_py::libxml_xmlNanoFTPProxy;
pub use crate::src::python::libxml2_py::libxml_xmlNanoFTPScanProxy;
pub use crate::src::python::libxml2_py::libxml_xmlNanoHTTPCleanup;
pub use crate::src::python::libxml2_py::libxml_xmlNanoHTTPInit;
pub use crate::src::python::libxml2_py::libxml_xmlNanoHTTPScanProxy;
pub use crate::src::python::libxml2_py::libxml_xmlNewCDataBlock;
pub use crate::src::python::libxml2_py::libxml_xmlNewCatalog;
pub use crate::src::python::libxml2_py::libxml_xmlNewCharRef;
pub use crate::src::python::libxml2_py::libxml_xmlNewChild;
pub use crate::src::python::libxml2_py::libxml_xmlNewComment;
pub use crate::src::python::libxml2_py::libxml_xmlNewDoc;
pub use crate::src::python::libxml2_py::libxml_xmlNewDocComment;
pub use crate::src::python::libxml2_py::libxml_xmlNewDocFragment;
pub use crate::src::python::libxml2_py::libxml_xmlNewDocNode;
pub use crate::src::python::libxml2_py::libxml_xmlNewDocNodeEatName;
pub use crate::src::python::libxml2_py::libxml_xmlNewDocPI;
pub use crate::src::python::libxml2_py::libxml_xmlNewDocProp;
pub use crate::src::python::libxml2_py::libxml_xmlNewDocRawNode;
pub use crate::src::python::libxml2_py::libxml_xmlNewDocText;
pub use crate::src::python::libxml2_py::libxml_xmlNewDocTextLen;
pub use crate::src::python::libxml2_py::libxml_xmlNewDtd;
pub use crate::src::python::libxml2_py::libxml_xmlNewEntity;
pub use crate::src::python::libxml2_py::libxml_xmlNewGlobalNs;
pub use crate::src::python::libxml2_py::libxml_xmlNewNodeEatName;
pub use crate::src::python::libxml2_py::libxml_xmlNewNs;
pub use crate::src::python::libxml2_py::libxml_xmlNewNsProp;
pub use crate::src::python::libxml2_py::libxml_xmlNewNsPropEatName;
pub use crate::src::python::libxml2_py::libxml_xmlNewPI;
pub use crate::src::python::libxml2_py::libxml_xmlNewParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlNewProp;
pub use crate::src::python::libxml2_py::libxml_xmlNewReference;
pub use crate::src::python::libxml2_py::libxml_xmlNewText;
pub use crate::src::python::libxml2_py::libxml_xmlNewTextChild;
pub use crate::src::python::libxml2_py::libxml_xmlNewTextLen;
pub use crate::src::python::libxml2_py::libxml_xmlNewTextReader;
pub use crate::src::python::libxml2_py::libxml_xmlNewTextReaderFilename;
pub use crate::src::python::libxml2_py::libxml_xmlNewValidCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlNextChar;
pub use crate::src::python::libxml2_py::libxml_xmlNextElementSibling;
pub use crate::src::python::libxml2_py::libxml_xmlNodeAddContent;
pub use crate::src::python::libxml2_py::libxml_xmlNodeAddContentLen;
pub use crate::src::python::libxml2_py::libxml_xmlNodeDumpOutput;
pub use crate::src::python::libxml2_py::libxml_xmlNodeGetBase;
pub use crate::src::python::libxml2_py::libxml_xmlNodeGetContent;
pub use crate::src::python::libxml2_py::libxml_xmlNodeGetLang;
pub use crate::src::python::libxml2_py::libxml_xmlNodeGetSpacePreserve;
pub use crate::src::python::libxml2_py::libxml_xmlNodeIsText;
pub use crate::src::python::libxml2_py::libxml_xmlNodeListGetRawString;
pub use crate::src::python::libxml2_py::libxml_xmlNodeListGetString;
pub use crate::src::python::libxml2_py::libxml_xmlNodeSetBase;
pub use crate::src::python::libxml2_py::libxml_xmlNodeSetContent;
pub use crate::src::python::libxml2_py::libxml_xmlNodeSetContentLen;
pub use crate::src::python::libxml2_py::libxml_xmlNodeSetLang;
pub use crate::src::python::libxml2_py::libxml_xmlNodeSetName;
pub use crate::src::python::libxml2_py::libxml_xmlNodeSetSpacePreserve;
pub use crate::src::python::libxml2_py::libxml_xmlNormalizeURIPath;
pub use crate::src::python::libxml2_py::libxml_xmlNormalizeWindowsPath;
pub use crate::src::python::libxml2_py::libxml_xmlOutputBufferGetContent;
pub use crate::src::python::libxml2_py::libxml_xmlOutputBufferWrite;
pub use crate::src::python::libxml2_py::libxml_xmlOutputBufferWriteString;
pub use crate::src::python::libxml2_py::libxml_xmlParseAttValue;
pub use crate::src::python::libxml2_py::libxml_xmlParseAttributeListDecl;
pub use crate::src::python::libxml2_py::libxml_xmlParseCDSect;
pub use crate::src::python::libxml2_py::libxml_xmlParseCatalogFile;
pub use crate::src::python::libxml2_py::libxml_xmlParseCharData;
pub use crate::src::python::libxml2_py::libxml_xmlParseCharRef;
pub use crate::src::python::libxml2_py::libxml_xmlParseChunk;
pub use crate::src::python::libxml2_py::libxml_xmlParseComment;
pub use crate::src::python::libxml2_py::libxml_xmlParseContent;
pub use crate::src::python::libxml2_py::libxml_xmlParseDTD;
pub use crate::src::python::libxml2_py::libxml_xmlParseDoc;
pub use crate::src::python::libxml2_py::libxml_xmlParseDocTypeDecl;
pub use crate::src::python::libxml2_py::libxml_xmlParseDocument;
pub use crate::src::python::libxml2_py::libxml_xmlParseElement;
pub use crate::src::python::libxml2_py::libxml_xmlParseElementDecl;
pub use crate::src::python::libxml2_py::libxml_xmlParseEncName;
pub use crate::src::python::libxml2_py::libxml_xmlParseEncodingDecl;
pub use crate::src::python::libxml2_py::libxml_xmlParseEndTag;
pub use crate::src::python::libxml2_py::libxml_xmlParseEntity;
pub use crate::src::python::libxml2_py::libxml_xmlParseEntityDecl;
pub use crate::src::python::libxml2_py::libxml_xmlParseEntityRef;
pub use crate::src::python::libxml2_py::libxml_xmlParseExtParsedEnt;
pub use crate::src::python::libxml2_py::libxml_xmlParseExternalSubset;
pub use crate::src::python::libxml2_py::libxml_xmlParseFile;
pub use crate::src::python::libxml2_py::libxml_xmlParseMarkupDecl;
pub use crate::src::python::libxml2_py::libxml_xmlParseMemory;
pub use crate::src::python::libxml2_py::libxml_xmlParseMisc;
pub use crate::src::python::libxml2_py::libxml_xmlParseName;
pub use crate::src::python::libxml2_py::libxml_xmlParseNamespace;
pub use crate::src::python::libxml2_py::libxml_xmlParseNmtoken;
pub use crate::src::python::libxml2_py::libxml_xmlParseNotationDecl;
pub use crate::src::python::libxml2_py::libxml_xmlParsePEReference;
pub use crate::src::python::libxml2_py::libxml_xmlParsePI;
pub use crate::src::python::libxml2_py::libxml_xmlParsePITarget;
pub use crate::src::python::libxml2_py::libxml_xmlParsePubidLiteral;
pub use crate::src::python::libxml2_py::libxml_xmlParseQuotedString;
pub use crate::src::python::libxml2_py::libxml_xmlParseReference;
pub use crate::src::python::libxml2_py::libxml_xmlParseSDDecl;
pub use crate::src::python::libxml2_py::libxml_xmlParseStartTag;
pub use crate::src::python::libxml2_py::libxml_xmlParseSystemLiteral;
pub use crate::src::python::libxml2_py::libxml_xmlParseTextDecl;
pub use crate::src::python::libxml2_py::libxml_xmlParseURI;
pub use crate::src::python::libxml2_py::libxml_xmlParseURIRaw;
pub use crate::src::python::libxml2_py::libxml_xmlParseURIReference;
pub use crate::src::python::libxml2_py::libxml_xmlParseVersionInfo;
pub use crate::src::python::libxml2_py::libxml_xmlParseVersionNum;
pub use crate::src::python::libxml2_py::libxml_xmlParseXMLDecl;
pub use crate::src::python::libxml2_py::libxml_xmlParserGetDirectory;
pub use crate::src::python::libxml2_py::libxml_xmlParserGetDoc;
pub use crate::src::python::libxml2_py::libxml_xmlParserGetIsValid;
pub use crate::src::python::libxml2_py::libxml_xmlParserGetWellFormed;
pub use crate::src::python::libxml2_py::libxml_xmlParserHandlePEReference;
pub use crate::src::python::libxml2_py::libxml_xmlParserHandleReference;
pub use crate::src::python::libxml2_py::libxml_xmlParserInputBufferGrow;
pub use crate::src::python::libxml2_py::libxml_xmlParserInputBufferPush;
pub use crate::src::python::libxml2_py::libxml_xmlParserInputBufferRead;
pub use crate::src::python::libxml2_py::libxml_xmlParserSetLineNumbers;
pub use crate::src::python::libxml2_py::libxml_xmlParserSetLoadSubset;
pub use crate::src::python::libxml2_py::libxml_xmlParserSetPedantic;
pub use crate::src::python::libxml2_py::libxml_xmlParserSetReplaceEntities;
pub use crate::src::python::libxml2_py::libxml_xmlParserSetValidate;
pub use crate::src::python::libxml2_py::libxml_xmlPathToURI;
pub use crate::src::python::libxml2_py::libxml_xmlPedanticParserDefault;
pub use crate::src::python::libxml2_py::libxml_xmlPopInput;
pub use crate::src::python::libxml2_py::libxml_xmlPopOutputCallbacks;
pub use crate::src::python::libxml2_py::libxml_xmlPreviousElementSibling;
pub use crate::src::python::libxml2_py::libxml_xmlPrintURI;
pub use crate::src::python::libxml2_py::libxml_xmlReadDoc;
pub use crate::src::python::libxml2_py::libxml_xmlReadFd;
pub use crate::src::python::libxml2_py::libxml_xmlReadFile;
pub use crate::src::python::libxml2_py::libxml_xmlReadMemory;
pub use crate::src::python::libxml2_py::libxml_xmlReaderForDoc;
pub use crate::src::python::libxml2_py::libxml_xmlReaderForFd;
pub use crate::src::python::libxml2_py::libxml_xmlReaderForFile;
pub use crate::src::python::libxml2_py::libxml_xmlReaderForMemory;
pub use crate::src::python::libxml2_py::libxml_xmlReaderNewDoc;
pub use crate::src::python::libxml2_py::libxml_xmlReaderNewFd;
pub use crate::src::python::libxml2_py::libxml_xmlReaderNewFile;
pub use crate::src::python::libxml2_py::libxml_xmlReaderNewMemory;
pub use crate::src::python::libxml2_py::libxml_xmlReaderNewWalker;
pub use crate::src::python::libxml2_py::libxml_xmlReaderWalker;
pub use crate::src::python::libxml2_py::libxml_xmlReconciliateNs;
pub use crate::src::python::libxml2_py::libxml_xmlRecoverDoc;
pub use crate::src::python::libxml2_py::libxml_xmlRecoverFile;
pub use crate::src::python::libxml2_py::libxml_xmlRecoverMemory;
pub use crate::src::python::libxml2_py::libxml_xmlRegFreeRegexp;
pub use crate::src::python::libxml2_py::libxml_xmlRegexpCompile;
pub use crate::src::python::libxml2_py::libxml_xmlRegexpExec;
pub use crate::src::python::libxml2_py::libxml_xmlRegexpIsDeterminist;
pub use crate::src::python::libxml2_py::libxml_xmlRegexpPrint;
pub use crate::src::python::libxml2_py::libxml_xmlRegisterDefaultInputCallbacks;
pub use crate::src::python::libxml2_py::libxml_xmlRegisterDefaultOutputCallbacks;
pub use crate::src::python::libxml2_py::libxml_xmlRegisterHTTPPostCallbacks;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGCleanupTypes;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGDump;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGDumpTree;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGFree;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGFreeParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGInitTypes;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGNewDocParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGNewMemParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGNewParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGNewValidCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGParse;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGValidateDoc;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGValidateFullElement;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGValidatePopElement;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGValidatePushCData;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxNGValidatePushElement;
pub use crate::src::python::libxml2_py::libxml_xmlRelaxParserSetFlag;
pub use crate::src::python::libxml2_py::libxml_xmlRemoveID;
pub use crate::src::python::libxml2_py::libxml_xmlRemoveProp;
pub use crate::src::python::libxml2_py::libxml_xmlRemoveRef;
pub use crate::src::python::libxml2_py::libxml_xmlReplaceNode;
pub use crate::src::python::libxml2_py::libxml_xmlResetError;
pub use crate::src::python::libxml2_py::libxml_xmlResetLastError;
pub use crate::src::python::libxml2_py::libxml_xmlSAXDefaultVersion;
pub use crate::src::python::libxml2_py::libxml_xmlSaveFile;
pub use crate::src::python::libxml2_py::libxml_xmlSaveFileEnc;
pub use crate::src::python::libxml2_py::libxml_xmlSaveFormatFile;
pub use crate::src::python::libxml2_py::libxml_xmlSaveFormatFileEnc;
pub use crate::src::python::libxml2_py::libxml_xmlSaveUri;
pub use crate::src::python::libxml2_py::libxml_xmlScanName;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaCleanupTypes;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaCollapseString;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaDump;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaFree;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaFreeParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaInitTypes;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaIsValid;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaNewDocParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaNewMemParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaNewParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaNewValidCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaParse;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaSetValidOptions;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaValidCtxtGetOptions;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaValidCtxtGetParserCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaValidateDoc;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaValidateFile;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaValidateOneElement;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaValidateSetFilename;
pub use crate::src::python::libxml2_py::libxml_xmlSchemaWhiteSpaceReplace;
pub use crate::src::python::libxml2_py::libxml_xmlSearchNs;
pub use crate::src::python::libxml2_py::libxml_xmlSearchNsByHref;
pub use crate::src::python::libxml2_py::libxml_xmlSetCompressMode;
pub use crate::src::python::libxml2_py::libxml_xmlSetDocCompressMode;
pub use crate::src::python::libxml2_py::libxml_xmlSetListDoc;
pub use crate::src::python::libxml2_py::libxml_xmlSetNs;
pub use crate::src::python::libxml2_py::libxml_xmlSetNsProp;
pub use crate::src::python::libxml2_py::libxml_xmlSetProp;
pub use crate::src::python::libxml2_py::libxml_xmlSetTreeDoc;
pub use crate::src::python::libxml2_py::libxml_xmlSetupParserForBuffer;
pub use crate::src::python::libxml2_py::libxml_xmlShellPrintNode;
pub use crate::src::python::libxml2_py::libxml_xmlShellPrintXPathError;
pub use crate::src::python::libxml2_py::libxml_xmlSkipBlankChars;
pub use crate::src::python::libxml2_py::libxml_xmlStopParser;
pub use crate::src::python::libxml2_py::libxml_xmlStrEqual;
pub use crate::src::python::libxml2_py::libxml_xmlStrQEqual;
pub use crate::src::python::libxml2_py::libxml_xmlStrcasecmp;
pub use crate::src::python::libxml2_py::libxml_xmlStrcasestr;
pub use crate::src::python::libxml2_py::libxml_xmlStrcat;
pub use crate::src::python::libxml2_py::libxml_xmlStrchr;
pub use crate::src::python::libxml2_py::libxml_xmlStrcmp;
pub use crate::src::python::libxml2_py::libxml_xmlStrdup;
pub use crate::src::python::libxml2_py::libxml_xmlStringDecodeEntities;
pub use crate::src::python::libxml2_py::libxml_xmlStringGetNodeList;
pub use crate::src::python::libxml2_py::libxml_xmlStringLenDecodeEntities;
pub use crate::src::python::libxml2_py::libxml_xmlStringLenGetNodeList;
pub use crate::src::python::libxml2_py::libxml_xmlStrlen;
pub use crate::src::python::libxml2_py::libxml_xmlStrncasecmp;
pub use crate::src::python::libxml2_py::libxml_xmlStrncat;
pub use crate::src::python::libxml2_py::libxml_xmlStrncatNew;
pub use crate::src::python::libxml2_py::libxml_xmlStrncmp;
pub use crate::src::python::libxml2_py::libxml_xmlStrndup;
pub use crate::src::python::libxml2_py::libxml_xmlStrstr;
pub use crate::src::python::libxml2_py::libxml_xmlStrsub;
pub use crate::src::python::libxml2_py::libxml_xmlSubstituteEntitiesDefault;
pub use crate::src::python::libxml2_py::libxml_xmlTextConcat;
pub use crate::src::python::libxml2_py::libxml_xmlTextMerge;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderAttributeCount;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderByteConsumed;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderClose;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderConstBaseUri;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderConstEncoding;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderConstLocalName;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderConstName;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderConstNamespaceUri;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderConstPrefix;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderConstString;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderConstValue;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderConstXmlLang;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderConstXmlVersion;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderCurrentDoc;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderCurrentNode;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderDepth;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderExpand;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderGetAttribute;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderGetAttributeNo;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderGetAttributeNs;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderGetParserColumnNumber;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderGetParserLineNumber;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderGetParserProp;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderGetRemainder;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderHasAttributes;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderHasValue;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderIsDefault;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderIsEmptyElement;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderIsNamespaceDecl;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderIsValid;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderLocatorBaseURI;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderLocatorLineNumber;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderLookupNamespace;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderMoveToAttribute;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderMoveToAttributeNo;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderMoveToAttributeNs;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderMoveToElement;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderMoveToFirstAttribute;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderMoveToNextAttribute;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderNext;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderNextSibling;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderNodeType;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderNormalization;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderPreserve;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderQuoteChar;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderRead;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderReadAttributeValue;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderReadInnerXml;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderReadOuterXml;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderReadState;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderReadString;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderRelaxNGSetSchema;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderRelaxNGValidate;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderRelaxNGValidateCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderSchemaValidate;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderSchemaValidateCtxt;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderSetParserProp;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderSetSchema;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderSetup;
pub use crate::src::python::libxml2_py::libxml_xmlTextReaderStandalone;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefDefaultBufferSize;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefDoValidityCheckingDefaultValue;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefGetWarningsDefaultValue;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefIndentTreeOutput;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefKeepBlanksDefaultValue;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefLineNumbersDefaultValue;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefLoadExtDtdDefaultValue;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefParserDebugEntities;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefPedanticParserDefaultValue;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefSaveNoEmptyTags;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefSubstituteEntitiesDefaultValue;
pub use crate::src::python::libxml2_py::libxml_xmlThrDefTreeIndentString;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsAegeanNumbers;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsAlphabeticPresentationForms;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsArabic;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsArabicPresentationFormsA;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsArabicPresentationFormsB;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsArmenian;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsArrows;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsBasicLatin;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsBengali;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsBlock;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsBlockElements;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsBopomofo;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsBopomofoExtended;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsBoxDrawing;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsBraillePatterns;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsBuhid;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsByzantineMusicalSymbols;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCJKCompatibility;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCJKCompatibilityForms;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCJKCompatibilityIdeographs;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCJKCompatibilityIdeographsSupplement;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCJKRadicalsSupplement;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCJKSymbolsandPunctuation;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCJKUnifiedIdeographs;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCJKUnifiedIdeographsExtensionA;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCJKUnifiedIdeographsExtensionB;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCat;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatC;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatCc;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatCf;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatCo;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatCs;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatL;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatLl;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatLm;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatLo;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatLt;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatLu;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatM;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatMc;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatMe;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatMn;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatN;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatNd;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatNl;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatNo;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatP;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatPc;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatPd;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatPe;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatPf;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatPi;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatPo;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatPs;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatS;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatSc;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatSk;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatSm;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatSo;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatZ;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatZl;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatZp;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCatZs;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCherokee;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCombiningDiacriticalMarks;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCombiningDiacriticalMarksforSymbols;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCombiningHalfMarks;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCombiningMarksforSymbols;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsControlPictures;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCurrencySymbols;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCypriotSyllabary;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCyrillic;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsCyrillicSupplement;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsDeseret;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsDevanagari;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsDingbats;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsEnclosedAlphanumerics;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsEnclosedCJKLettersandMonths;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsEthiopic;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsGeneralPunctuation;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsGeometricShapes;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsGeorgian;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsGothic;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsGreek;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsGreekExtended;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsGreekandCoptic;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsGujarati;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsGurmukhi;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsHalfwidthandFullwidthForms;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsHangulCompatibilityJamo;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsHangulJamo;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsHangulSyllables;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsHanunoo;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsHebrew;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsHighPrivateUseSurrogates;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsHighSurrogates;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsHiragana;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsIPAExtensions;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsIdeographicDescriptionCharacters;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsKanbun;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsKangxiRadicals;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsKannada;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsKatakana;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsKatakanaPhoneticExtensions;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsKhmer;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsKhmerSymbols;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsLao;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsLatin1Supplement;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsLatinExtendedA;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsLatinExtendedAdditional;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsLatinExtendedB;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsLetterlikeSymbols;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsLimbu;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsLinearBIdeograms;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsLinearBSyllabary;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsLowSurrogates;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsMalayalam;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsMathematicalAlphanumericSymbols;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsMathematicalOperators;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsMiscellaneousMathematicalSymbolsA;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsMiscellaneousMathematicalSymbolsB;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsMiscellaneousSymbols;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsMiscellaneousSymbolsandArrows;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsMiscellaneousTechnical;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsMongolian;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsMusicalSymbols;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsMyanmar;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsNumberForms;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsOgham;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsOldItalic;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsOpticalCharacterRecognition;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsOriya;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsOsmanya;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsPhoneticExtensions;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsPrivateUse;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsPrivateUseArea;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsRunic;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsShavian;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsSinhala;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsSmallFormVariants;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsSpacingModifierLetters;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsSpecials;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsSuperscriptsandSubscripts;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsSupplementalArrowsA;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsSupplementalArrowsB;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsSupplementalMathematicalOperators;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsSupplementaryPrivateUseAreaA;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsSupplementaryPrivateUseAreaB;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsSyriac;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsTagalog;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsTagbanwa;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsTags;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsTaiLe;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsTaiXuanJingSymbols;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsTamil;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsTelugu;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsThaana;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsThai;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsTibetan;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsUgaritic;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsUnifiedCanadianAboriginalSyllabics;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsVariationSelectors;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsVariationSelectorsSupplement;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsYiRadicals;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsYiSyllables;
pub use crate::src::python::libxml2_py::libxml_xmlUCSIsYijingHexagramSymbols;
pub use crate::src::python::libxml2_py::libxml_xmlURIEscape;
pub use crate::src::python::libxml2_py::libxml_xmlURIEscapeStr;
pub use crate::src::python::libxml2_py::libxml_xmlURIGetAuthority;
pub use crate::src::python::libxml2_py::libxml_xmlURIGetFragment;
pub use crate::src::python::libxml2_py::libxml_xmlURIGetOpaque;
pub use crate::src::python::libxml2_py::libxml_xmlURIGetPath;
pub use crate::src::python::libxml2_py::libxml_xmlURIGetPort;
pub use crate::src::python::libxml2_py::libxml_xmlURIGetQuery;
pub use crate::src::python::libxml2_py::libxml_xmlURIGetQueryRaw;
pub use crate::src::python::libxml2_py::libxml_xmlURIGetScheme;
pub use crate::src::python::libxml2_py::libxml_xmlURIGetServer;
pub use crate::src::python::libxml2_py::libxml_xmlURIGetUser;
pub use crate::src::python::libxml2_py::libxml_xmlURISetAuthority;
pub use crate::src::python::libxml2_py::libxml_xmlURISetFragment;
pub use crate::src::python::libxml2_py::libxml_xmlURISetOpaque;
pub use crate::src::python::libxml2_py::libxml_xmlURISetPath;
pub use crate::src::python::libxml2_py::libxml_xmlURISetPort;
pub use crate::src::python::libxml2_py::libxml_xmlURISetQuery;
pub use crate::src::python::libxml2_py::libxml_xmlURISetQueryRaw;
pub use crate::src::python::libxml2_py::libxml_xmlURISetScheme;
pub use crate::src::python::libxml2_py::libxml_xmlURISetServer;
pub use crate::src::python::libxml2_py::libxml_xmlURISetUser;
pub use crate::src::python::libxml2_py::libxml_xmlURIUnescapeString;
pub use crate::src::python::libxml2_py::libxml_xmlUTF8Charcmp;
pub use crate::src::python::libxml2_py::libxml_xmlUTF8Size;
pub use crate::src::python::libxml2_py::libxml_xmlUTF8Strlen;
pub use crate::src::python::libxml2_py::libxml_xmlUTF8Strloc;
pub use crate::src::python::libxml2_py::libxml_xmlUTF8Strndup;
pub use crate::src::python::libxml2_py::libxml_xmlUTF8Strpos;
pub use crate::src::python::libxml2_py::libxml_xmlUTF8Strsize;
pub use crate::src::python::libxml2_py::libxml_xmlUTF8Strsub;
pub use crate::src::python::libxml2_py::libxml_xmlUnlinkNode;
pub use crate::src::python::libxml2_py::libxml_xmlUnsetNsProp;
pub use crate::src::python::libxml2_py::libxml_xmlUnsetProp;
pub use crate::src::python::libxml2_py::libxml_xmlValidCtxtNormalizeAttributeValue;
pub use crate::src::python::libxml2_py::libxml_xmlValidNormalizeAttributeValue;
pub use crate::src::python::libxml2_py::libxml_xmlValidateDocument;
pub use crate::src::python::libxml2_py::libxml_xmlValidateDocumentFinal;
pub use crate::src::python::libxml2_py::libxml_xmlValidateDtd;
pub use crate::src::python::libxml2_py::libxml_xmlValidateDtdFinal;
pub use crate::src::python::libxml2_py::libxml_xmlValidateElement;
pub use crate::src::python::libxml2_py::libxml_xmlValidateNCName;
pub use crate::src::python::libxml2_py::libxml_xmlValidateNMToken;
pub use crate::src::python::libxml2_py::libxml_xmlValidateName;
pub use crate::src::python::libxml2_py::libxml_xmlValidateNameValue;
pub use crate::src::python::libxml2_py::libxml_xmlValidateNamesValue;
pub use crate::src::python::libxml2_py::libxml_xmlValidateNmtokenValue;
pub use crate::src::python::libxml2_py::libxml_xmlValidateNmtokensValue;
pub use crate::src::python::libxml2_py::libxml_xmlValidateNotationUse;
pub use crate::src::python::libxml2_py::libxml_xmlValidateOneAttribute;
pub use crate::src::python::libxml2_py::libxml_xmlValidateOneElement;
pub use crate::src::python::libxml2_py::libxml_xmlValidateOneNamespace;
pub use crate::src::python::libxml2_py::libxml_xmlValidatePopElement;
pub use crate::src::python::libxml2_py::libxml_xmlValidatePushCData;
pub use crate::src::python::libxml2_py::libxml_xmlValidatePushElement;
pub use crate::src::python::libxml2_py::libxml_xmlValidateQName;
pub use crate::src::python::libxml2_py::libxml_xmlValidateRoot;
pub use crate::src::python::libxml2_py::libxml_xmlXIncludeProcess;
pub use crate::src::python::libxml2_py::libxml_xmlXIncludeProcessFlags;
pub use crate::src::python::libxml2_py::libxml_xmlXIncludeProcessTree;
pub use crate::src::python::libxml2_py::libxml_xmlXIncludeProcessTreeFlags;
pub use crate::src::python::libxml2_py::libxml_xmlXPathAddValues;
pub use crate::src::python::libxml2_py::libxml_xmlXPathBooleanFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCastBooleanToNumber;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCastBooleanToString;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCastNodeToNumber;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCastNodeToString;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCastNumberToBoolean;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCastNumberToString;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCastStringToBoolean;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCastStringToNumber;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCeilingFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCmpNodes;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCompareValues;
pub use crate::src::python::libxml2_py::libxml_xmlXPathConcatFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathContainsFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathContextSetCache;
pub use crate::src::python::libxml2_py::libxml_xmlXPathCountFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathDivValues;
pub use crate::src::python::libxml2_py::libxml_xmlXPathEqualValues;
pub use crate::src::python::libxml2_py::libxml_xmlXPathErr;
pub use crate::src::python::libxml2_py::libxml_xmlXPathEval;
pub use crate::src::python::libxml2_py::libxml_xmlXPathEvalExpr;
pub use crate::src::python::libxml2_py::libxml_xmlXPathEvalExpression;
pub use crate::src::python::libxml2_py::libxml_xmlXPathFalseFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathFloorFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathFreeContext;
pub use crate::src::python::libxml2_py::libxml_xmlXPathFreeParserContext;
pub use crate::src::python::libxml2_py::libxml_xmlXPathGetContextDoc;
pub use crate::src::python::libxml2_py::libxml_xmlXPathGetContextNode;
pub use crate::src::python::libxml2_py::libxml_xmlXPathGetContextPosition;
pub use crate::src::python::libxml2_py::libxml_xmlXPathGetContextSize;
pub use crate::src::python::libxml2_py::libxml_xmlXPathGetFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathGetFunctionURI;
pub use crate::src::python::libxml2_py::libxml_xmlXPathIdFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathInit;
pub use crate::src::python::libxml2_py::libxml_xmlXPathIsInf;
pub use crate::src::python::libxml2_py::libxml_xmlXPathIsNaN;
pub use crate::src::python::libxml2_py::libxml_xmlXPathIsNodeType;
pub use crate::src::python::libxml2_py::libxml_xmlXPathLangFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathLastFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathLocalNameFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathModValues;
pub use crate::src::python::libxml2_py::libxml_xmlXPathMultValues;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNamespaceURIFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNewBoolean;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNewCString;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNewContext;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNewFloat;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNewNodeSet;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNewParserContext;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNewString;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNewValueTree;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextAncestor;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextAncestorOrSelf;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextAttribute;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextChild;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextDescendant;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextDescendantOrSelf;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextFollowing;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextFollowingSibling;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextNamespace;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextParent;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextPreceding;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextPrecedingSibling;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNextSelf;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNodeEval;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNodeSetFreeNs;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNormalizeFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNotEqualValues;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNotFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNsLookup;
pub use crate::src::python::libxml2_py::libxml_xmlXPathNumberFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathOrderDocElems;
pub use crate::src::python::libxml2_py::libxml_xmlXPathParseNCName;
pub use crate::src::python::libxml2_py::libxml_xmlXPathParseName;
pub use crate::src::python::libxml2_py::libxml_xmlXPathParserGetContext;
pub use crate::src::python::libxml2_py::libxml_xmlXPathPopBoolean;
pub use crate::src::python::libxml2_py::libxml_xmlXPathPopNumber;
pub use crate::src::python::libxml2_py::libxml_xmlXPathPopString;
pub use crate::src::python::libxml2_py::libxml_xmlXPathPositionFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathRegisterAllFunctions;
pub use crate::src::python::libxml2_py::libxml_xmlXPathRegisterNs;
pub use crate::src::python::libxml2_py::libxml_xmlXPathRegisteredFuncsCleanup;
pub use crate::src::python::libxml2_py::libxml_xmlXPathRegisteredNsCleanup;
pub use crate::src::python::libxml2_py::libxml_xmlXPathRegisteredVariablesCleanup;
pub use crate::src::python::libxml2_py::libxml_xmlXPathRoot;
pub use crate::src::python::libxml2_py::libxml_xmlXPathRoundFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathSetContextDoc;
pub use crate::src::python::libxml2_py::libxml_xmlXPathSetContextNode;
pub use crate::src::python::libxml2_py::libxml_xmlXPathStartsWithFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathStringEvalNumber;
pub use crate::src::python::libxml2_py::libxml_xmlXPathStringFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathStringLengthFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathSubValues;
pub use crate::src::python::libxml2_py::libxml_xmlXPathSubstringAfterFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathSubstringBeforeFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathSubstringFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathSumFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathTranslateFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathTrueFunction;
pub use crate::src::python::libxml2_py::libxml_xmlXPathValueFlipSign;
pub use crate::src::python::libxml2_py::libxml_xmlXPathVariableLookup;
pub use crate::src::python::libxml2_py::libxml_xmlXPathVariableLookupNS;
pub use crate::src::python::libxml2_py::libxml_xmlXPatherror;
pub use crate::src::python::libxml2_py::libxml_xmlXPtrEval;
pub use crate::src::python::libxml2_py::libxml_xmlXPtrNewContext;
pub use crate::src::python::types::libxml_charPtrConstWrap;
pub use crate::src::python::types::libxml_charPtrWrap;
pub use crate::src::python::types::libxml_constxmlCharPtrWrap;
pub use crate::src::python::types::libxml_intWrap;
pub use crate::src::python::types::libxml_longWrap;
pub use crate::src::python::types::libxml_xmlAttrPtrWrap;
pub use crate::src::python::types::libxml_xmlDocPtrWrap;
pub use crate::src::python::types::libxml_xmlNodePtrWrap;
pub use crate::src::python::types::libxml_xmlNsPtrWrap;
pub use crate::src::python::types::libxml_xmlOutputBufferPtrWrap;
pub use crate::src::python::types::libxml_xmlParserCtxtPtrWrap;
pub use crate::src::python::types::libxml_xmlParserInputBufferPtrWrap;
pub use crate::src::python::types::libxml_xmlTextReaderLocatorPtrWrap;
pub use crate::src::python::types::libxml_xmlXPathObjectPtrConvert;
pub use crate::src::python::types::libxml_xmlXPathObjectPtrWrap;
pub use crate::src::python::types::libxml_xmlXPathParserContextPtrWrap;
pub use crate::src::python::libxml2_py::_IO_codecvt;
pub use crate::src::python::libxml2_py::_IO_marker;
pub use crate::src::python::libxml2_py::_xmlHashTable;
pub use crate::src::python::libxml2_py::_xmlStartTag;
pub use crate::src::python::types::_IO_wide_data;
pub use crate::src::python::types::_xmlAutomata;
pub use crate::src::python::types::_xmlAutomataState;
pub use crate::src::python::types::_xmlDict;
pub use crate::src::python::types::_xmlRelaxNGValidCtxt;
pub use crate::src::python::types::_xmlSchemaValidCtxt;
pub use crate::src::python::types::_xmlTextReader;
pub use crate::src::python::types::_xmlValidState;
pub type __builtin_va_list = [crate::src::python::libxml::__va_list_tag; 1];
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __va_list_tag {
    pub gp_offset: u32,
    pub fp_offset: u32,
<<<<<<< HEAD
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
pub type size_t = u64;
pub type va_list = __builtin_va_list;
=======
    pub overflow_arg_area: * mut core::ffi::c_void,
    pub reg_save_area: * mut core::ffi::c_void,
}
impl __va_list_tag {
    pub const fn new() -> Self {
        __va_list_tag {
        gp_offset: 0,
        fp_offset: 0,
        overflow_arg_area: (0 as * mut core::ffi::c_void),
        reg_save_area: (0 as * mut core::ffi::c_void)
        }
    }
}

impl std::default::Default for __va_list_tag {
    fn default() -> Self { __va_list_tag::new() }
}

pub type size_t = u64;
pub type va_list = [crate::src::python::libxml::__va_list_tag; 1];
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type __off_t = i64;
pub type __off64_t = i64;
pub type __ssize_t = i64;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: i32,
<<<<<<< HEAD
    pub _IO_read_ptr: *mut i8,
    pub _IO_read_end: *mut i8,
    pub _IO_read_base: *mut i8,
    pub _IO_write_base: *mut i8,
    pub _IO_write_ptr: *mut i8,
    pub _IO_write_end: *mut i8,
    pub _IO_buf_base: *mut i8,
    pub _IO_buf_end: *mut i8,
    pub _IO_save_base: *mut i8,
    pub _IO_backup_base: *mut i8,
    pub _IO_save_end: *mut i8,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: i32,
    pub _flags2: i32,
    pub _old_offset: __off_t,
    pub _cur_column: u16,
    pub _vtable_offset: i8,
    pub _shortbuf: [i8; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: i32,
    pub _unused2: [i8; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
pub type ssize_t = __ssize_t;
pub type Py_ssize_t = ssize_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _typeobject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
    pub tp_name: *const i8,
    pub tp_basicsize: Py_ssize_t,
    pub tp_itemsize: Py_ssize_t,
    pub tp_dealloc: destructor,
    pub tp_print: printfunc,
    pub tp_getattr: getattrfunc,
    pub tp_setattr: setattrfunc,
    pub tp_compare: cmpfunc,
    pub tp_repr: reprfunc,
    pub tp_as_number: *mut PyNumberMethods,
    pub tp_as_sequence: *mut PySequenceMethods,
    pub tp_as_mapping: *mut PyMappingMethods,
    pub tp_hash: hashfunc,
    pub tp_call: ternaryfunc,
    pub tp_str: reprfunc,
    pub tp_getattro: getattrofunc,
    pub tp_setattro: setattrofunc,
    pub tp_as_buffer: *mut PyBufferProcs,
    pub tp_flags: i64,
    pub tp_doc: *const i8,
    pub tp_traverse: traverseproc,
    pub tp_clear: inquiry,
    pub tp_richcompare: richcmpfunc,
    pub tp_weaklistoffset: Py_ssize_t,
    pub tp_iter: getiterfunc,
    pub tp_iternext: iternextfunc,
    pub tp_methods: *mut PyMethodDef,
    pub tp_members: *mut PyMemberDef,
    pub tp_getset: *mut PyGetSetDef,
    pub tp_base: *mut _typeobject,
    pub tp_dict: *mut PyObject,
    pub tp_descr_get: descrgetfunc,
    pub tp_descr_set: descrsetfunc,
    pub tp_dictoffset: Py_ssize_t,
    pub tp_init: initproc,
    pub tp_alloc: allocfunc,
    pub tp_new: newfunc,
    pub tp_free: freefunc,
    pub tp_is_gc: inquiry,
    pub tp_bases: *mut PyObject,
    pub tp_mro: *mut PyObject,
    pub tp_cache: *mut PyObject,
    pub tp_subclasses: *mut PyObject,
    pub tp_weaklist: *mut PyObject,
    pub tp_del: destructor,
    pub tp_version_tag: u32,
}
pub type destructor = Option::<unsafe extern "C" fn(*mut PyObject) -> ()>;
pub type PyObject = _object;
pub type inquiry = Option::<unsafe extern "C" fn(*mut PyObject) -> i32>;
pub type freefunc = Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>;
pub type newfunc = Option::<
    unsafe extern "C" fn(*mut _typeobject, *mut PyObject, *mut PyObject) -> *mut PyObject,
>;
pub type allocfunc = Option::<
    unsafe extern "C" fn(*mut _typeobject, Py_ssize_t) -> *mut PyObject,
>;
pub type initproc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject, *mut PyObject) -> i32,
>;
pub type descrsetfunc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject, *mut PyObject) -> i32,
>;
pub type descrgetfunc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject, *mut PyObject) -> *mut PyObject,
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyGetSetDef {
    pub name: *mut i8,
    pub get: getter,
    pub set: setter,
    pub doc: *mut i8,
    pub closure: *mut libc::c_void,
}
pub type setter = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject, *mut libc::c_void) -> i32,
>;
pub type getter = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut libc::c_void) -> *mut PyObject,
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyMethodDef {
    pub ml_name: *const i8,
    pub ml_meth: PyCFunction,
    pub ml_flags: i32,
    pub ml_doc: *const i8,
}
pub type PyCFunction = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject) -> *mut PyObject,
>;
pub type iternextfunc = Option::<unsafe extern "C" fn(*mut PyObject) -> *mut PyObject>;
pub type getiterfunc = Option::<unsafe extern "C" fn(*mut PyObject) -> *mut PyObject>;
pub type richcmpfunc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject, i32) -> *mut PyObject,
>;
pub type traverseproc = Option::<
    unsafe extern "C" fn(*mut PyObject, visitproc, *mut libc::c_void) -> i32,
>;
pub type visitproc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut libc::c_void) -> i32,
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyBufferProcs {
    pub bf_getreadbuffer: readbufferproc,
    pub bf_getwritebuffer: writebufferproc,
    pub bf_getsegcount: segcountproc,
    pub bf_getcharbuffer: charbufferproc,
    pub bf_getbuffer: getbufferproc,
    pub bf_releasebuffer: releasebufferproc,
}
pub type releasebufferproc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut Py_buffer) -> (),
>;
pub type Py_buffer = bufferinfo;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bufferinfo {
    pub buf: *mut libc::c_void,
    pub obj: *mut PyObject,
    pub len: Py_ssize_t,
    pub itemsize: Py_ssize_t,
    pub readonly: i32,
    pub ndim: i32,
    pub format: *mut i8,
    pub shape: *mut Py_ssize_t,
    pub strides: *mut Py_ssize_t,
    pub suboffsets: *mut Py_ssize_t,
    pub smalltable: [Py_ssize_t; 2],
    pub internal: *mut libc::c_void,
}
pub type getbufferproc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut Py_buffer, i32) -> i32,
>;
pub type charbufferproc = Option::<
    unsafe extern "C" fn(*mut PyObject, Py_ssize_t, *mut *mut i8) -> Py_ssize_t,
>;
pub type segcountproc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut Py_ssize_t) -> Py_ssize_t,
>;
pub type writebufferproc = Option::<
    unsafe extern "C" fn(*mut PyObject, Py_ssize_t, *mut *mut libc::c_void) -> Py_ssize_t,
>;
pub type readbufferproc = Option::<
    unsafe extern "C" fn(*mut PyObject, Py_ssize_t, *mut *mut libc::c_void) -> Py_ssize_t,
>;
pub type setattrofunc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject, *mut PyObject) -> i32,
>;
pub type getattrofunc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject) -> *mut PyObject,
>;
pub type reprfunc = Option::<unsafe extern "C" fn(*mut PyObject) -> *mut PyObject>;
pub type ternaryfunc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject, *mut PyObject) -> *mut PyObject,
>;
pub type hashfunc = Option::<unsafe extern "C" fn(*mut PyObject) -> i64>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyMappingMethods {
    pub mp_length: lenfunc,
    pub mp_subscript: binaryfunc,
    pub mp_ass_subscript: objobjargproc,
}
pub type objobjargproc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject, *mut PyObject) -> i32,
>;
pub type binaryfunc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject) -> *mut PyObject,
>;
pub type lenfunc = Option::<unsafe extern "C" fn(*mut PyObject) -> Py_ssize_t>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PySequenceMethods {
    pub sq_length: lenfunc,
    pub sq_concat: binaryfunc,
    pub sq_repeat: ssizeargfunc,
    pub sq_item: ssizeargfunc,
    pub sq_slice: ssizessizeargfunc,
    pub sq_ass_item: ssizeobjargproc,
    pub sq_ass_slice: ssizessizeobjargproc,
    pub sq_contains: objobjproc,
    pub sq_inplace_concat: binaryfunc,
    pub sq_inplace_repeat: ssizeargfunc,
}
pub type ssizeargfunc = Option::<
    unsafe extern "C" fn(*mut PyObject, Py_ssize_t) -> *mut PyObject,
>;
pub type objobjproc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject) -> i32,
>;
pub type ssizessizeobjargproc = Option::<
    unsafe extern "C" fn(
        *mut PyObject,
        Py_ssize_t,
        Py_ssize_t,
        *mut PyObject,
    ) -> i32,
>;
pub type ssizeobjargproc = Option::<
    unsafe extern "C" fn(*mut PyObject, Py_ssize_t, *mut PyObject) -> i32,
>;
pub type ssizessizeargfunc = Option::<
    unsafe extern "C" fn(*mut PyObject, Py_ssize_t, Py_ssize_t) -> *mut PyObject,
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyNumberMethods {
    pub nb_add: binaryfunc,
    pub nb_subtract: binaryfunc,
    pub nb_multiply: binaryfunc,
    pub nb_divide: binaryfunc,
    pub nb_remainder: binaryfunc,
    pub nb_divmod: binaryfunc,
    pub nb_power: ternaryfunc,
    pub nb_negative: unaryfunc,
    pub nb_positive: unaryfunc,
    pub nb_absolute: unaryfunc,
    pub nb_nonzero: inquiry,
    pub nb_invert: unaryfunc,
    pub nb_lshift: binaryfunc,
    pub nb_rshift: binaryfunc,
    pub nb_and: binaryfunc,
    pub nb_xor: binaryfunc,
    pub nb_or: binaryfunc,
    pub nb_coerce: coercion,
    pub nb_int: unaryfunc,
    pub nb_long: unaryfunc,
    pub nb_float: unaryfunc,
    pub nb_oct: unaryfunc,
    pub nb_hex: unaryfunc,
    pub nb_inplace_add: binaryfunc,
    pub nb_inplace_subtract: binaryfunc,
    pub nb_inplace_multiply: binaryfunc,
    pub nb_inplace_divide: binaryfunc,
    pub nb_inplace_remainder: binaryfunc,
    pub nb_inplace_power: ternaryfunc,
    pub nb_inplace_lshift: binaryfunc,
    pub nb_inplace_rshift: binaryfunc,
    pub nb_inplace_and: binaryfunc,
    pub nb_inplace_xor: binaryfunc,
    pub nb_inplace_or: binaryfunc,
    pub nb_floor_divide: binaryfunc,
    pub nb_true_divide: binaryfunc,
    pub nb_inplace_floor_divide: binaryfunc,
    pub nb_inplace_true_divide: binaryfunc,
    pub nb_index: unaryfunc,
}
pub type unaryfunc = Option::<unsafe extern "C" fn(*mut PyObject) -> *mut PyObject>;
pub type coercion = Option::<
    unsafe extern "C" fn(*mut *mut PyObject, *mut *mut PyObject) -> i32,
>;
pub type cmpfunc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut PyObject) -> i32,
>;
pub type setattrfunc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut i8, *mut PyObject) -> i32,
>;
pub type getattrfunc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut i8) -> *mut PyObject,
>;
pub type printfunc = Option::<
    unsafe extern "C" fn(*mut PyObject, *mut FILE, i32) -> i32,
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyVarObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
}
pub type PyTypeObject = _typeobject;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyTupleObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
    pub ob_item: [*mut PyObject; 1],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyListObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
    pub ob_item: *mut *mut PyObject,
    pub allocated: Py_ssize_t,
}
pub type xmlFreeFunc = Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>;
pub type xmlMallocFunc = Option::<unsafe extern "C" fn(size_t) -> *mut libc::c_void>;
pub type xmlReallocFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, size_t) -> *mut libc::c_void,
>;
pub type xmlStrdupFunc = Option::<
    unsafe extern "C" fn(*const i8) -> *mut i8,
>;
=======
    pub _IO_read_ptr: * mut i8,
    pub _IO_read_end: * mut i8,
    pub _IO_read_base: * mut i8,
    pub _IO_write_base: * mut i8,
    pub _IO_write_ptr: * mut i8,
    pub _IO_write_end: * mut i8,
    pub _IO_buf_base: * mut i8,
    pub _IO_buf_end: * mut i8,
    pub _IO_save_base: * mut i8,
    pub _IO_backup_base: * mut i8,
    pub _IO_save_end: * mut i8,
    pub _markers: * mut crate::src::python::libxml2_py::_IO_marker,
    pub _chain: * mut crate::src::python::libxml::_IO_FILE,
    pub _fileno: i32,
    pub _flags2: i32,
    pub _old_offset: i64,
    pub _cur_column: u16,
    pub _vtable_offset: i8,
    pub _shortbuf: [i8; 1],
    pub _lock: * mut core::ffi::c_void,
    pub _offset: i64,
    pub _codecvt: * mut crate::src::python::libxml2_py::_IO_codecvt,
    pub _wide_data: * mut crate::src::python::types::_IO_wide_data,
    pub _freeres_list: * mut crate::src::python::libxml::_IO_FILE,
    pub _freeres_buf: * mut core::ffi::c_void,
    pub __pad5: u64,
    pub _mode: i32,
    pub _unused2: [i8; 20],
}
impl _IO_FILE {
    pub const fn new() -> Self {
        _IO_FILE {
        _flags: 0,
        _IO_read_ptr: (0 as * mut i8),
        _IO_read_end: (0 as * mut i8),
        _IO_read_base: (0 as * mut i8),
        _IO_write_base: (0 as * mut i8),
        _IO_write_ptr: (0 as * mut i8),
        _IO_write_end: (0 as * mut i8),
        _IO_buf_base: (0 as * mut i8),
        _IO_buf_end: (0 as * mut i8),
        _IO_save_base: (0 as * mut i8),
        _IO_backup_base: (0 as * mut i8),
        _IO_save_end: (0 as * mut i8),
        _markers: (0 as * mut crate::src::python::libxml2_py::_IO_marker),
        _chain: (0 as * mut crate::src::python::libxml::_IO_FILE),
        _fileno: 0,
        _flags2: 0,
        _old_offset: 0,
        _cur_column: 0,
        _vtable_offset: 0,
        _shortbuf: [0,],
        _lock: (0 as * mut core::ffi::c_void),
        _offset: 0,
        _codecvt: (0 as * mut crate::src::python::libxml2_py::_IO_codecvt),
        _wide_data: (0 as * mut crate::src::python::types::_IO_wide_data),
        _freeres_list: (0 as * mut crate::src::python::libxml::_IO_FILE),
        _freeres_buf: (0 as * mut core::ffi::c_void),
        __pad5: 0,
        _mode: 0,
        _unused2: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,]
        }
    }
}

impl std::default::Default for _IO_FILE {
    fn default() -> Self { _IO_FILE::new() }
}

pub type _IO_lock_t = ();
pub type FILE = crate::src::python::libxml::_IO_FILE;
pub type ssize_t = i64;
pub type Py_ssize_t = i64;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _object {
    pub ob_refcnt: i64,
    pub ob_type: * mut crate::src::python::libxml::_typeobject,
}
impl _object {
    pub const fn new() -> Self {
        _object {
        ob_refcnt: 0,
        ob_type: (0 as * mut crate::src::python::libxml::_typeobject)
        }
    }
}

impl std::default::Default for _object {
    fn default() -> Self { _object::new() }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct _typeobject {
    pub ob_refcnt: i64,
    pub ob_type: * mut crate::src::python::libxml::_typeobject,
    pub ob_size: i64,
    pub tp_name: * const i8,
    pub tp_basicsize: i64,
    pub tp_itemsize: i64,
    pub tp_dealloc: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> ()>,
    pub tp_print: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_IO_FILE,_: i32,) -> i32>,
    pub tp_getattr: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut i8,) -> * mut crate::src::python::libxml::_object>,
    pub tp_setattr: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut i8,_: * mut crate::src::python::libxml::_object,) -> i32>,
    pub tp_compare: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> i32>,
    pub tp_repr: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub tp_as_number: * mut crate::src::python::libxml::PyNumberMethods,
    pub tp_as_sequence: * mut crate::src::python::libxml::PySequenceMethods,
    pub tp_as_mapping: * mut crate::src::python::libxml::PyMappingMethods,
    pub tp_hash: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> i64>,
    pub tp_call: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub tp_str: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub tp_getattro: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub tp_setattro: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> i32>,
    pub tp_as_buffer: * mut crate::src::python::libxml::PyBufferProcs,
    pub tp_flags: i64,
    pub tp_doc: * const i8,
    pub tp_traverse: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut core::ffi::c_void,) -> i32>,_: * mut core::ffi::c_void,) -> i32>,
    pub tp_clear: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> i32>,
    pub tp_richcompare: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,_: i32,) -> * mut crate::src::python::libxml::_object>,
    pub tp_weaklistoffset: i64,
    pub tp_iter: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub tp_iternext: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub tp_methods: * mut crate::src::python::libxml::PyMethodDef,
    pub tp_members: * mut crate::src::python::libxml::PyMemberDef,
    pub tp_getset: * mut crate::src::python::libxml::PyGetSetDef,
    pub tp_base: * mut crate::src::python::libxml::_typeobject,
    pub tp_dict: * mut crate::src::python::libxml::_object,
    pub tp_descr_get: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub tp_descr_set: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> i32>,
    pub tp_dictoffset: i64,
    pub tp_init: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> i32>,
    pub tp_alloc: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_typeobject,_: i64,) -> * mut crate::src::python::libxml::_object>,
    pub tp_new: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_typeobject,_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub tp_free: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> ()>,
    pub tp_is_gc: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> i32>,
    pub tp_bases: * mut crate::src::python::libxml::_object,
    pub tp_mro: * mut crate::src::python::libxml::_object,
    pub tp_cache: * mut crate::src::python::libxml::_object,
    pub tp_subclasses: * mut crate::src::python::libxml::_object,
    pub tp_weaklist: * mut crate::src::python::libxml::_object,
    pub tp_del: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> ()>,
    pub tp_version_tag: u32,
}
impl _typeobject {
    pub const fn new() -> Self {
        _typeobject {
        ob_refcnt: 0,
        ob_type: (0 as * mut crate::src::python::libxml::_typeobject),
        ob_size: 0,
        tp_name: (0 as * const i8),
        tp_basicsize: 0,
        tp_itemsize: 0,
        tp_dealloc: None,
        tp_print: None,
        tp_getattr: None,
        tp_setattr: None,
        tp_compare: None,
        tp_repr: None,
        tp_as_number: (0 as * mut crate::src::python::libxml::PyNumberMethods),
        tp_as_sequence: (0 as * mut crate::src::python::libxml::PySequenceMethods),
        tp_as_mapping: (0 as * mut crate::src::python::libxml::PyMappingMethods),
        tp_hash: None,
        tp_call: None,
        tp_str: None,
        tp_getattro: None,
        tp_setattro: None,
        tp_as_buffer: (0 as * mut crate::src::python::libxml::PyBufferProcs),
        tp_flags: 0,
        tp_doc: (0 as * const i8),
        tp_traverse: None,
        tp_clear: None,
        tp_richcompare: None,
        tp_weaklistoffset: 0,
        tp_iter: None,
        tp_iternext: None,
        tp_methods: (0 as * mut crate::src::python::libxml::PyMethodDef),
        tp_members: (0 as * mut crate::src::python::libxml::PyMemberDef),
        tp_getset: (0 as * mut crate::src::python::libxml::PyGetSetDef),
        tp_base: (0 as * mut crate::src::python::libxml::_typeobject),
        tp_dict: (0 as * mut crate::src::python::libxml::_object),
        tp_descr_get: None,
        tp_descr_set: None,
        tp_dictoffset: 0,
        tp_init: None,
        tp_alloc: None,
        tp_new: None,
        tp_free: None,
        tp_is_gc: None,
        tp_bases: (0 as * mut crate::src::python::libxml::_object),
        tp_mro: (0 as * mut crate::src::python::libxml::_object),
        tp_cache: (0 as * mut crate::src::python::libxml::_object),
        tp_subclasses: (0 as * mut crate::src::python::libxml::_object),
        tp_weaklist: (0 as * mut crate::src::python::libxml::_object),
        tp_del: None,
        tp_version_tag: 0
        }
    }
}

impl std::default::Default for _typeobject {
    fn default() -> Self { _typeobject::new() }
}

pub type destructor<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,) -> ()>;
pub type PyObject = crate::src::python::libxml::_object;
pub type inquiry<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,) -> i32>;
pub type freefunc<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,) -> ()>;
pub type newfunc<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_typeobject>,_: Option<&'a2 mut crate::src::python::libxml::_object>,_: Option<&'a3 mut crate::src::python::libxml::_object>,) -> Option<&'a4 mut crate::src::python::libxml::_object>>;
pub type allocfunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_typeobject>,_: i64,) -> Option<&'a2 mut crate::src::python::libxml::_object>>;
pub type initproc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,_: Option<&'a3 mut crate::src::python::libxml::_object>,) -> i32>;
pub type descrsetfunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,_: Option<&'a3 mut crate::src::python::libxml::_object>,) -> i32>;
pub type descrgetfunc<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,_: Option<&'a3 mut crate::src::python::libxml::_object>,) -> Option<&'a4 mut crate::src::python::libxml::_object>>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyGetSetDef {
    pub name: * mut i8,
    pub get: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut core::ffi::c_void,) -> * mut crate::src::python::libxml::_object>,
    pub set: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,_: * mut core::ffi::c_void,) -> i32>,
    pub doc: * mut i8,
    pub closure: * mut core::ffi::c_void,
}
impl PyGetSetDef {
    pub const fn new() -> Self {
        PyGetSetDef {
        name: (0 as * mut i8),
        get: None,
        set: None,
        doc: (0 as * mut i8),
        closure: (0 as * mut core::ffi::c_void)
        }
    }
}

impl std::default::Default for PyGetSetDef {
    fn default() -> Self { PyGetSetDef::new() }
}

pub type setter<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,_: Option<&'a3 mut core::ffi::c_void>,) -> i32>;
pub type getter<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut core::ffi::c_void>,) -> Option<&'a3 mut crate::src::python::libxml::_object>>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyMethodDef {
    pub ml_name: * const i8,
    pub ml_meth: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub ml_flags: i32,
    pub ml_doc: * const i8,
}
impl PyMethodDef {
    pub const fn new() -> Self {
        PyMethodDef {
        ml_name: (0 as * const i8),
        ml_meth: None,
        ml_flags: 0,
        ml_doc: (0 as * const i8)
        }
    }
}

impl std::default::Default for PyMethodDef {
    fn default() -> Self { PyMethodDef::new() }
}

pub type PyCFunction<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,) -> Option<&'a3 mut crate::src::python::libxml::_object>>;
pub type iternextfunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,) -> Option<&'a2 mut crate::src::python::libxml::_object>>;
pub type getiterfunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,) -> Option<&'a2 mut crate::src::python::libxml::_object>>;
pub type richcmpfunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,_: i32,) -> Option<&'a3 mut crate::src::python::libxml::_object>>;
pub type traverseproc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut core::ffi::c_void,) -> i32>,_: Option<&'a2 mut core::ffi::c_void>,) -> i32>;
pub type visitproc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut core::ffi::c_void>,) -> i32>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyBufferProcs {
    pub bf_getreadbuffer: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: i64,_: * mut * mut core::ffi::c_void,) -> i64>,
    pub bf_getwritebuffer: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: i64,_: * mut * mut core::ffi::c_void,) -> i64>,
    pub bf_getsegcount: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut i64,) -> i64>,
    pub bf_getcharbuffer: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: i64,_: * mut * mut i8,) -> i64>,
    pub bf_getbuffer: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::bufferinfo,_: i32,) -> i32>,
    pub bf_releasebuffer: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::bufferinfo,) -> ()>,
}
impl PyBufferProcs {
    pub const fn new() -> Self {
        PyBufferProcs {
        bf_getreadbuffer: None,
        bf_getwritebuffer: None,
        bf_getsegcount: None,
        bf_getcharbuffer: None,
        bf_getbuffer: None,
        bf_releasebuffer: None
        }
    }
}

impl std::default::Default for PyBufferProcs {
    fn default() -> Self { PyBufferProcs::new() }
}

pub type releasebufferproc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::bufferinfo>,) -> ()>;
pub type Py_buffer = crate::src::python::libxml::bufferinfo;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bufferinfo {
    pub buf: * mut core::ffi::c_void,
    pub obj: * mut crate::src::python::libxml::_object,
    pub len: i64,
    pub itemsize: i64,
    pub readonly: i32,
    pub ndim: i32,
    pub format: * mut i8,
    pub shape: * mut i64,
    pub strides: * mut i64,
    pub suboffsets: * mut i64,
    pub smalltable: [i64; 2],
    pub internal: * mut core::ffi::c_void,
}
impl bufferinfo {
    pub const fn new() -> Self {
        bufferinfo {
        buf: (0 as * mut core::ffi::c_void),
        obj: (0 as * mut crate::src::python::libxml::_object),
        len: 0,
        itemsize: 0,
        readonly: 0,
        ndim: 0,
        format: (0 as * mut i8),
        shape: (0 as * mut i64),
        strides: (0 as * mut i64),
        suboffsets: (0 as * mut i64),
        smalltable: [0,0,],
        internal: (0 as * mut core::ffi::c_void)
        }
    }
}

impl std::default::Default for bufferinfo {
    fn default() -> Self { bufferinfo::new() }
}

pub type getbufferproc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::bufferinfo>,_: i32,) -> i32>;
pub type charbufferproc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: i64,_: Option<&'a2 mut Option<&'a3 mut i8>>,) -> i64>;
pub type segcountproc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut i64>,) -> i64>;
pub type writebufferproc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: i64,_: Option<&'a2 mut Option<&'a3 mut core::ffi::c_void>>,) -> i64>;
pub type readbufferproc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: i64,_: Option<&'a2 mut Option<&'a3 mut core::ffi::c_void>>,) -> i64>;
pub type setattrofunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,_: Option<&'a3 mut crate::src::python::libxml::_object>,) -> i32>;
pub type getattrofunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,) -> Option<&'a3 mut crate::src::python::libxml::_object>>;
pub type reprfunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,) -> Option<&'a2 mut crate::src::python::libxml::_object>>;
pub type ternaryfunc<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,_: Option<&'a3 mut crate::src::python::libxml::_object>,) -> Option<&'a4 mut crate::src::python::libxml::_object>>;
pub type hashfunc<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,) -> i64>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyMappingMethods {
    pub mp_length: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> i64>,
    pub mp_subscript: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub mp_ass_subscript: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> i32>,
}
impl PyMappingMethods {
    pub const fn new() -> Self {
        PyMappingMethods {
        mp_length: None,
        mp_subscript: None,
        mp_ass_subscript: None
        }
    }
}

impl std::default::Default for PyMappingMethods {
    fn default() -> Self { PyMappingMethods::new() }
}

pub type objobjargproc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,_: Option<&'a3 mut crate::src::python::libxml::_object>,) -> i32>;
pub type binaryfunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,) -> Option<&'a3 mut crate::src::python::libxml::_object>>;
pub type lenfunc<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,) -> i64>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PySequenceMethods {
    pub sq_length: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> i64>,
    pub sq_concat: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub sq_repeat: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: i64,) -> * mut crate::src::python::libxml::_object>,
    pub sq_item: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: i64,) -> * mut crate::src::python::libxml::_object>,
    pub sq_slice: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: i64,_: i64,) -> * mut crate::src::python::libxml::_object>,
    pub sq_ass_item: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: i64,_: * mut crate::src::python::libxml::_object,) -> i32>,
    pub sq_ass_slice: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: i64,_: i64,_: * mut crate::src::python::libxml::_object,) -> i32>,
    pub sq_contains: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> i32>,
    pub sq_inplace_concat: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub sq_inplace_repeat: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: i64,) -> * mut crate::src::python::libxml::_object>,
}
impl PySequenceMethods {
    pub const fn new() -> Self {
        PySequenceMethods {
        sq_length: None,
        sq_concat: None,
        sq_repeat: None,
        sq_item: None,
        sq_slice: None,
        sq_ass_item: None,
        sq_ass_slice: None,
        sq_contains: None,
        sq_inplace_concat: None,
        sq_inplace_repeat: None
        }
    }
}

impl std::default::Default for PySequenceMethods {
    fn default() -> Self { PySequenceMethods::new() }
}

pub type ssizeargfunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: i64,) -> Option<&'a2 mut crate::src::python::libxml::_object>>;
pub type objobjproc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,) -> i32>;
pub type ssizessizeobjargproc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: i64,_: i64,_: Option<&'a2 mut crate::src::python::libxml::_object>,) -> i32>;
pub type ssizeobjargproc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: i64,_: Option<&'a2 mut crate::src::python::libxml::_object>,) -> i32>;
pub type ssizessizeargfunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: i64,_: i64,) -> Option<&'a2 mut crate::src::python::libxml::_object>>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyNumberMethods {
    pub nb_add: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_subtract: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_multiply: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_divide: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_remainder: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_divmod: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_power: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_negative: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_positive: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_absolute: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_nonzero: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> i32>,
    pub nb_invert: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_lshift: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_rshift: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_and: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_xor: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_or: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_coerce: Option<unsafe extern "C"  fn(_: * mut * mut crate::src::python::libxml::_object,_: * mut * mut crate::src::python::libxml::_object,) -> i32>,
    pub nb_int: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_long: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_float: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_oct: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_hex: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_add: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_subtract: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_multiply: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_divide: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_remainder: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_power: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_lshift: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_rshift: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_and: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_xor: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_or: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_floor_divide: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_true_divide: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_floor_divide: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_inplace_true_divide: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
    pub nb_index: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_object,) -> * mut crate::src::python::libxml::_object>,
}
impl PyNumberMethods {
    pub const fn new() -> Self {
        PyNumberMethods {
        nb_add: None,
        nb_subtract: None,
        nb_multiply: None,
        nb_divide: None,
        nb_remainder: None,
        nb_divmod: None,
        nb_power: None,
        nb_negative: None,
        nb_positive: None,
        nb_absolute: None,
        nb_nonzero: None,
        nb_invert: None,
        nb_lshift: None,
        nb_rshift: None,
        nb_and: None,
        nb_xor: None,
        nb_or: None,
        nb_coerce: None,
        nb_int: None,
        nb_long: None,
        nb_float: None,
        nb_oct: None,
        nb_hex: None,
        nb_inplace_add: None,
        nb_inplace_subtract: None,
        nb_inplace_multiply: None,
        nb_inplace_divide: None,
        nb_inplace_remainder: None,
        nb_inplace_power: None,
        nb_inplace_lshift: None,
        nb_inplace_rshift: None,
        nb_inplace_and: None,
        nb_inplace_xor: None,
        nb_inplace_or: None,
        nb_floor_divide: None,
        nb_true_divide: None,
        nb_inplace_floor_divide: None,
        nb_inplace_true_divide: None,
        nb_index: None
        }
    }
}

impl std::default::Default for PyNumberMethods {
    fn default() -> Self { PyNumberMethods::new() }
}

pub type unaryfunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,) -> Option<&'a2 mut crate::src::python::libxml::_object>>;
pub type coercion<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut Option<&'a2 mut crate::src::python::libxml::_object>>,_: Option<&'a3 mut Option<&'a4 mut crate::src::python::libxml::_object>>,) -> i32>;
pub type cmpfunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_object>,) -> i32>;
pub type setattrfunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut i8>,_: Option<&'a3 mut crate::src::python::libxml::_object>,) -> i32>;
pub type getattrfunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut i8>,) -> Option<&'a3 mut crate::src::python::libxml::_object>>;
pub type printfunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_object>,_: Option<&'a2 mut crate::src::python::libxml::_IO_FILE>,_: i32,) -> i32>;
// #[derive(Copy, Clone)]
#[repr(C)]
pub struct PyVarObject<'a> {
    pub ob_refcnt: i64,
    pub ob_type: Option<&'a mut crate::src::python::libxml::_typeobject>,
    pub ob_size: i64,
}
impl<'a> PyVarObject<'a> {
    pub const fn new() -> Self {
        PyVarObject {
        ob_refcnt: 0,
        ob_type: None,
        ob_size: 0
        }
    }
}

impl<'a> std::default::Default for PyVarObject<'a> {
    fn default() -> Self { PyVarObject::new() }
}

pub type PyTypeObject = crate::src::python::libxml::_typeobject;
// #[derive(Copy, Clone)]
#[repr(C)]
pub struct PyTupleObject<'a> {
    pub ob_refcnt: i64,
    pub ob_type: Option<&'a mut crate::src::python::libxml::_typeobject>,
    pub ob_size: i64,
    pub ob_item: Option<crate::__laertes_array::CustomSlice<'static, * mut crate::src::python::libxml::_object, [* mut crate::src::python::libxml::_object; 1]>>,
}
impl<'a> PyTupleObject<'a> {
    pub const fn new() -> Self {
        PyTupleObject {
        ob_refcnt: 0,
        ob_type: None,
        ob_size: 0,
        ob_item: None
        }
    }
}

impl<'a> std::default::Default for PyTupleObject<'a> {
    fn default() -> Self { PyTupleObject::new() }
}

// #[derive(Copy, Clone)]
#[repr(C)]
pub struct PyListObject<'a> {
    pub ob_refcnt: i64,
    pub ob_type: Option<&'a mut crate::src::python::libxml::_typeobject>,
    pub ob_size: i64,
    pub ob_item: Option<crate::__laertes_array::CustomSlice<'a, * mut crate::src::python::libxml::_object, &'a mut  [* mut crate::src::python::libxml::_object]>>,
    pub allocated: i64,
}
impl<'a> PyListObject<'a> {
    pub const fn new() -> Self {
        PyListObject {
        ob_refcnt: 0,
        ob_type: None,
        ob_size: 0,
        ob_item: None,
        allocated: 0
        }
    }
}

impl<'a> std::default::Default for PyListObject<'a> {
    fn default() -> Self { PyListObject::new() }
}

pub type xmlFreeFunc<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,) -> ()>;
pub type xmlMallocFunc<'a1> = Option<unsafe extern "C"  fn(_: u64,) -> Option<&'a1 mut core::ffi::c_void>>;
pub type xmlReallocFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: u64,) -> Option<&'a2 mut core::ffi::c_void>>;
pub type xmlStrdupFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 i8>,) -> Option<&'a2 mut i8>>;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type xmlChar = u8;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserInputBuffer {
<<<<<<< HEAD
    pub context: *mut libc::c_void,
    pub readcallback: xmlInputReadCallback,
    pub closecallback: xmlInputCloseCallback,
    pub encoder: xmlCharEncodingHandlerPtr,
    pub buffer: xmlBufPtr,
    pub raw: xmlBufPtr,
=======
    pub context: * mut core::ffi::c_void,
    pub readcallback: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * mut i8,_: i32,) -> i32>,
    pub closecallback: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> i32>,
    pub encoder: * mut crate::src::python::libxml::_xmlCharEncodingHandler,
    pub buffer: * mut crate::src::python::libxml::_xmlBuf,
    pub raw: * mut crate::src::python::libxml::_xmlBuf,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pub compressed: i32,
    pub error: i32,
    pub rawconsumed: u64,
}
<<<<<<< HEAD
pub type xmlBufPtr = *mut xmlBuf;
pub type xmlBuf = _xmlBuf;
pub type xmlCharEncodingHandlerPtr = *mut xmlCharEncodingHandler;
pub type xmlCharEncodingHandler = _xmlCharEncodingHandler;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlCharEncodingHandler {
    pub name: *mut i8,
    pub input: xmlCharEncodingInputFunc,
    pub output: xmlCharEncodingOutputFunc,
    pub iconv_in: iconv_t,
    pub iconv_out: iconv_t,
}
pub type iconv_t = *mut libc::c_void;
pub type xmlCharEncodingOutputFunc = Option::<
    unsafe extern "C" fn(
        *mut u8,
        *mut i32,
        *const u8,
        *mut i32,
    ) -> i32,
>;
pub type xmlCharEncodingInputFunc = Option::<
    unsafe extern "C" fn(
        *mut u8,
        *mut i32,
        *const u8,
        *mut i32,
    ) -> i32,
>;
pub type xmlInputCloseCallback = Option::<
    unsafe extern "C" fn(*mut libc::c_void) -> i32,
>;
pub type xmlInputReadCallback = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *mut i8,
        i32,
    ) -> i32,
>;
pub type xmlParserInputBuffer = _xmlParserInputBuffer;
pub type xmlParserInputBufferPtr = *mut xmlParserInputBuffer;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlOutputBuffer {
    pub context: *mut libc::c_void,
    pub writecallback: xmlOutputWriteCallback,
    pub closecallback: xmlOutputCloseCallback,
    pub encoder: xmlCharEncodingHandlerPtr,
    pub buffer: xmlBufPtr,
    pub conv: xmlBufPtr,
    pub written: i32,
    pub error: i32,
}
pub type xmlOutputCloseCallback = Option::<
    unsafe extern "C" fn(*mut libc::c_void) -> i32,
>;
pub type xmlOutputWriteCallback = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const i8,
        i32,
    ) -> i32,
>;
pub type xmlOutputBuffer = _xmlOutputBuffer;
pub type xmlOutputBufferPtr = *mut xmlOutputBuffer;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserInput {
    pub buf: xmlParserInputBufferPtr,
    pub filename: *const i8,
    pub directory: *const i8,
    pub base: *const xmlChar,
    pub cur: *const xmlChar,
    pub end: *const xmlChar,
=======
impl _xmlParserInputBuffer {
    pub const fn new() -> Self {
        _xmlParserInputBuffer {
        context: (0 as * mut core::ffi::c_void),
        readcallback: None,
        closecallback: None,
        encoder: (0 as * mut crate::src::python::libxml::_xmlCharEncodingHandler),
        buffer: (0 as * mut crate::src::python::libxml::_xmlBuf),
        raw: (0 as * mut crate::src::python::libxml::_xmlBuf),
        compressed: 0,
        error: 0,
        rawconsumed: 0
        }
    }
}

impl std::default::Default for _xmlParserInputBuffer {
    fn default() -> Self { _xmlParserInputBuffer::new() }
}

pub type xmlBufPtr = * mut crate::src::python::libxml::_xmlBuf;
pub type xmlBuf = crate::src::python::libxml::_xmlBuf;
pub type xmlCharEncodingHandlerPtr = * mut crate::src::python::libxml::_xmlCharEncodingHandler;
pub type xmlCharEncodingHandler = crate::src::python::libxml::_xmlCharEncodingHandler;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlCharEncodingHandler {
    pub name: * mut i8,
    pub input: Option<unsafe extern "C"  fn(_: * mut u8,_: * mut i32,_: * const u8,_: * mut i32,) -> i32>,
    pub output: Option<unsafe extern "C"  fn(_: * mut u8,_: * mut i32,_: * const u8,_: * mut i32,) -> i32>,
    pub iconv_in: * mut core::ffi::c_void,
    pub iconv_out: * mut core::ffi::c_void,
}
impl _xmlCharEncodingHandler {
    pub const fn new() -> Self {
        _xmlCharEncodingHandler {
        name: (0 as * mut i8),
        input: None,
        output: None,
        iconv_in: (0 as * mut core::ffi::c_void),
        iconv_out: (0 as * mut core::ffi::c_void)
        }
    }
}

impl std::default::Default for _xmlCharEncodingHandler {
    fn default() -> Self { _xmlCharEncodingHandler::new() }
}

pub type iconv_t = * mut core::ffi::c_void;
pub type xmlCharEncodingOutputFunc<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut u8>,_: Option<&'a2 mut i32>,_: Option<&'a3 u8>,_: Option<&'a4 mut i32>,) -> i32>;
pub type xmlCharEncodingInputFunc<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut u8>,_: Option<&'a2 mut i32>,_: Option<&'a3 u8>,_: Option<&'a4 mut i32>,) -> i32>;
pub type xmlInputCloseCallback<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,) -> i32>;
pub type xmlInputReadCallback<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 mut i8>,_: i32,) -> i32>;
pub type xmlParserInputBuffer = crate::src::python::libxml::_xmlParserInputBuffer;
pub type xmlParserInputBufferPtr = * mut crate::src::python::libxml::_xmlParserInputBuffer;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlOutputBuffer {
    pub context: * mut core::ffi::c_void,
    pub writecallback: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: i32,) -> i32>,
    pub closecallback: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> i32>,
    pub encoder: * mut crate::src::python::libxml::_xmlCharEncodingHandler,
    pub buffer: * mut crate::src::python::libxml::_xmlBuf,
    pub conv: * mut crate::src::python::libxml::_xmlBuf,
    pub written: i32,
    pub error: i32,
}
impl _xmlOutputBuffer {
    pub const fn new() -> Self {
        _xmlOutputBuffer {
        context: (0 as * mut core::ffi::c_void),
        writecallback: None,
        closecallback: None,
        encoder: (0 as * mut crate::src::python::libxml::_xmlCharEncodingHandler),
        buffer: (0 as * mut crate::src::python::libxml::_xmlBuf),
        conv: (0 as * mut crate::src::python::libxml::_xmlBuf),
        written: 0,
        error: 0
        }
    }
}

impl std::default::Default for _xmlOutputBuffer {
    fn default() -> Self { _xmlOutputBuffer::new() }
}

pub type xmlOutputCloseCallback<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,) -> i32>;
pub type xmlOutputWriteCallback<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,_: i32,) -> i32>;
pub type xmlOutputBuffer = crate::src::python::libxml::_xmlOutputBuffer;
pub type xmlOutputBufferPtr = * mut crate::src::python::libxml::_xmlOutputBuffer;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserInput {
    pub buf: * mut crate::src::python::libxml::_xmlParserInputBuffer,
    pub filename: * const i8,
    pub directory: * const i8,
    pub base: * const u8,
    pub cur: * const u8,
    pub end: * const u8,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pub length: i32,
    pub line: i32,
    pub col: i32,
    pub consumed: u64,
<<<<<<< HEAD
    pub free: xmlParserInputDeallocate,
    pub encoding: *const xmlChar,
    pub version: *const xmlChar,
    pub standalone: i32,
    pub id: i32,
}
pub type xmlParserInputDeallocate = Option::<unsafe extern "C" fn(*mut xmlChar) -> ()>;
pub type xmlParserInput = _xmlParserInput;
pub type xmlParserInputPtr = *mut xmlParserInput;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserCtxt {
    pub sax: *mut _xmlSAXHandler,
    pub userData: *mut libc::c_void,
    pub myDoc: xmlDocPtr,
    pub wellFormed: i32,
    pub replaceEntities: i32,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub standalone: i32,
    pub html: i32,
    pub input: xmlParserInputPtr,
    pub inputNr: i32,
    pub inputMax: i32,
    pub inputTab: *mut xmlParserInputPtr,
    pub node: xmlNodePtr,
    pub nodeNr: i32,
    pub nodeMax: i32,
    pub nodeTab: *mut xmlNodePtr,
    pub record_info: i32,
    pub node_seq: xmlParserNodeInfoSeq,
=======
    pub free: Option<unsafe extern "C"  fn(_: * mut u8,) -> ()>,
    pub encoding: * const u8,
    pub version: * const u8,
    pub standalone: i32,
    pub id: i32,
}
impl _xmlParserInput {
    pub const fn new() -> Self {
        _xmlParserInput {
        buf: (0 as * mut crate::src::python::libxml::_xmlParserInputBuffer),
        filename: (0 as * const i8),
        directory: (0 as * const i8),
        base: (0 as * const u8),
        cur: (0 as * const u8),
        end: (0 as * const u8),
        length: 0,
        line: 0,
        col: 0,
        consumed: 0,
        free: None,
        encoding: (0 as * const u8),
        version: (0 as * const u8),
        standalone: 0,
        id: 0
        }
    }
}

impl std::default::Default for _xmlParserInput {
    fn default() -> Self { _xmlParserInput::new() }
}

pub type xmlParserInputDeallocate<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut u8>,) -> ()>;
pub type xmlParserInput = crate::src::python::libxml::_xmlParserInput;
pub type xmlParserInputPtr = * mut crate::src::python::libxml::_xmlParserInput;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserCtxt {
    pub sax: * mut crate::src::python::libxml::_xmlSAXHandler,
    pub userData: * mut core::ffi::c_void,
    pub myDoc: * mut crate::src::python::libxml::_xmlDoc,
    pub wellFormed: i32,
    pub replaceEntities: i32,
    pub version: * const u8,
    pub encoding: * const u8,
    pub standalone: i32,
    pub html: i32,
    pub input: * mut crate::src::python::libxml::_xmlParserInput,
    pub inputNr: i32,
    pub inputMax: i32,
    pub inputTab: * mut * mut crate::src::python::libxml::_xmlParserInput,
    pub node: * mut crate::src::python::libxml::_xmlNode,
    pub nodeNr: i32,
    pub nodeMax: i32,
    pub nodeTab: * mut * mut crate::src::python::libxml::_xmlNode,
    pub record_info: i32,
    pub node_seq: crate::src::python::libxml::_xmlParserNodeInfoSeq,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pub errNo: i32,
    pub hasExternalSubset: i32,
    pub hasPErefs: i32,
    pub external: i32,
    pub valid: i32,
    pub validate: i32,
<<<<<<< HEAD
    pub vctxt: xmlValidCtxt,
    pub instate: xmlParserInputState,
    pub token: i32,
    pub directory: *mut i8,
    pub name: *const xmlChar,
    pub nameNr: i32,
    pub nameMax: i32,
    pub nameTab: *mut *const xmlChar,
=======
    pub vctxt: crate::src::python::libxml::_xmlValidCtxt,
    pub instate: i32,
    pub token: i32,
    pub directory: * mut i8,
    pub name: * const u8,
    pub nameNr: i32,
    pub nameMax: i32,
    pub nameTab: * mut * const u8,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pub nbChars: i64,
    pub checkIndex: i64,
    pub keepBlanks: i32,
    pub disableSAX: i32,
    pub inSubset: i32,
<<<<<<< HEAD
    pub intSubName: *const xmlChar,
    pub extSubURI: *mut xmlChar,
    pub extSubSystem: *mut xmlChar,
    pub space: *mut i32,
    pub spaceNr: i32,
    pub spaceMax: i32,
    pub spaceTab: *mut i32,
    pub depth: i32,
    pub entity: xmlParserInputPtr,
=======
    pub intSubName: * const u8,
    pub extSubURI: * mut u8,
    pub extSubSystem: * mut u8,
    pub space: * mut i32,
    pub spaceNr: i32,
    pub spaceMax: i32,
    pub spaceTab: * mut i32,
    pub depth: i32,
    pub entity: * mut crate::src::python::libxml::_xmlParserInput,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pub charset: i32,
    pub nodelen: i32,
    pub nodemem: i32,
    pub pedantic: i32,
<<<<<<< HEAD
    pub _private: *mut libc::c_void,
    pub loadsubset: i32,
    pub linenumbers: i32,
    pub catalogs: *mut libc::c_void,
    pub recovery: i32,
    pub progressive: i32,
    pub dict: xmlDictPtr,
    pub atts: *mut *const xmlChar,
    pub maxatts: i32,
    pub docdict: i32,
    pub str_xml: *const xmlChar,
    pub str_xmlns: *const xmlChar,
    pub str_xml_ns: *const xmlChar,
    pub sax2: i32,
    pub nsNr: i32,
    pub nsMax: i32,
    pub nsTab: *mut *const xmlChar,
    pub attallocs: *mut i32,
    pub pushTab: *mut xmlStartTag,
    pub attsDefault: xmlHashTablePtr,
    pub attsSpecial: xmlHashTablePtr,
=======
    pub _private: * mut core::ffi::c_void,
    pub loadsubset: i32,
    pub linenumbers: i32,
    pub catalogs: * mut core::ffi::c_void,
    pub recovery: i32,
    pub progressive: i32,
    pub dict: * mut crate::src::python::types::_xmlDict,
    pub atts: * mut * const u8,
    pub maxatts: i32,
    pub docdict: i32,
    pub str_xml: * const u8,
    pub str_xmlns: * const u8,
    pub str_xml_ns: * const u8,
    pub sax2: i32,
    pub nsNr: i32,
    pub nsMax: i32,
    pub nsTab: * mut * const u8,
    pub attallocs: * mut i32,
    pub pushTab: * mut crate::src::python::libxml2_py::_xmlStartTag,
    pub attsDefault: * mut crate::src::python::libxml2_py::_xmlHashTable,
    pub attsSpecial: * mut crate::src::python::libxml2_py::_xmlHashTable,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pub nsWellFormed: i32,
    pub options: i32,
    pub dictNames: i32,
    pub freeElemsNr: i32,
<<<<<<< HEAD
    pub freeElems: xmlNodePtr,
    pub freeAttrsNr: i32,
    pub freeAttrs: xmlAttrPtr,
    pub lastError: xmlError,
    pub parseMode: xmlParserMode,
    pub nbentities: u64,
    pub sizeentities: u64,
    pub nodeInfo: *mut xmlParserNodeInfo,
    pub nodeInfoNr: i32,
    pub nodeInfoMax: i32,
    pub nodeInfoTab: *mut xmlParserNodeInfo,
    pub input_id: i32,
    pub sizeentcopy: u64,
}
pub type xmlParserNodeInfo = _xmlParserNodeInfo;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserNodeInfo {
    pub node: *const _xmlNode,
=======
    pub freeElems: * mut crate::src::python::libxml::_xmlNode,
    pub freeAttrsNr: i32,
    pub freeAttrs: * mut crate::src::python::libxml::_xmlAttr,
    pub lastError: crate::src::python::libxml::_xmlError,
    pub parseMode: u32,
    pub nbentities: u64,
    pub sizeentities: u64,
    pub nodeInfo: * mut crate::src::python::libxml::_xmlParserNodeInfo,
    pub nodeInfoNr: i32,
    pub nodeInfoMax: i32,
    pub nodeInfoTab: * mut crate::src::python::libxml::_xmlParserNodeInfo,
    pub input_id: i32,
    pub sizeentcopy: u64,
}
impl _xmlParserCtxt {
    pub const fn new() -> Self {
        _xmlParserCtxt {
        sax: (0 as * mut crate::src::python::libxml::_xmlSAXHandler),
        userData: (0 as * mut core::ffi::c_void),
        myDoc: (0 as * mut crate::src::python::libxml::_xmlDoc),
        wellFormed: 0,
        replaceEntities: 0,
        version: (0 as * const u8),
        encoding: (0 as * const u8),
        standalone: 0,
        html: 0,
        input: (0 as * mut crate::src::python::libxml::_xmlParserInput),
        inputNr: 0,
        inputMax: 0,
        inputTab: (0 as * mut * mut crate::src::python::libxml::_xmlParserInput),
        node: (0 as * mut crate::src::python::libxml::_xmlNode),
        nodeNr: 0,
        nodeMax: 0,
        nodeTab: (0 as * mut * mut crate::src::python::libxml::_xmlNode),
        record_info: 0,
        node_seq: crate::src::python::libxml::_xmlParserNodeInfoSeq::new(),
        errNo: 0,
        hasExternalSubset: 0,
        hasPErefs: 0,
        external: 0,
        valid: 0,
        validate: 0,
        vctxt: crate::src::python::libxml::_xmlValidCtxt::new(),
        instate: 0,
        token: 0,
        directory: (0 as * mut i8),
        name: (0 as * const u8),
        nameNr: 0,
        nameMax: 0,
        nameTab: (0 as * mut * const u8),
        nbChars: 0,
        checkIndex: 0,
        keepBlanks: 0,
        disableSAX: 0,
        inSubset: 0,
        intSubName: (0 as * const u8),
        extSubURI: (0 as * mut u8),
        extSubSystem: (0 as * mut u8),
        space: (0 as * mut i32),
        spaceNr: 0,
        spaceMax: 0,
        spaceTab: (0 as * mut i32),
        depth: 0,
        entity: (0 as * mut crate::src::python::libxml::_xmlParserInput),
        charset: 0,
        nodelen: 0,
        nodemem: 0,
        pedantic: 0,
        _private: (0 as * mut core::ffi::c_void),
        loadsubset: 0,
        linenumbers: 0,
        catalogs: (0 as * mut core::ffi::c_void),
        recovery: 0,
        progressive: 0,
        dict: (0 as * mut crate::src::python::types::_xmlDict),
        atts: (0 as * mut * const u8),
        maxatts: 0,
        docdict: 0,
        str_xml: (0 as * const u8),
        str_xmlns: (0 as * const u8),
        str_xml_ns: (0 as * const u8),
        sax2: 0,
        nsNr: 0,
        nsMax: 0,
        nsTab: (0 as * mut * const u8),
        attallocs: (0 as * mut i32),
        pushTab: (0 as * mut crate::src::python::libxml2_py::_xmlStartTag),
        attsDefault: (0 as * mut crate::src::python::libxml2_py::_xmlHashTable),
        attsSpecial: (0 as * mut crate::src::python::libxml2_py::_xmlHashTable),
        nsWellFormed: 0,
        options: 0,
        dictNames: 0,
        freeElemsNr: 0,
        freeElems: (0 as * mut crate::src::python::libxml::_xmlNode),
        freeAttrsNr: 0,
        freeAttrs: (0 as * mut crate::src::python::libxml::_xmlAttr),
        lastError: crate::src::python::libxml::_xmlError::new(),
        parseMode: 0,
        nbentities: 0,
        sizeentities: 0,
        nodeInfo: (0 as * mut crate::src::python::libxml::_xmlParserNodeInfo),
        nodeInfoNr: 0,
        nodeInfoMax: 0,
        nodeInfoTab: (0 as * mut crate::src::python::libxml::_xmlParserNodeInfo),
        input_id: 0,
        sizeentcopy: 0
        }
    }
}

impl std::default::Default for _xmlParserCtxt {
    fn default() -> Self { _xmlParserCtxt::new() }
}

pub type xmlParserNodeInfo = crate::src::python::libxml::_xmlParserNodeInfo;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserNodeInfo {
    pub node: * const crate::src::python::libxml::_xmlNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pub begin_pos: u64,
    pub begin_line: u64,
    pub end_pos: u64,
    pub end_line: u64,
}
<<<<<<< HEAD
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNode {
    pub _private: *mut libc::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub content: *mut xmlChar,
    pub properties: *mut _xmlAttr,
    pub nsDef: *mut xmlNs,
    pub psvi: *mut libc::c_void,
    pub line: u16,
    pub extra: u16,
}
pub type xmlNs = _xmlNs;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNs {
    pub next: *mut _xmlNs,
    pub type_0: xmlNsType,
    pub href: *const xmlChar,
    pub prefix: *const xmlChar,
    pub _private: *mut libc::c_void,
    pub context: *mut _xmlDoc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDoc {
    pub _private: *mut libc::c_void,
    pub type_0: xmlElementType,
    pub name: *mut i8,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub compression: i32,
    pub standalone: i32,
    pub intSubset: *mut _xmlDtd,
    pub extSubset: *mut _xmlDtd,
    pub oldNs: *mut _xmlNs,
    pub version: *const xmlChar,
    pub encoding: *const xmlChar,
    pub ids: *mut libc::c_void,
    pub refs: *mut libc::c_void,
    pub URL: *const xmlChar,
    pub charset: i32,
    pub dict: *mut _xmlDict,
    pub psvi: *mut libc::c_void,
    pub parseFlags: i32,
    pub properties: i32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDtd {
    pub _private: *mut libc::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDoc,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub notations: *mut libc::c_void,
    pub elements: *mut libc::c_void,
    pub attributes: *mut libc::c_void,
    pub entities: *mut libc::c_void,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub pentities: *mut libc::c_void,
}
=======
impl _xmlParserNodeInfo {
    pub const fn new() -> Self {
        _xmlParserNodeInfo {
        node: (0 as * const crate::src::python::libxml::_xmlNode),
        begin_pos: 0,
        begin_line: 0,
        end_pos: 0,
        end_line: 0
        }
    }
}

impl std::default::Default for _xmlParserNodeInfo {
    fn default() -> Self { _xmlParserNodeInfo::new() }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNode {
    pub _private: * mut core::ffi::c_void,
    pub type_0: u32,
    pub name: * const u8,
    pub children: * mut crate::src::python::libxml::_xmlNode,
    pub last: * mut crate::src::python::libxml::_xmlNode,
    pub parent: * mut crate::src::python::libxml::_xmlNode,
    pub next: * mut crate::src::python::libxml::_xmlNode,
    pub prev: * mut crate::src::python::libxml::_xmlNode,
    pub doc: * mut crate::src::python::libxml::_xmlDoc,
    pub ns: * mut crate::src::python::libxml::_xmlNs,
    pub content: * mut u8,
    pub properties: * mut crate::src::python::libxml::_xmlAttr,
    pub nsDef: * mut crate::src::python::libxml::_xmlNs,
    pub psvi: * mut core::ffi::c_void,
    pub line: u16,
    pub extra: u16,
}
impl _xmlNode {
    pub const fn new() -> Self {
        _xmlNode {
        _private: (0 as * mut core::ffi::c_void),
        type_0: 0,
        name: (0 as * const u8),
        children: (0 as * mut crate::src::python::libxml::_xmlNode),
        last: (0 as * mut crate::src::python::libxml::_xmlNode),
        parent: (0 as * mut crate::src::python::libxml::_xmlNode),
        next: (0 as * mut crate::src::python::libxml::_xmlNode),
        prev: (0 as * mut crate::src::python::libxml::_xmlNode),
        doc: (0 as * mut crate::src::python::libxml::_xmlDoc),
        ns: (0 as * mut crate::src::python::libxml::_xmlNs),
        content: (0 as * mut u8),
        properties: (0 as * mut crate::src::python::libxml::_xmlAttr),
        nsDef: (0 as * mut crate::src::python::libxml::_xmlNs),
        psvi: (0 as * mut core::ffi::c_void),
        line: 0,
        extra: 0
        }
    }
}

impl std::default::Default for _xmlNode {
    fn default() -> Self { _xmlNode::new() }
}

pub type xmlNs = crate::src::python::libxml::_xmlNs;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNs {
    pub next: * mut crate::src::python::libxml::_xmlNs,
    pub type_0: u32,
    pub href: * const u8,
    pub prefix: * const u8,
    pub _private: * mut core::ffi::c_void,
    pub context: * mut crate::src::python::libxml::_xmlDoc,
}
impl _xmlNs {
    pub const fn new() -> Self {
        _xmlNs {
        next: (0 as * mut crate::src::python::libxml::_xmlNs),
        type_0: 0,
        href: (0 as * const u8),
        prefix: (0 as * const u8),
        _private: (0 as * mut core::ffi::c_void),
        context: (0 as * mut crate::src::python::libxml::_xmlDoc)
        }
    }
}

impl std::default::Default for _xmlNs {
    fn default() -> Self { _xmlNs::new() }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDoc {
    pub _private: * mut core::ffi::c_void,
    pub type_0: u32,
    pub name: * mut i8,
    pub children: * mut crate::src::python::libxml::_xmlNode,
    pub last: * mut crate::src::python::libxml::_xmlNode,
    pub parent: * mut crate::src::python::libxml::_xmlNode,
    pub next: * mut crate::src::python::libxml::_xmlNode,
    pub prev: * mut crate::src::python::libxml::_xmlNode,
    pub doc: * mut crate::src::python::libxml::_xmlDoc,
    pub compression: i32,
    pub standalone: i32,
    pub intSubset: * mut crate::src::python::libxml::_xmlDtd,
    pub extSubset: * mut crate::src::python::libxml::_xmlDtd,
    pub oldNs: * mut crate::src::python::libxml::_xmlNs,
    pub version: * const u8,
    pub encoding: * const u8,
    pub ids: * mut core::ffi::c_void,
    pub refs: * mut core::ffi::c_void,
    pub URL: * const u8,
    pub charset: i32,
    pub dict: * mut crate::src::python::types::_xmlDict,
    pub psvi: * mut core::ffi::c_void,
    pub parseFlags: i32,
    pub properties: i32,
}
impl _xmlDoc {
    pub const fn new() -> Self {
        _xmlDoc {
        _private: (0 as * mut core::ffi::c_void),
        type_0: 0,
        name: (0 as * mut i8),
        children: (0 as * mut crate::src::python::libxml::_xmlNode),
        last: (0 as * mut crate::src::python::libxml::_xmlNode),
        parent: (0 as * mut crate::src::python::libxml::_xmlNode),
        next: (0 as * mut crate::src::python::libxml::_xmlNode),
        prev: (0 as * mut crate::src::python::libxml::_xmlNode),
        doc: (0 as * mut crate::src::python::libxml::_xmlDoc),
        compression: 0,
        standalone: 0,
        intSubset: (0 as * mut crate::src::python::libxml::_xmlDtd),
        extSubset: (0 as * mut crate::src::python::libxml::_xmlDtd),
        oldNs: (0 as * mut crate::src::python::libxml::_xmlNs),
        version: (0 as * const u8),
        encoding: (0 as * const u8),
        ids: (0 as * mut core::ffi::c_void),
        refs: (0 as * mut core::ffi::c_void),
        URL: (0 as * const u8),
        charset: 0,
        dict: (0 as * mut crate::src::python::types::_xmlDict),
        psvi: (0 as * mut core::ffi::c_void),
        parseFlags: 0,
        properties: 0
        }
    }
}

impl std::default::Default for _xmlDoc {
    fn default() -> Self { _xmlDoc::new() }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlDtd {
    pub _private: * mut core::ffi::c_void,
    pub type_0: u32,
    pub name: * const u8,
    pub children: * mut crate::src::python::libxml::_xmlNode,
    pub last: * mut crate::src::python::libxml::_xmlNode,
    pub parent: * mut crate::src::python::libxml::_xmlDoc,
    pub next: * mut crate::src::python::libxml::_xmlNode,
    pub prev: * mut crate::src::python::libxml::_xmlNode,
    pub doc: * mut crate::src::python::libxml::_xmlDoc,
    pub notations: * mut core::ffi::c_void,
    pub elements: * mut core::ffi::c_void,
    pub attributes: * mut core::ffi::c_void,
    pub entities: * mut core::ffi::c_void,
    pub ExternalID: * const u8,
    pub SystemID: * const u8,
    pub pentities: * mut core::ffi::c_void,
}
impl _xmlDtd {
    pub const fn new() -> Self {
        _xmlDtd {
        _private: (0 as * mut core::ffi::c_void),
        type_0: 0,
        name: (0 as * const u8),
        children: (0 as * mut crate::src::python::libxml::_xmlNode),
        last: (0 as * mut crate::src::python::libxml::_xmlNode),
        parent: (0 as * mut crate::src::python::libxml::_xmlDoc),
        next: (0 as * mut crate::src::python::libxml::_xmlNode),
        prev: (0 as * mut crate::src::python::libxml::_xmlNode),
        doc: (0 as * mut crate::src::python::libxml::_xmlDoc),
        notations: (0 as * mut core::ffi::c_void),
        elements: (0 as * mut core::ffi::c_void),
        attributes: (0 as * mut core::ffi::c_void),
        entities: (0 as * mut core::ffi::c_void),
        ExternalID: (0 as * const u8),
        SystemID: (0 as * const u8),
        pentities: (0 as * mut core::ffi::c_void)
        }
    }
}

impl std::default::Default for _xmlDtd {
    fn default() -> Self { _xmlDtd::new() }
}

>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type xmlElementType = u32;
pub const XML_XINCLUDE_END: xmlElementType = 20;
pub const XML_XINCLUDE_START: xmlElementType = 19;
pub const XML_NAMESPACE_DECL: xmlElementType = 18;
pub const XML_ENTITY_DECL: xmlElementType = 17;
pub const XML_ATTRIBUTE_DECL: xmlElementType = 16;
pub const XML_ELEMENT_DECL: xmlElementType = 15;
pub const XML_DTD_NODE: xmlElementType = 14;
pub const XML_HTML_DOCUMENT_NODE: xmlElementType = 13;
pub const XML_NOTATION_NODE: xmlElementType = 12;
pub const XML_DOCUMENT_FRAG_NODE: xmlElementType = 11;
pub const XML_DOCUMENT_TYPE_NODE: xmlElementType = 10;
pub const XML_DOCUMENT_NODE: xmlElementType = 9;
pub const XML_COMMENT_NODE: xmlElementType = 8;
pub const XML_PI_NODE: xmlElementType = 7;
pub const XML_ENTITY_NODE: xmlElementType = 6;
pub const XML_ENTITY_REF_NODE: xmlElementType = 5;
pub const XML_CDATA_SECTION_NODE: xmlElementType = 4;
pub const XML_TEXT_NODE: xmlElementType = 3;
pub const XML_ATTRIBUTE_NODE: xmlElementType = 2;
pub const XML_ELEMENT_NODE: xmlElementType = 1;
<<<<<<< HEAD
pub type xmlNsType = xmlElementType;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlAttr {
    pub _private: *mut libc::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlNode,
    pub next: *mut _xmlAttr,
    pub prev: *mut _xmlAttr,
    pub doc: *mut _xmlDoc,
    pub ns: *mut xmlNs,
    pub atype: xmlAttributeType,
    pub psvi: *mut libc::c_void,
}
=======
pub type xmlNsType = u32;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlAttr {
    pub _private: * mut core::ffi::c_void,
    pub type_0: u32,
    pub name: * const u8,
    pub children: * mut crate::src::python::libxml::_xmlNode,
    pub last: * mut crate::src::python::libxml::_xmlNode,
    pub parent: * mut crate::src::python::libxml::_xmlNode,
    pub next: * mut crate::src::python::libxml::_xmlAttr,
    pub prev: * mut crate::src::python::libxml::_xmlAttr,
    pub doc: * mut crate::src::python::libxml::_xmlDoc,
    pub ns: * mut crate::src::python::libxml::_xmlNs,
    pub atype: u32,
    pub psvi: * mut core::ffi::c_void,
}
impl _xmlAttr {
    pub const fn new() -> Self {
        _xmlAttr {
        _private: (0 as * mut core::ffi::c_void),
        type_0: 0,
        name: (0 as * const u8),
        children: (0 as * mut crate::src::python::libxml::_xmlNode),
        last: (0 as * mut crate::src::python::libxml::_xmlNode),
        parent: (0 as * mut crate::src::python::libxml::_xmlNode),
        next: (0 as * mut crate::src::python::libxml::_xmlAttr),
        prev: (0 as * mut crate::src::python::libxml::_xmlAttr),
        doc: (0 as * mut crate::src::python::libxml::_xmlDoc),
        ns: (0 as * mut crate::src::python::libxml::_xmlNs),
        atype: 0,
        psvi: (0 as * mut core::ffi::c_void)
        }
    }
}

impl std::default::Default for _xmlAttr {
    fn default() -> Self { _xmlAttr::new() }
}

>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type xmlAttributeType = u32;
pub const XML_ATTRIBUTE_NOTATION: xmlAttributeType = 10;
pub const XML_ATTRIBUTE_ENUMERATION: xmlAttributeType = 9;
pub const XML_ATTRIBUTE_NMTOKENS: xmlAttributeType = 8;
pub const XML_ATTRIBUTE_NMTOKEN: xmlAttributeType = 7;
pub const XML_ATTRIBUTE_ENTITIES: xmlAttributeType = 6;
pub const XML_ATTRIBUTE_ENTITY: xmlAttributeType = 5;
pub const XML_ATTRIBUTE_IDREFS: xmlAttributeType = 4;
pub const XML_ATTRIBUTE_IDREF: xmlAttributeType = 3;
pub const XML_ATTRIBUTE_ID: xmlAttributeType = 2;
pub const XML_ATTRIBUTE_CDATA: xmlAttributeType = 1;
pub type xmlParserMode = u32;
pub const XML_PARSE_READER: xmlParserMode = 5;
pub const XML_PARSE_PUSH_SAX: xmlParserMode = 4;
pub const XML_PARSE_PUSH_DOM: xmlParserMode = 3;
pub const XML_PARSE_SAX: xmlParserMode = 2;
pub const XML_PARSE_DOM: xmlParserMode = 1;
pub const XML_PARSE_UNKNOWN: xmlParserMode = 0;
<<<<<<< HEAD
pub type xmlError = _xmlError;
=======
pub type xmlError = crate::src::python::libxml::_xmlError;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlError {
    pub domain: i32,
    pub code: i32,
<<<<<<< HEAD
    pub message: *mut i8,
    pub level: xmlErrorLevel,
    pub file: *mut i8,
    pub line: i32,
    pub str1: *mut i8,
    pub str2: *mut i8,
    pub str3: *mut i8,
    pub int1: i32,
    pub int2: i32,
    pub ctxt: *mut libc::c_void,
    pub node: *mut libc::c_void,
}
=======
    pub message: * mut i8,
    pub level: u32,
    pub file: * mut i8,
    pub line: i32,
    pub str1: * mut i8,
    pub str2: * mut i8,
    pub str3: * mut i8,
    pub int1: i32,
    pub int2: i32,
    pub ctxt: * mut core::ffi::c_void,
    pub node: * mut core::ffi::c_void,
}
impl _xmlError {
    pub const fn new() -> Self {
        _xmlError {
        domain: 0,
        code: 0,
        message: (0 as * mut i8),
        level: 0,
        file: (0 as * mut i8),
        line: 0,
        str1: (0 as * mut i8),
        str2: (0 as * mut i8),
        str3: (0 as * mut i8),
        int1: 0,
        int2: 0,
        ctxt: (0 as * mut core::ffi::c_void),
        node: (0 as * mut core::ffi::c_void)
        }
    }
}

impl std::default::Default for _xmlError {
    fn default() -> Self { _xmlError::new() }
}

>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type xmlErrorLevel = u32;
pub const XML_ERR_FATAL: xmlErrorLevel = 3;
pub const XML_ERR_ERROR: xmlErrorLevel = 2;
pub const XML_ERR_WARNING: xmlErrorLevel = 1;
pub const XML_ERR_NONE: xmlErrorLevel = 0;
<<<<<<< HEAD
pub type xmlAttrPtr = *mut xmlAttr;
pub type xmlAttr = _xmlAttr;
pub type xmlNodePtr = *mut xmlNode;
pub type xmlNode = _xmlNode;
pub type xmlHashTablePtr = *mut xmlHashTable;
pub type xmlHashTable = _xmlHashTable;
pub type xmlStartTag = _xmlStartTag;
pub type xmlDictPtr = *mut xmlDict;
pub type xmlDict = _xmlDict;
=======
pub type xmlAttrPtr = * mut crate::src::python::libxml::_xmlAttr;
pub type xmlAttr = crate::src::python::libxml::_xmlAttr;
pub type xmlNodePtr = * mut crate::src::python::libxml::_xmlNode;
pub type xmlNode = crate::src::python::libxml::_xmlNode;
pub type xmlHashTablePtr = * mut crate::src::python::libxml2_py::_xmlHashTable;
pub type xmlHashTable = crate::src::python::libxml2_py::_xmlHashTable;
pub type xmlStartTag = crate::src::python::libxml2_py::_xmlStartTag;
pub type xmlDictPtr = * mut crate::src::python::types::_xmlDict;
pub type xmlDict = crate::src::python::types::_xmlDict;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type xmlParserInputState = i32;
pub const XML_PARSER_PUBLIC_LITERAL: xmlParserInputState = 16;
pub const XML_PARSER_IGNORE: xmlParserInputState = 15;
pub const XML_PARSER_EPILOG: xmlParserInputState = 14;
pub const XML_PARSER_SYSTEM_LITERAL: xmlParserInputState = 13;
pub const XML_PARSER_ATTRIBUTE_VALUE: xmlParserInputState = 12;
pub const XML_PARSER_ENTITY_VALUE: xmlParserInputState = 11;
pub const XML_PARSER_ENTITY_DECL: xmlParserInputState = 10;
pub const XML_PARSER_END_TAG: xmlParserInputState = 9;
pub const XML_PARSER_CDATA_SECTION: xmlParserInputState = 8;
pub const XML_PARSER_CONTENT: xmlParserInputState = 7;
pub const XML_PARSER_START_TAG: xmlParserInputState = 6;
pub const XML_PARSER_COMMENT: xmlParserInputState = 5;
pub const XML_PARSER_PROLOG: xmlParserInputState = 4;
pub const XML_PARSER_DTD: xmlParserInputState = 3;
pub const XML_PARSER_PI: xmlParserInputState = 2;
pub const XML_PARSER_MISC: xmlParserInputState = 1;
pub const XML_PARSER_START: xmlParserInputState = 0;
pub const XML_PARSER_EOF: xmlParserInputState = -1;
<<<<<<< HEAD
pub type xmlValidCtxt = _xmlValidCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlValidCtxt {
    pub userData: *mut libc::c_void,
    pub error: xmlValidityErrorFunc,
    pub warning: xmlValidityWarningFunc,
    pub node: xmlNodePtr,
    pub nodeNr: i32,
    pub nodeMax: i32,
    pub nodeTab: *mut xmlNodePtr,
    pub flags: u32,
    pub doc: xmlDocPtr,
    pub valid: i32,
    pub vstate: *mut xmlValidState,
    pub vstateNr: i32,
    pub vstateMax: i32,
    pub vstateTab: *mut xmlValidState,
    pub am: xmlAutomataPtr,
    pub state: xmlAutomataStatePtr,
}
pub type xmlAutomataStatePtr = *mut xmlAutomataState;
pub type xmlAutomataState = _xmlAutomataState;
pub type xmlAutomataPtr = *mut xmlAutomata;
pub type xmlAutomata = _xmlAutomata;
pub type xmlValidState = _xmlValidState;
pub type xmlDocPtr = *mut xmlDoc;
pub type xmlDoc = _xmlDoc;
pub type xmlValidityWarningFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
>;
pub type xmlValidityErrorFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
>;
pub type xmlParserNodeInfoSeq = _xmlParserNodeInfoSeq;
=======
pub type xmlValidCtxt = crate::src::python::libxml::_xmlValidCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlValidCtxt {
    pub userData: * mut core::ffi::c_void,
    pub error: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
    pub warning: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
    pub node: * mut crate::src::python::libxml::_xmlNode,
    pub nodeNr: i32,
    pub nodeMax: i32,
    pub nodeTab: * mut * mut crate::src::python::libxml::_xmlNode,
    pub flags: u32,
    pub doc: * mut crate::src::python::libxml::_xmlDoc,
    pub valid: i32,
    pub vstate: * mut crate::src::python::types::_xmlValidState,
    pub vstateNr: i32,
    pub vstateMax: i32,
    pub vstateTab: * mut crate::src::python::types::_xmlValidState,
    pub am: * mut crate::src::python::types::_xmlAutomata,
    pub state: * mut crate::src::python::types::_xmlAutomataState,
}
impl _xmlValidCtxt {
    pub const fn new() -> Self {
        _xmlValidCtxt {
        userData: (0 as * mut core::ffi::c_void),
        error: None,
        warning: None,
        node: (0 as * mut crate::src::python::libxml::_xmlNode),
        nodeNr: 0,
        nodeMax: 0,
        nodeTab: (0 as * mut * mut crate::src::python::libxml::_xmlNode),
        flags: 0,
        doc: (0 as * mut crate::src::python::libxml::_xmlDoc),
        valid: 0,
        vstate: (0 as * mut crate::src::python::types::_xmlValidState),
        vstateNr: 0,
        vstateMax: 0,
        vstateTab: (0 as * mut crate::src::python::types::_xmlValidState),
        am: (0 as * mut crate::src::python::types::_xmlAutomata),
        state: (0 as * mut crate::src::python::types::_xmlAutomataState)
        }
    }
}

impl std::default::Default for _xmlValidCtxt {
    fn default() -> Self { _xmlValidCtxt::new() }
}

pub type xmlAutomataStatePtr = * mut crate::src::python::types::_xmlAutomataState;
pub type xmlAutomataState = crate::src::python::types::_xmlAutomataState;
pub type xmlAutomataPtr = * mut crate::src::python::types::_xmlAutomata;
pub type xmlAutomata = crate::src::python::types::_xmlAutomata;
pub type xmlValidState = crate::src::python::types::_xmlValidState;
pub type xmlDocPtr = * mut crate::src::python::libxml::_xmlDoc;
pub type xmlDoc = crate::src::python::libxml::_xmlDoc;
pub type xmlValidityWarningFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,...) -> ()>;
pub type xmlValidityErrorFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,...) -> ()>;
pub type xmlParserNodeInfoSeq = crate::src::python::libxml::_xmlParserNodeInfoSeq;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlParserNodeInfoSeq {
    pub maximum: u64,
    pub length: u64,
<<<<<<< HEAD
    pub buffer: *mut xmlParserNodeInfo,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXHandler {
    pub internalSubset: internalSubsetSAXFunc,
    pub isStandalone: isStandaloneSAXFunc,
    pub hasInternalSubset: hasInternalSubsetSAXFunc,
    pub hasExternalSubset: hasExternalSubsetSAXFunc,
    pub resolveEntity: resolveEntitySAXFunc,
    pub getEntity: getEntitySAXFunc,
    pub entityDecl: entityDeclSAXFunc,
    pub notationDecl: notationDeclSAXFunc,
    pub attributeDecl: attributeDeclSAXFunc,
    pub elementDecl: elementDeclSAXFunc,
    pub unparsedEntityDecl: unparsedEntityDeclSAXFunc,
    pub setDocumentLocator: setDocumentLocatorSAXFunc,
    pub startDocument: startDocumentSAXFunc,
    pub endDocument: endDocumentSAXFunc,
    pub startElement: startElementSAXFunc,
    pub endElement: endElementSAXFunc,
    pub reference: referenceSAXFunc,
    pub characters: charactersSAXFunc,
    pub ignorableWhitespace: ignorableWhitespaceSAXFunc,
    pub processingInstruction: processingInstructionSAXFunc,
    pub comment: commentSAXFunc,
    pub warning: warningSAXFunc,
    pub error: errorSAXFunc,
    pub fatalError: fatalErrorSAXFunc,
    pub getParameterEntity: getParameterEntitySAXFunc,
    pub cdataBlock: cdataBlockSAXFunc,
    pub externalSubset: externalSubsetSAXFunc,
    pub initialized: u32,
    pub _private: *mut libc::c_void,
    pub startElementNs: startElementNsSAX2Func,
    pub endElementNs: endElementNsSAX2Func,
    pub serror: xmlStructuredErrorFunc,
}
pub type xmlStructuredErrorFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, xmlErrorPtr) -> (),
>;
pub type xmlErrorPtr = *mut xmlError;
pub type endElementNsSAX2Func = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        *const xmlChar,
        *const xmlChar,
    ) -> (),
>;
pub type startElementNsSAX2Func = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        *const xmlChar,
        *const xmlChar,
        i32,
        *mut *const xmlChar,
        i32,
        i32,
        *mut *const xmlChar,
    ) -> (),
>;
pub type externalSubsetSAXFunc = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        *const xmlChar,
        *const xmlChar,
    ) -> (),
>;
pub type cdataBlockSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const xmlChar, i32) -> (),
>;
pub type getParameterEntitySAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const xmlChar) -> xmlEntityPtr,
>;
pub type xmlEntityPtr = *mut xmlEntity;
pub type xmlEntity = _xmlEntity;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEntity {
    pub _private: *mut libc::c_void,
    pub type_0: xmlElementType,
    pub name: *const xmlChar,
    pub children: *mut _xmlNode,
    pub last: *mut _xmlNode,
    pub parent: *mut _xmlDtd,
    pub next: *mut _xmlNode,
    pub prev: *mut _xmlNode,
    pub doc: *mut _xmlDoc,
    pub orig: *mut xmlChar,
    pub content: *mut xmlChar,
    pub length: i32,
    pub etype: xmlEntityType,
    pub ExternalID: *const xmlChar,
    pub SystemID: *const xmlChar,
    pub nexte: *mut _xmlEntity,
    pub URI: *const xmlChar,
    pub owner: i32,
    pub checked: i32,
}
=======
    pub buffer: * mut crate::src::python::libxml::_xmlParserNodeInfo,
}
impl _xmlParserNodeInfoSeq {
    pub const fn new() -> Self {
        _xmlParserNodeInfoSeq {
        maximum: 0,
        length: 0,
        buffer: (0 as * mut crate::src::python::libxml::_xmlParserNodeInfo)
        }
    }
}

impl std::default::Default for _xmlParserNodeInfoSeq {
    fn default() -> Self { _xmlParserNodeInfoSeq::new() }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXHandler {
    pub internalSubset: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,_: * const u8,) -> ()>,
    pub isStandalone: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> i32>,
    pub hasInternalSubset: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> i32>,
    pub hasExternalSubset: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> i32>,
    pub resolveEntity: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,) -> * mut crate::src::python::libxml::_xmlParserInput>,
    pub getEntity: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,) -> * mut crate::src::python::libxml::_xmlEntity>,
    pub entityDecl: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: i32,_: * const u8,_: * const u8,_: * mut u8,) -> ()>,
    pub notationDecl: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,_: * const u8,) -> ()>,
    pub attributeDecl: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,_: i32,_: i32,_: * const u8,_: * mut crate::src::python::libxml::_xmlEnumeration,) -> ()>,
    pub elementDecl: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: i32,_: * mut crate::src::python::libxml::_xmlElementContent,) -> ()>,
    pub unparsedEntityDecl: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,_: * const u8,_: * const u8,) -> ()>,
    pub setDocumentLocator: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * mut crate::src::python::libxml::_xmlSAXLocator,) -> ()>,
    pub startDocument: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> ()>,
    pub endDocument: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> ()>,
    pub startElement: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * mut * const u8,) -> ()>,
    pub endElement: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,) -> ()>,
    pub reference: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,) -> ()>,
    pub characters: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: i32,) -> ()>,
    pub ignorableWhitespace: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: i32,) -> ()>,
    pub processingInstruction: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,) -> ()>,
    pub comment: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,) -> ()>,
    pub warning: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
    pub error: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
    pub fatalError: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,...) -> ()>,
    pub getParameterEntity: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,) -> * mut crate::src::python::libxml::_xmlEntity>,
    pub cdataBlock: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: i32,) -> ()>,
    pub externalSubset: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,_: * const u8,) -> ()>,
    pub initialized: u32,
    pub _private: * mut core::ffi::c_void,
    pub startElementNs: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,_: * const u8,_: i32,_: * mut * const u8,_: i32,_: i32,_: * mut * const u8,) -> ()>,
    pub endElementNs: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,_: * const u8,) -> ()>,
    pub serror: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * mut crate::src::python::libxml::_xmlError,) -> ()>,
}
impl _xmlSAXHandler {
    pub const fn new() -> Self {
        _xmlSAXHandler {
        internalSubset: None,
        isStandalone: None,
        hasInternalSubset: None,
        hasExternalSubset: None,
        resolveEntity: None,
        getEntity: None,
        entityDecl: None,
        notationDecl: None,
        attributeDecl: None,
        elementDecl: None,
        unparsedEntityDecl: None,
        setDocumentLocator: None,
        startDocument: None,
        endDocument: None,
        startElement: None,
        endElement: None,
        reference: None,
        characters: None,
        ignorableWhitespace: None,
        processingInstruction: None,
        comment: None,
        warning: None,
        error: None,
        fatalError: None,
        getParameterEntity: None,
        cdataBlock: None,
        externalSubset: None,
        initialized: 0,
        _private: (0 as * mut core::ffi::c_void),
        startElementNs: None,
        endElementNs: None,
        serror: None
        }
    }
}

impl std::default::Default for _xmlSAXHandler {
    fn default() -> Self { _xmlSAXHandler::new() }
}

pub type xmlStructuredErrorFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 mut crate::src::python::libxml::_xmlError>,) -> ()>;
pub type xmlErrorPtr = * mut crate::src::python::libxml::_xmlError;
pub type endElementNsSAX2Func<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 u8>,_: Option<&'a4 u8>,) -> ()>;
pub type startElementNsSAX2Func<'a1, 'a2, 'a3, 'a4, 'a5, 'a6, 'a7, 'a8> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 u8>,_: Option<&'a4 u8>,_: i32,_: Option<&'a5 mut Option<&'a6 u8>>,_: i32,_: i32,_: Option<&'a7 mut Option<&'a8 u8>>,) -> ()>;
pub type externalSubsetSAXFunc<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 u8>,_: Option<&'a4 u8>,) -> ()>;
pub type cdataBlockSAXFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: i32,) -> ()>;
pub type getParameterEntitySAXFunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,) -> Option<&'a3 mut crate::src::python::libxml::_xmlEntity>>;
pub type xmlEntityPtr = * mut crate::src::python::libxml::_xmlEntity;
pub type xmlEntity = crate::src::python::libxml::_xmlEntity;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEntity {
    pub _private: * mut core::ffi::c_void,
    pub type_0: u32,
    pub name: * const u8,
    pub children: * mut crate::src::python::libxml::_xmlNode,
    pub last: * mut crate::src::python::libxml::_xmlNode,
    pub parent: * mut crate::src::python::libxml::_xmlDtd,
    pub next: * mut crate::src::python::libxml::_xmlNode,
    pub prev: * mut crate::src::python::libxml::_xmlNode,
    pub doc: * mut crate::src::python::libxml::_xmlDoc,
    pub orig: * mut u8,
    pub content: * mut u8,
    pub length: i32,
    pub etype: u32,
    pub ExternalID: * const u8,
    pub SystemID: * const u8,
    pub nexte: * mut crate::src::python::libxml::_xmlEntity,
    pub URI: * const u8,
    pub owner: i32,
    pub checked: i32,
}
impl _xmlEntity {
    pub const fn new() -> Self {
        _xmlEntity {
        _private: (0 as * mut core::ffi::c_void),
        type_0: 0,
        name: (0 as * const u8),
        children: (0 as * mut crate::src::python::libxml::_xmlNode),
        last: (0 as * mut crate::src::python::libxml::_xmlNode),
        parent: (0 as * mut crate::src::python::libxml::_xmlDtd),
        next: (0 as * mut crate::src::python::libxml::_xmlNode),
        prev: (0 as * mut crate::src::python::libxml::_xmlNode),
        doc: (0 as * mut crate::src::python::libxml::_xmlDoc),
        orig: (0 as * mut u8),
        content: (0 as * mut u8),
        length: 0,
        etype: 0,
        ExternalID: (0 as * const u8),
        SystemID: (0 as * const u8),
        nexte: (0 as * mut crate::src::python::libxml::_xmlEntity),
        URI: (0 as * const u8),
        owner: 0,
        checked: 0
        }
    }
}

impl std::default::Default for _xmlEntity {
    fn default() -> Self { _xmlEntity::new() }
}

>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type xmlEntityType = u32;
pub const XML_INTERNAL_PREDEFINED_ENTITY: xmlEntityType = 6;
pub const XML_EXTERNAL_PARAMETER_ENTITY: xmlEntityType = 5;
pub const XML_INTERNAL_PARAMETER_ENTITY: xmlEntityType = 4;
pub const XML_EXTERNAL_GENERAL_UNPARSED_ENTITY: xmlEntityType = 3;
pub const XML_EXTERNAL_GENERAL_PARSED_ENTITY: xmlEntityType = 2;
pub const XML_INTERNAL_GENERAL_ENTITY: xmlEntityType = 1;
<<<<<<< HEAD
pub type fatalErrorSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
>;
pub type errorSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
>;
pub type warningSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
>;
pub type commentSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const xmlChar) -> (),
>;
pub type processingInstructionSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const xmlChar, *const xmlChar) -> (),
>;
pub type ignorableWhitespaceSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const xmlChar, i32) -> (),
>;
pub type charactersSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const xmlChar, i32) -> (),
>;
pub type referenceSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const xmlChar) -> (),
>;
pub type endElementSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const xmlChar) -> (),
>;
pub type startElementSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const xmlChar, *mut *const xmlChar) -> (),
>;
pub type endDocumentSAXFunc = Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>;
pub type startDocumentSAXFunc = Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>;
pub type setDocumentLocatorSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, xmlSAXLocatorPtr) -> (),
>;
pub type xmlSAXLocatorPtr = *mut xmlSAXLocator;
pub type xmlSAXLocator = _xmlSAXLocator;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXLocator {
    pub getPublicId: Option::<unsafe extern "C" fn(*mut libc::c_void) -> *const xmlChar>,
    pub getSystemId: Option::<unsafe extern "C" fn(*mut libc::c_void) -> *const xmlChar>,
    pub getLineNumber: Option::<unsafe extern "C" fn(*mut libc::c_void) -> i32>,
    pub getColumnNumber: Option::<
        unsafe extern "C" fn(*mut libc::c_void) -> i32,
    >,
}
pub type unparsedEntityDeclSAXFunc = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        *const xmlChar,
        *const xmlChar,
        *const xmlChar,
    ) -> (),
>;
pub type elementDeclSAXFunc = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        i32,
        xmlElementContentPtr,
    ) -> (),
>;
pub type xmlElementContentPtr = *mut xmlElementContent;
pub type xmlElementContent = _xmlElementContent;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlElementContent {
    pub type_0: xmlElementContentType,
    pub ocur: xmlElementContentOccur,
    pub name: *const xmlChar,
    pub c1: *mut _xmlElementContent,
    pub c2: *mut _xmlElementContent,
    pub parent: *mut _xmlElementContent,
    pub prefix: *const xmlChar,
}
=======
pub type fatalErrorSAXFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,...) -> ()>;
pub type errorSAXFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,...) -> ()>;
pub type warningSAXFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,...) -> ()>;
pub type commentSAXFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,) -> ()>;
pub type processingInstructionSAXFunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 u8>,) -> ()>;
pub type ignorableWhitespaceSAXFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: i32,) -> ()>;
pub type charactersSAXFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: i32,) -> ()>;
pub type referenceSAXFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,) -> ()>;
pub type endElementSAXFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,) -> ()>;
pub type startElementSAXFunc<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 mut Option<&'a4 u8>>,) -> ()>;
pub type endDocumentSAXFunc<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,) -> ()>;
pub type startDocumentSAXFunc<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,) -> ()>;
pub type setDocumentLocatorSAXFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 mut crate::src::python::libxml::_xmlSAXLocator>,) -> ()>;
pub type xmlSAXLocatorPtr = * mut crate::src::python::libxml::_xmlSAXLocator;
pub type xmlSAXLocator = crate::src::python::libxml::_xmlSAXLocator;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlSAXLocator {
    pub getPublicId: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> * const u8>,
    pub getSystemId: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> * const u8>,
    pub getLineNumber: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> i32>,
    pub getColumnNumber: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> i32>,
}
impl _xmlSAXLocator {
    pub const fn new() -> Self {
        _xmlSAXLocator {
        getPublicId: None,
        getSystemId: None,
        getLineNumber: None,
        getColumnNumber: None
        }
    }
}

impl std::default::Default for _xmlSAXLocator {
    fn default() -> Self { _xmlSAXLocator::new() }
}

pub type unparsedEntityDeclSAXFunc<'a1, 'a2, 'a3, 'a4, 'a5> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 u8>,_: Option<&'a4 u8>,_: Option<&'a5 u8>,) -> ()>;
pub type elementDeclSAXFunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: i32,_: Option<&'a3 mut crate::src::python::libxml::_xmlElementContent>,) -> ()>;
pub type xmlElementContentPtr = * mut crate::src::python::libxml::_xmlElementContent;
pub type xmlElementContent = crate::src::python::libxml::_xmlElementContent;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlElementContent {
    pub type_0: u32,
    pub ocur: u32,
    pub name: * const u8,
    pub c1: * mut crate::src::python::libxml::_xmlElementContent,
    pub c2: * mut crate::src::python::libxml::_xmlElementContent,
    pub parent: * mut crate::src::python::libxml::_xmlElementContent,
    pub prefix: * const u8,
}
impl _xmlElementContent {
    pub const fn new() -> Self {
        _xmlElementContent {
        type_0: 0,
        ocur: 0,
        name: (0 as * const u8),
        c1: (0 as * mut crate::src::python::libxml::_xmlElementContent),
        c2: (0 as * mut crate::src::python::libxml::_xmlElementContent),
        parent: (0 as * mut crate::src::python::libxml::_xmlElementContent),
        prefix: (0 as * const u8)
        }
    }
}

impl std::default::Default for _xmlElementContent {
    fn default() -> Self { _xmlElementContent::new() }
}

>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type xmlElementContentOccur = u32;
pub const XML_ELEMENT_CONTENT_PLUS: xmlElementContentOccur = 4;
pub const XML_ELEMENT_CONTENT_MULT: xmlElementContentOccur = 3;
pub const XML_ELEMENT_CONTENT_OPT: xmlElementContentOccur = 2;
pub const XML_ELEMENT_CONTENT_ONCE: xmlElementContentOccur = 1;
pub type xmlElementContentType = u32;
pub const XML_ELEMENT_CONTENT_OR: xmlElementContentType = 4;
pub const XML_ELEMENT_CONTENT_SEQ: xmlElementContentType = 3;
pub const XML_ELEMENT_CONTENT_ELEMENT: xmlElementContentType = 2;
pub const XML_ELEMENT_CONTENT_PCDATA: xmlElementContentType = 1;
<<<<<<< HEAD
pub type attributeDeclSAXFunc = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        *const xmlChar,
        i32,
        i32,
        *const xmlChar,
        xmlEnumerationPtr,
    ) -> (),
>;
pub type xmlEnumerationPtr = *mut xmlEnumeration;
pub type xmlEnumeration = _xmlEnumeration;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEnumeration {
    pub next: *mut _xmlEnumeration,
    pub name: *const xmlChar,
}
pub type notationDeclSAXFunc = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        *const xmlChar,
        *const xmlChar,
    ) -> (),
>;
pub type entityDeclSAXFunc = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        i32,
        *const xmlChar,
        *const xmlChar,
        *mut xmlChar,
    ) -> (),
>;
pub type getEntitySAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const xmlChar) -> xmlEntityPtr,
>;
pub type resolveEntitySAXFunc = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        *const xmlChar,
    ) -> xmlParserInputPtr,
>;
pub type hasExternalSubsetSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void) -> i32,
>;
pub type hasInternalSubsetSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void) -> i32,
>;
pub type isStandaloneSAXFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void) -> i32,
>;
pub type internalSubsetSAXFunc = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        *const xmlChar,
        *const xmlChar,
    ) -> (),
>;
pub type xmlParserCtxt = _xmlParserCtxt;
pub type xmlParserCtxtPtr = *mut xmlParserCtxt;
pub type xmlSAXHandler = _xmlSAXHandler;
pub type xmlSAXHandlerPtr = *mut xmlSAXHandler;
=======
pub type attributeDeclSAXFunc<'a1, 'a2, 'a3, 'a4, 'a5> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 u8>,_: i32,_: i32,_: Option<&'a4 u8>,_: Option<&'a5 mut crate::src::python::libxml::_xmlEnumeration>,) -> ()>;
pub type xmlEnumerationPtr = * mut crate::src::python::libxml::_xmlEnumeration;
pub type xmlEnumeration = crate::src::python::libxml::_xmlEnumeration;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlEnumeration {
    pub next: * mut crate::src::python::libxml::_xmlEnumeration,
    pub name: * const u8,
}
impl _xmlEnumeration {
    pub const fn new() -> Self {
        _xmlEnumeration {
        next: (0 as * mut crate::src::python::libxml::_xmlEnumeration),
        name: (0 as * const u8)
        }
    }
}

impl std::default::Default for _xmlEnumeration {
    fn default() -> Self { _xmlEnumeration::new() }
}

pub type notationDeclSAXFunc<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 u8>,_: Option<&'a4 u8>,) -> ()>;
pub type entityDeclSAXFunc<'a1, 'a2, 'a3, 'a4, 'a5> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: i32,_: Option<&'a3 u8>,_: Option<&'a4 u8>,_: Option<&'a5 mut u8>,) -> ()>;
pub type getEntitySAXFunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,) -> Option<&'a3 mut crate::src::python::libxml::_xmlEntity>>;
pub type resolveEntitySAXFunc<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 u8>,) -> Option<&'a4 mut crate::src::python::libxml::_xmlParserInput>>;
pub type hasExternalSubsetSAXFunc<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,) -> i32>;
pub type hasInternalSubsetSAXFunc<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,) -> i32>;
pub type isStandaloneSAXFunc<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,) -> i32>;
pub type internalSubsetSAXFunc<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 u8>,_: Option<&'a4 u8>,) -> ()>;
pub type xmlParserCtxt = crate::src::python::libxml::_xmlParserCtxt;
pub type xmlParserCtxtPtr = * mut crate::src::python::libxml::_xmlParserCtxt;
pub type xmlSAXHandler = crate::src::python::libxml::_xmlSAXHandler;
pub type xmlSAXHandlerPtr = * mut crate::src::python::libxml::_xmlSAXHandler;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type xmlBufferAllocationScheme = u32;
pub const XML_BUFFER_ALLOC_BOUNDED: xmlBufferAllocationScheme = 5;
pub const XML_BUFFER_ALLOC_HYBRID: xmlBufferAllocationScheme = 4;
pub const XML_BUFFER_ALLOC_IO: xmlBufferAllocationScheme = 3;
pub const XML_BUFFER_ALLOC_IMMUTABLE: xmlBufferAllocationScheme = 2;
pub const XML_BUFFER_ALLOC_EXACT: xmlBufferAllocationScheme = 1;
pub const XML_BUFFER_ALLOC_DOUBLEIT: xmlBufferAllocationScheme = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlBuffer {
<<<<<<< HEAD
    pub content: *mut xmlChar,
    pub use_0: u32,
    pub size: u32,
    pub alloc: xmlBufferAllocationScheme,
    pub contentIO: *mut xmlChar,
}
pub type xmlBuffer = _xmlBuffer;
pub type xmlBufferPtr = *mut xmlBuffer;
pub type xmlNsPtr = *mut xmlNs;
pub type xmlGenericErrorFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
>;
pub type xmlValidCtxtPtr = *mut xmlValidCtxt;
pub type xmlExternalEntityLoader = Option::<
    unsafe extern "C" fn(
        *const i8,
        *const i8,
        xmlParserCtxtPtr,
    ) -> xmlParserInputPtr,
>;
=======
    pub content: * mut u8,
    pub use_0: u32,
    pub size: u32,
    pub alloc: u32,
    pub contentIO: * mut u8,
}
impl _xmlBuffer {
    pub const fn new() -> Self {
        _xmlBuffer {
        content: (0 as * mut u8),
        use_0: 0,
        size: 0,
        alloc: 0,
        contentIO: (0 as * mut u8)
        }
    }
}

impl std::default::Default for _xmlBuffer {
    fn default() -> Self { _xmlBuffer::new() }
}

pub type xmlBuffer = crate::src::python::libxml::_xmlBuffer;
pub type xmlBufferPtr = * mut crate::src::python::libxml::_xmlBuffer;
pub type xmlNsPtr = * mut crate::src::python::libxml::_xmlNs;
pub type xmlGenericErrorFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,...) -> ()>;
pub type xmlValidCtxtPtr = * mut crate::src::python::libxml::_xmlValidCtxt;
pub type xmlExternalEntityLoader<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 i8>,_: Option<&'a2 i8>,_: Option<&'a3 mut crate::src::python::libxml::_xmlParserCtxt>,) -> Option<&'a4 mut crate::src::python::libxml::_xmlParserInput>>;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type xmlCharEncoding = i32;
pub const XML_CHAR_ENCODING_ASCII: xmlCharEncoding = 22;
pub const XML_CHAR_ENCODING_EUC_JP: xmlCharEncoding = 21;
pub const XML_CHAR_ENCODING_SHIFT_JIS: xmlCharEncoding = 20;
pub const XML_CHAR_ENCODING_2022_JP: xmlCharEncoding = 19;
pub const XML_CHAR_ENCODING_8859_9: xmlCharEncoding = 18;
pub const XML_CHAR_ENCODING_8859_8: xmlCharEncoding = 17;
pub const XML_CHAR_ENCODING_8859_7: xmlCharEncoding = 16;
pub const XML_CHAR_ENCODING_8859_6: xmlCharEncoding = 15;
pub const XML_CHAR_ENCODING_8859_5: xmlCharEncoding = 14;
pub const XML_CHAR_ENCODING_8859_4: xmlCharEncoding = 13;
pub const XML_CHAR_ENCODING_8859_3: xmlCharEncoding = 12;
pub const XML_CHAR_ENCODING_8859_2: xmlCharEncoding = 11;
pub const XML_CHAR_ENCODING_8859_1: xmlCharEncoding = 10;
pub const XML_CHAR_ENCODING_UCS2: xmlCharEncoding = 9;
pub const XML_CHAR_ENCODING_UCS4_3412: xmlCharEncoding = 8;
pub const XML_CHAR_ENCODING_UCS4_2143: xmlCharEncoding = 7;
pub const XML_CHAR_ENCODING_EBCDIC: xmlCharEncoding = 6;
pub const XML_CHAR_ENCODING_UCS4BE: xmlCharEncoding = 5;
pub const XML_CHAR_ENCODING_UCS4LE: xmlCharEncoding = 4;
pub const XML_CHAR_ENCODING_UTF16BE: xmlCharEncoding = 3;
pub const XML_CHAR_ENCODING_UTF16LE: xmlCharEncoding = 2;
pub const XML_CHAR_ENCODING_UTF8: xmlCharEncoding = 1;
pub const XML_CHAR_ENCODING_NONE: xmlCharEncoding = 0;
pub const XML_CHAR_ENCODING_ERROR: xmlCharEncoding = -1;
<<<<<<< HEAD
pub type xmlInputMatchCallback = Option::<
    unsafe extern "C" fn(*const i8) -> i32,
>;
pub type xmlInputOpenCallback = Option::<
    unsafe extern "C" fn(*const i8) -> *mut libc::c_void,
>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathContext {
    pub doc: xmlDocPtr,
    pub node: xmlNodePtr,
    pub nb_variables_unused: i32,
    pub max_variables_unused: i32,
    pub varHash: xmlHashTablePtr,
    pub nb_types: i32,
    pub max_types: i32,
    pub types: xmlXPathTypePtr,
    pub nb_funcs_unused: i32,
    pub max_funcs_unused: i32,
    pub funcHash: xmlHashTablePtr,
    pub nb_axis: i32,
    pub max_axis: i32,
    pub axis: xmlXPathAxisPtr,
    pub namespaces: *mut xmlNsPtr,
    pub nsNr: i32,
    pub user: *mut libc::c_void,
    pub contextSize: i32,
    pub proximityPosition: i32,
    pub xptr: i32,
    pub here: xmlNodePtr,
    pub origin: xmlNodePtr,
    pub nsHash: xmlHashTablePtr,
    pub varLookupFunc: xmlXPathVariableLookupFunc,
    pub varLookupData: *mut libc::c_void,
    pub extra: *mut libc::c_void,
    pub function: *const xmlChar,
    pub functionURI: *const xmlChar,
    pub funcLookupFunc: xmlXPathFuncLookupFunc,
    pub funcLookupData: *mut libc::c_void,
    pub tmpNsList: *mut xmlNsPtr,
    pub tmpNsNr: i32,
    pub userData: *mut libc::c_void,
    pub error: xmlStructuredErrorFunc,
    pub lastError: xmlError,
    pub debugNode: xmlNodePtr,
    pub dict: xmlDictPtr,
    pub flags: i32,
    pub cache: *mut libc::c_void,
=======
pub type xmlInputMatchCallback<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 i8>,) -> i32>;
pub type xmlInputOpenCallback<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 i8>,) -> Option<&'a2 mut core::ffi::c_void>>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathContext {
    pub doc: * mut crate::src::python::libxml::_xmlDoc,
    pub node: * mut crate::src::python::libxml::_xmlNode,
    pub nb_variables_unused: i32,
    pub max_variables_unused: i32,
    pub varHash: * mut crate::src::python::libxml2_py::_xmlHashTable,
    pub nb_types: i32,
    pub max_types: i32,
    pub types: * mut crate::src::python::libxml::_xmlXPathType,
    pub nb_funcs_unused: i32,
    pub max_funcs_unused: i32,
    pub funcHash: * mut crate::src::python::libxml2_py::_xmlHashTable,
    pub nb_axis: i32,
    pub max_axis: i32,
    pub axis: * mut crate::src::python::libxml::_xmlXPathAxis,
    pub namespaces: * mut * mut crate::src::python::libxml::_xmlNs,
    pub nsNr: i32,
    pub user: * mut core::ffi::c_void,
    pub contextSize: i32,
    pub proximityPosition: i32,
    pub xptr: i32,
    pub here: * mut crate::src::python::libxml::_xmlNode,
    pub origin: * mut crate::src::python::libxml::_xmlNode,
    pub nsHash: * mut crate::src::python::libxml2_py::_xmlHashTable,
    pub varLookupFunc: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,) -> * mut crate::src::python::libxml::_xmlXPathObject>,
    pub varLookupData: * mut core::ffi::c_void,
    pub extra: * mut core::ffi::c_void,
    pub function: * const u8,
    pub functionURI: * const u8,
    pub funcLookupFunc: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const u8,_: * const u8,) -> Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_xmlXPathParserContext,_: i32,) -> ()>>,
    pub funcLookupData: * mut core::ffi::c_void,
    pub tmpNsList: * mut * mut crate::src::python::libxml::_xmlNs,
    pub tmpNsNr: i32,
    pub userData: * mut core::ffi::c_void,
    pub error: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * mut crate::src::python::libxml::_xmlError,) -> ()>,
    pub lastError: crate::src::python::libxml::_xmlError,
    pub debugNode: * mut crate::src::python::libxml::_xmlNode,
    pub dict: * mut crate::src::python::types::_xmlDict,
    pub flags: i32,
    pub cache: * mut core::ffi::c_void,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pub opLimit: u64,
    pub opCount: u64,
    pub depth: i32,
}
<<<<<<< HEAD
pub type xmlXPathFuncLookupFunc = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        *const xmlChar,
    ) -> xmlXPathFunction,
>;
pub type xmlXPathFunction = Option::<
    unsafe extern "C" fn(xmlXPathParserContextPtr, i32) -> (),
>;
pub type xmlXPathParserContextPtr = *mut xmlXPathParserContext;
pub type xmlXPathParserContext = _xmlXPathParserContext;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathParserContext {
    pub cur: *const xmlChar,
    pub base: *const xmlChar,
    pub error: i32,
    pub context: xmlXPathContextPtr,
    pub value: xmlXPathObjectPtr,
    pub valueNr: i32,
    pub valueMax: i32,
    pub valueTab: *mut xmlXPathObjectPtr,
    pub comp: xmlXPathCompExprPtr,
    pub xptr: i32,
    pub ancestor: xmlNodePtr,
    pub valueFrame: i32,
}
pub type xmlXPathCompExprPtr = *mut xmlXPathCompExpr;
pub type xmlXPathCompExpr = _xmlXPathCompExpr;
pub type xmlXPathObjectPtr = *mut xmlXPathObject;
pub type xmlXPathObject = _xmlXPathObject;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathObject {
    pub type_0: xmlXPathObjectType,
    pub nodesetval: xmlNodeSetPtr,
    pub boolval: i32,
    pub floatval: f64,
    pub stringval: *mut xmlChar,
    pub user: *mut libc::c_void,
    pub index: i32,
    pub user2: *mut libc::c_void,
    pub index2: i32,
}
pub type xmlNodeSetPtr = *mut xmlNodeSet;
pub type xmlNodeSet = _xmlNodeSet;
=======
impl _xmlXPathContext {
    pub const fn new() -> Self {
        _xmlXPathContext {
        doc: (0 as * mut crate::src::python::libxml::_xmlDoc),
        node: (0 as * mut crate::src::python::libxml::_xmlNode),
        nb_variables_unused: 0,
        max_variables_unused: 0,
        varHash: (0 as * mut crate::src::python::libxml2_py::_xmlHashTable),
        nb_types: 0,
        max_types: 0,
        types: (0 as * mut crate::src::python::libxml::_xmlXPathType),
        nb_funcs_unused: 0,
        max_funcs_unused: 0,
        funcHash: (0 as * mut crate::src::python::libxml2_py::_xmlHashTable),
        nb_axis: 0,
        max_axis: 0,
        axis: (0 as * mut crate::src::python::libxml::_xmlXPathAxis),
        namespaces: (0 as * mut * mut crate::src::python::libxml::_xmlNs),
        nsNr: 0,
        user: (0 as * mut core::ffi::c_void),
        contextSize: 0,
        proximityPosition: 0,
        xptr: 0,
        here: (0 as * mut crate::src::python::libxml::_xmlNode),
        origin: (0 as * mut crate::src::python::libxml::_xmlNode),
        nsHash: (0 as * mut crate::src::python::libxml2_py::_xmlHashTable),
        varLookupFunc: None,
        varLookupData: (0 as * mut core::ffi::c_void),
        extra: (0 as * mut core::ffi::c_void),
        function: (0 as * const u8),
        functionURI: (0 as * const u8),
        funcLookupFunc: None,
        funcLookupData: (0 as * mut core::ffi::c_void),
        tmpNsList: (0 as * mut * mut crate::src::python::libxml::_xmlNs),
        tmpNsNr: 0,
        userData: (0 as * mut core::ffi::c_void),
        error: None,
        lastError: crate::src::python::libxml::_xmlError::new(),
        debugNode: (0 as * mut crate::src::python::libxml::_xmlNode),
        dict: (0 as * mut crate::src::python::types::_xmlDict),
        flags: 0,
        cache: (0 as * mut core::ffi::c_void),
        opLimit: 0,
        opCount: 0,
        depth: 0
        }
    }
}

impl std::default::Default for _xmlXPathContext {
    fn default() -> Self { _xmlXPathContext::new() }
}

pub type xmlXPathFuncLookupFunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 u8>,) -> Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_xmlXPathParserContext,_: i32,) -> ()>>;
pub type xmlXPathFunction<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_xmlXPathParserContext>,_: i32,) -> ()>;
pub type xmlXPathParserContextPtr = * mut crate::src::python::libxml::_xmlXPathParserContext;
pub type xmlXPathParserContext = crate::src::python::libxml::_xmlXPathParserContext;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathParserContext {
    pub cur: * const u8,
    pub base: * const u8,
    pub error: i32,
    pub context: * mut crate::src::python::libxml::_xmlXPathContext,
    pub value: * mut crate::src::python::libxml::_xmlXPathObject,
    pub valueNr: i32,
    pub valueMax: i32,
    pub valueTab: * mut * mut crate::src::python::libxml::_xmlXPathObject,
    pub comp: * mut crate::src::python::libxml::_xmlXPathCompExpr,
    pub xptr: i32,
    pub ancestor: * mut crate::src::python::libxml::_xmlNode,
    pub valueFrame: i32,
}
impl _xmlXPathParserContext {
    pub const fn new() -> Self {
        _xmlXPathParserContext {
        cur: (0 as * const u8),
        base: (0 as * const u8),
        error: 0,
        context: (0 as * mut crate::src::python::libxml::_xmlXPathContext),
        value: (0 as * mut crate::src::python::libxml::_xmlXPathObject),
        valueNr: 0,
        valueMax: 0,
        valueTab: (0 as * mut * mut crate::src::python::libxml::_xmlXPathObject),
        comp: (0 as * mut crate::src::python::libxml::_xmlXPathCompExpr),
        xptr: 0,
        ancestor: (0 as * mut crate::src::python::libxml::_xmlNode),
        valueFrame: 0
        }
    }
}

impl std::default::Default for _xmlXPathParserContext {
    fn default() -> Self { _xmlXPathParserContext::new() }
}

pub type xmlXPathCompExprPtr = * mut crate::src::python::libxml::_xmlXPathCompExpr;
pub type xmlXPathCompExpr = crate::src::python::libxml::_xmlXPathCompExpr;
pub type xmlXPathObjectPtr = * mut crate::src::python::libxml::_xmlXPathObject;
pub type xmlXPathObject = crate::src::python::libxml::_xmlXPathObject;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathObject {
    pub type_0: u32,
    pub nodesetval: * mut crate::src::python::libxml::_xmlNodeSet,
    pub boolval: i32,
    pub floatval: f64,
    pub stringval: * mut u8,
    pub user: * mut core::ffi::c_void,
    pub index: i32,
    pub user2: * mut core::ffi::c_void,
    pub index2: i32,
}
impl _xmlXPathObject {
    pub const fn new() -> Self {
        _xmlXPathObject {
        type_0: 0,
        nodesetval: (0 as * mut crate::src::python::libxml::_xmlNodeSet),
        boolval: 0,
        floatval: 0.0,
        stringval: (0 as * mut u8),
        user: (0 as * mut core::ffi::c_void),
        index: 0,
        user2: (0 as * mut core::ffi::c_void),
        index2: 0
        }
    }
}

impl std::default::Default for _xmlXPathObject {
    fn default() -> Self { _xmlXPathObject::new() }
}

pub type xmlNodeSetPtr = * mut crate::src::python::libxml::_xmlNodeSet;
pub type xmlNodeSet = crate::src::python::libxml::_xmlNodeSet;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlNodeSet {
    pub nodeNr: i32,
    pub nodeMax: i32,
<<<<<<< HEAD
    pub nodeTab: *mut xmlNodePtr,
}
=======
    pub nodeTab: * mut * mut crate::src::python::libxml::_xmlNode,
}
impl _xmlNodeSet {
    pub const fn new() -> Self {
        _xmlNodeSet {
        nodeNr: 0,
        nodeMax: 0,
        nodeTab: (0 as * mut * mut crate::src::python::libxml::_xmlNode)
        }
    }
}

impl std::default::Default for _xmlNodeSet {
    fn default() -> Self { _xmlNodeSet::new() }
}

>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type xmlXPathObjectType = u32;
pub const XPATH_XSLT_TREE: xmlXPathObjectType = 9;
pub const XPATH_USERS: xmlXPathObjectType = 8;
pub const XPATH_STRING: xmlXPathObjectType = 4;
pub const XPATH_NUMBER: xmlXPathObjectType = 3;
pub const XPATH_BOOLEAN: xmlXPathObjectType = 2;
pub const XPATH_NODESET: xmlXPathObjectType = 1;
pub const XPATH_UNDEFINED: xmlXPathObjectType = 0;
<<<<<<< HEAD
pub type xmlXPathContextPtr = *mut xmlXPathContext;
pub type xmlXPathContext = _xmlXPathContext;
pub type xmlXPathVariableLookupFunc = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const xmlChar,
        *const xmlChar,
    ) -> xmlXPathObjectPtr,
>;
pub type xmlXPathAxisPtr = *mut xmlXPathAxis;
pub type xmlXPathAxis = _xmlXPathAxis;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathAxis {
    pub name: *const xmlChar,
    pub func: xmlXPathAxisFunc,
}
pub type xmlXPathAxisFunc = Option::<
    unsafe extern "C" fn(
        xmlXPathParserContextPtr,
        xmlXPathObjectPtr,
    ) -> xmlXPathObjectPtr,
>;
pub type xmlXPathTypePtr = *mut xmlXPathType;
pub type xmlXPathType = _xmlXPathType;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathType {
    pub name: *const xmlChar,
    pub func: xmlXPathConvertFunc,
}
pub type xmlXPathConvertFunc = Option::<
    unsafe extern "C" fn(xmlXPathObjectPtr, i32) -> i32,
>;
pub type xmlRelaxNGValidityErrorFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
>;
pub type xmlRelaxNGValidityWarningFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
>;
pub type xmlRelaxNGValidCtxt = _xmlRelaxNGValidCtxt;
pub type xmlRelaxNGValidCtxtPtr = *mut xmlRelaxNGValidCtxt;
pub type xmlSchemaValidityErrorFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
>;
pub type xmlSchemaValidityWarningFunc = Option::<
    unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
>;
pub type xmlSchemaValidCtxt = _xmlSchemaValidCtxt;
pub type xmlSchemaValidCtxtPtr = *mut xmlSchemaValidCtxt;
=======
pub type xmlXPathContextPtr = * mut crate::src::python::libxml::_xmlXPathContext;
pub type xmlXPathContext = crate::src::python::libxml::_xmlXPathContext;
pub type xmlXPathVariableLookupFunc<'a1, 'a2, 'a3, 'a4> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 u8>,_: Option<&'a3 u8>,) -> Option<&'a4 mut crate::src::python::libxml::_xmlXPathObject>>;
pub type xmlXPathAxisPtr = * mut crate::src::python::libxml::_xmlXPathAxis;
pub type xmlXPathAxis = crate::src::python::libxml::_xmlXPathAxis;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathAxis {
    pub name: * const u8,
    pub func: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_xmlXPathParserContext,_: * mut crate::src::python::libxml::_xmlXPathObject,) -> * mut crate::src::python::libxml::_xmlXPathObject>,
}
impl _xmlXPathAxis {
    pub const fn new() -> Self {
        _xmlXPathAxis {
        name: (0 as * const u8),
        func: None
        }
    }
}

impl std::default::Default for _xmlXPathAxis {
    fn default() -> Self { _xmlXPathAxis::new() }
}

pub type xmlXPathAxisFunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_xmlXPathParserContext>,_: Option<&'a2 mut crate::src::python::libxml::_xmlXPathObject>,) -> Option<&'a3 mut crate::src::python::libxml::_xmlXPathObject>>;
pub type xmlXPathTypePtr = * mut crate::src::python::libxml::_xmlXPathType;
pub type xmlXPathType = crate::src::python::libxml::_xmlXPathType;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _xmlXPathType {
    pub name: * const u8,
    pub func: Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_xmlXPathObject,_: i32,) -> i32>,
}
impl _xmlXPathType {
    pub const fn new() -> Self {
        _xmlXPathType {
        name: (0 as * const u8),
        func: None
        }
    }
}

impl std::default::Default for _xmlXPathType {
    fn default() -> Self { _xmlXPathType::new() }
}

pub type xmlXPathConvertFunc<'a1> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut crate::src::python::libxml::_xmlXPathObject>,_: i32,) -> i32>;
pub type xmlRelaxNGValidityErrorFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,...) -> ()>;
pub type xmlRelaxNGValidityWarningFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,...) -> ()>;
pub type xmlRelaxNGValidCtxt = crate::src::python::types::_xmlRelaxNGValidCtxt;
pub type xmlRelaxNGValidCtxtPtr = * mut crate::src::python::types::_xmlRelaxNGValidCtxt;
pub type xmlSchemaValidityErrorFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,...) -> ()>;
pub type xmlSchemaValidityWarningFunc<'a1, 'a2> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,...) -> ()>;
pub type xmlSchemaValidCtxt = crate::src::python::types::_xmlSchemaValidCtxt;
pub type xmlSchemaValidCtxtPtr = * mut crate::src::python::types::_xmlSchemaValidCtxt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type xmlParserSeverities = u32;
pub const XML_PARSER_SEVERITY_ERROR: xmlParserSeverities = 4;
pub const XML_PARSER_SEVERITY_WARNING: xmlParserSeverities = 3;
pub const XML_PARSER_SEVERITY_VALIDITY_ERROR: xmlParserSeverities = 2;
pub const XML_PARSER_SEVERITY_VALIDITY_WARNING: xmlParserSeverities = 1;
<<<<<<< HEAD
pub type xmlTextReader = _xmlTextReader;
pub type xmlTextReaderPtr = *mut xmlTextReader;
pub type xmlTextReaderLocatorPtr = *mut libc::c_void;
pub type xmlTextReaderErrorFunc = Option::<
    unsafe extern "C" fn(
        *mut libc::c_void,
        *const i8,
        xmlParserSeverities,
        xmlTextReaderLocatorPtr,
    ) -> (),
>;
=======
pub type xmlTextReader = crate::src::python::types::_xmlTextReader;
pub type xmlTextReaderPtr = * mut crate::src::python::types::_xmlTextReader;
pub type xmlTextReaderLocatorPtr = * mut core::ffi::c_void;
pub type xmlTextReaderErrorFunc<'a1, 'a2, 'a3> = Option<unsafe extern "C"  fn(_: Option<&'a1 mut core::ffi::c_void>,_: Option<&'a2 i8>,_: u32,_: Option<&'a3 mut core::ffi::c_void>,) -> ()>;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
pub type C2RustUnnamed = u32;
pub const XML_SAVE_WSNONSIG: C2RustUnnamed = 128;
pub const XML_SAVE_AS_HTML: C2RustUnnamed = 64;
pub const XML_SAVE_AS_XML: C2RustUnnamed = 32;
pub const XML_SAVE_XHTML: C2RustUnnamed = 16;
pub const XML_SAVE_NO_XHTML: C2RustUnnamed = 8;
pub const XML_SAVE_NO_EMPTY: C2RustUnnamed = 4;
pub const XML_SAVE_NO_DECL: C2RustUnnamed = 2;
pub const XML_SAVE_FORMAT: C2RustUnnamed = 1;
<<<<<<< HEAD
pub type xmlSaveCtxt = _xmlSaveCtxt;
pub type xmlSaveCtxtPtr = *mut xmlSaveCtxt;
pub type htmlParserCtxtPtr = xmlParserCtxtPtr;
pub type htmlSAXHandlerPtr = xmlSAXHandlerPtr;
pub type htmlDocPtr = xmlDocPtr;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyxmlNode_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlNodePtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyxmlXPathContext_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlXPathContextPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyparserCtxt_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlParserCtxtPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyValidCtxt_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlValidCtxtPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyxmlTextReader_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlTextReaderPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyoutputBuffer_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlOutputBufferPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PyrelaxNgValidCtxt_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlRelaxNGValidCtxtPtr,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PySchemaValidCtxt_Object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub obj: xmlSchemaValidCtxtPtr,
}
pub type xmlSchemaValidCtxtPyCtxtPtr = *mut xmlSchemaValidCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlSchemaValidCtxtPyCtxt {
    pub warn: *mut PyObject,
    pub error: *mut PyObject,
    pub arg: *mut PyObject,
}
pub type libxml_xpathCallbackArray = [libxml_xpathCallback; 0];
#[derive(Copy, Clone)]
#[repr(C)]
pub struct libxml_xpathCallback {
    pub ctx: xmlXPathContextPtr,
    pub name: *mut xmlChar,
    pub ns_uri: *mut xmlChar,
    pub function: *mut PyObject,
}
pub type xmlRelaxNGValidCtxtPyCtxtPtr = *mut xmlRelaxNGValidCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlRelaxNGValidCtxtPyCtxt {
    pub warn: *mut PyObject,
    pub error: *mut PyObject,
    pub arg: *mut PyObject,
}
pub type xmlTextReaderPyCtxtPtr = *mut xmlTextReaderPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlTextReaderPyCtxt {
    pub f: *mut PyObject,
    pub arg: *mut PyObject,
}
pub type xmlParserCtxtPyCtxtPtr = *mut xmlParserCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlParserCtxtPyCtxt {
    pub f: *mut PyObject,
    pub arg: *mut PyObject,
}
pub type xmlValidCtxtPyCtxtPtr = *mut xmlValidCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlValidCtxtPyCtxt {
    pub warn: *mut PyObject,
    pub error: *mut PyObject,
    pub arg: *mut PyObject,
}
static mut libxml_xpathCallbacksInitialized: i32 = 0 as i32;
static mut libxml_xpathCallbacksAllocd: i32 = 10 as i32;
static mut libxml_xpathCallbacks: *mut libxml_xpathCallbackArray = 0
=======
pub type xmlSaveCtxt = crate::src::python::libxml::_xmlSaveCtxt;
pub type xmlSaveCtxtPtr = * mut crate::src::python::libxml::_xmlSaveCtxt;
pub type htmlParserCtxtPtr = * mut crate::src::python::libxml::_xmlParserCtxt;
pub type htmlSAXHandlerPtr = * mut crate::src::python::libxml::_xmlSAXHandler;
pub type htmlDocPtr = * mut crate::src::python::libxml::_xmlDoc;
// #[derive(Copy, Clone)]
#[repr(C)]
pub struct PyxmlNode_Object<'a> {
    pub ob_refcnt: i64,
    pub ob_type: Option<&'a mut crate::src::python::libxml::_typeobject>,
    pub obj: * mut crate::src::python::libxml::_xmlNode,
}
impl<'a> PyxmlNode_Object<'a> {
    pub const fn new() -> Self {
        PyxmlNode_Object {
        ob_refcnt: 0,
        ob_type: None,
        obj: (0 as * mut crate::src::python::libxml::_xmlNode)
        }
    }
}

impl<'a> std::default::Default for PyxmlNode_Object<'a> {
    fn default() -> Self { PyxmlNode_Object::new() }
}

// #[derive(Copy, Clone)]
#[repr(C)]
pub struct PyxmlXPathContext_Object<'a> {
    pub ob_refcnt: i64,
    pub ob_type: Option<&'a mut crate::src::python::libxml::_typeobject>,
    pub obj: * mut crate::src::python::libxml::_xmlXPathContext,
}
impl<'a> PyxmlXPathContext_Object<'a> {
    pub const fn new() -> Self {
        PyxmlXPathContext_Object {
        ob_refcnt: 0,
        ob_type: None,
        obj: (0 as * mut crate::src::python::libxml::_xmlXPathContext)
        }
    }
}

impl<'a> std::default::Default for PyxmlXPathContext_Object<'a> {
    fn default() -> Self { PyxmlXPathContext_Object::new() }
}

// #[derive(Copy, Clone)]
#[repr(C)]
pub struct PyparserCtxt_Object<'a> {
    pub ob_refcnt: i64,
    pub ob_type: Option<&'a mut crate::src::python::libxml::_typeobject>,
    pub obj: * mut crate::src::python::libxml::_xmlParserCtxt,
}
impl<'a> PyparserCtxt_Object<'a> {
    pub const fn new() -> Self {
        PyparserCtxt_Object {
        ob_refcnt: 0,
        ob_type: None,
        obj: (0 as * mut crate::src::python::libxml::_xmlParserCtxt)
        }
    }
}

impl<'a> std::default::Default for PyparserCtxt_Object<'a> {
    fn default() -> Self { PyparserCtxt_Object::new() }
}

// #[derive(Copy, Clone)]
#[repr(C)]
pub struct PyValidCtxt_Object<'a> {
    pub ob_refcnt: i64,
    pub ob_type: Option<&'a mut crate::src::python::libxml::_typeobject>,
    pub obj: * mut crate::src::python::libxml::_xmlValidCtxt,
}
impl<'a> PyValidCtxt_Object<'a> {
    pub const fn new() -> Self {
        PyValidCtxt_Object {
        ob_refcnt: 0,
        ob_type: None,
        obj: (0 as * mut crate::src::python::libxml::_xmlValidCtxt)
        }
    }
}

impl<'a> std::default::Default for PyValidCtxt_Object<'a> {
    fn default() -> Self { PyValidCtxt_Object::new() }
}

// #[derive(Copy, Clone)]
#[repr(C)]
pub struct PyxmlTextReader_Object<'a> {
    pub ob_refcnt: i64,
    pub ob_type: Option<&'a mut crate::src::python::libxml::_typeobject>,
    pub obj: * mut crate::src::python::types::_xmlTextReader,
}
impl<'a> PyxmlTextReader_Object<'a> {
    pub const fn new() -> Self {
        PyxmlTextReader_Object {
        ob_refcnt: 0,
        ob_type: None,
        obj: (0 as * mut crate::src::python::types::_xmlTextReader)
        }
    }
}

impl<'a> std::default::Default for PyxmlTextReader_Object<'a> {
    fn default() -> Self { PyxmlTextReader_Object::new() }
}

// #[derive(Copy, Clone)]
#[repr(C)]
pub struct PyoutputBuffer_Object<'a> {
    pub ob_refcnt: i64,
    pub ob_type: Option<&'a mut crate::src::python::libxml::_typeobject>,
    pub obj: * mut crate::src::python::libxml::_xmlOutputBuffer,
}
impl<'a> PyoutputBuffer_Object<'a> {
    pub const fn new() -> Self {
        PyoutputBuffer_Object {
        ob_refcnt: 0,
        ob_type: None,
        obj: (0 as * mut crate::src::python::libxml::_xmlOutputBuffer)
        }
    }
}

impl<'a> std::default::Default for PyoutputBuffer_Object<'a> {
    fn default() -> Self { PyoutputBuffer_Object::new() }
}

// #[derive(Copy, Clone)]
#[repr(C)]
pub struct PyrelaxNgValidCtxt_Object<'a> {
    pub ob_refcnt: i64,
    pub ob_type: Option<&'a mut crate::src::python::libxml::_typeobject>,
    pub obj: * mut crate::src::python::types::_xmlRelaxNGValidCtxt,
}
impl<'a> PyrelaxNgValidCtxt_Object<'a> {
    pub const fn new() -> Self {
        PyrelaxNgValidCtxt_Object {
        ob_refcnt: 0,
        ob_type: None,
        obj: (0 as * mut crate::src::python::types::_xmlRelaxNGValidCtxt)
        }
    }
}

impl<'a> std::default::Default for PyrelaxNgValidCtxt_Object<'a> {
    fn default() -> Self { PyrelaxNgValidCtxt_Object::new() }
}

// #[derive(Copy, Clone)]
#[repr(C)]
pub struct PySchemaValidCtxt_Object<'a> {
    pub ob_refcnt: i64,
    pub ob_type: Option<&'a mut crate::src::python::libxml::_typeobject>,
    pub obj: * mut crate::src::python::types::_xmlSchemaValidCtxt,
}
impl<'a> PySchemaValidCtxt_Object<'a> {
    pub const fn new() -> Self {
        PySchemaValidCtxt_Object {
        ob_refcnt: 0,
        ob_type: None,
        obj: (0 as * mut crate::src::python::types::_xmlSchemaValidCtxt)
        }
    }
}

impl<'a> std::default::Default for PySchemaValidCtxt_Object<'a> {
    fn default() -> Self { PySchemaValidCtxt_Object::new() }
}

pub type xmlSchemaValidCtxtPyCtxtPtr = * mut crate::src::python::libxml::xmlSchemaValidCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlSchemaValidCtxtPyCtxt {
    pub warn: * mut crate::src::python::libxml::_object,
    pub error: * mut crate::src::python::libxml::_object,
    pub arg: * mut crate::src::python::libxml::_object,
}
impl xmlSchemaValidCtxtPyCtxt {
    pub const fn new() -> Self {
        xmlSchemaValidCtxtPyCtxt {
        warn: (0 as * mut crate::src::python::libxml::_object),
        error: (0 as * mut crate::src::python::libxml::_object),
        arg: (0 as * mut crate::src::python::libxml::_object)
        }
    }
}

impl std::default::Default for xmlSchemaValidCtxtPyCtxt {
    fn default() -> Self { xmlSchemaValidCtxtPyCtxt::new() }
}

pub type libxml_xpathCallbackArray = [crate::src::python::libxml::libxml_xpathCallback; 0];
#[derive(Copy, Clone)]
#[repr(C)]
pub struct libxml_xpathCallback {
    pub ctx: * mut crate::src::python::libxml::_xmlXPathContext,
    pub name: * mut u8,
    pub ns_uri: * mut u8,
    pub function: * mut crate::src::python::libxml::_object,
}
impl libxml_xpathCallback {
    pub const fn new() -> Self {
        libxml_xpathCallback {
        ctx: (0 as * mut crate::src::python::libxml::_xmlXPathContext),
        name: (0 as * mut u8),
        ns_uri: (0 as * mut u8),
        function: (0 as * mut crate::src::python::libxml::_object)
        }
    }
}

impl std::default::Default for libxml_xpathCallback {
    fn default() -> Self { libxml_xpathCallback::new() }
}

pub type xmlRelaxNGValidCtxtPyCtxtPtr = * mut crate::src::python::libxml::xmlRelaxNGValidCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlRelaxNGValidCtxtPyCtxt {
    pub warn: * mut crate::src::python::libxml::_object,
    pub error: * mut crate::src::python::libxml::_object,
    pub arg: * mut crate::src::python::libxml::_object,
}
impl xmlRelaxNGValidCtxtPyCtxt {
    pub const fn new() -> Self {
        xmlRelaxNGValidCtxtPyCtxt {
        warn: (0 as * mut crate::src::python::libxml::_object),
        error: (0 as * mut crate::src::python::libxml::_object),
        arg: (0 as * mut crate::src::python::libxml::_object)
        }
    }
}

impl std::default::Default for xmlRelaxNGValidCtxtPyCtxt {
    fn default() -> Self { xmlRelaxNGValidCtxtPyCtxt::new() }
}

pub type xmlTextReaderPyCtxtPtr = * mut crate::src::python::libxml::xmlTextReaderPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlTextReaderPyCtxt {
    pub f: * mut crate::src::python::libxml::_object,
    pub arg: * mut crate::src::python::libxml::_object,
}
impl xmlTextReaderPyCtxt {
    pub const fn new() -> Self {
        xmlTextReaderPyCtxt {
        f: (0 as * mut crate::src::python::libxml::_object),
        arg: (0 as * mut crate::src::python::libxml::_object)
        }
    }
}

impl std::default::Default for xmlTextReaderPyCtxt {
    fn default() -> Self { xmlTextReaderPyCtxt::new() }
}

pub type xmlParserCtxtPyCtxtPtr = * mut crate::src::python::libxml::xmlParserCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlParserCtxtPyCtxt {
    pub f: * mut crate::src::python::libxml::_object,
    pub arg: * mut crate::src::python::libxml::_object,
}
impl xmlParserCtxtPyCtxt {
    pub const fn new() -> Self {
        xmlParserCtxtPyCtxt {
        f: (0 as * mut crate::src::python::libxml::_object),
        arg: (0 as * mut crate::src::python::libxml::_object)
        }
    }
}

impl std::default::Default for xmlParserCtxtPyCtxt {
    fn default() -> Self { xmlParserCtxtPyCtxt::new() }
}

pub type xmlValidCtxtPyCtxtPtr = * mut crate::src::python::libxml::xmlValidCtxtPyCtxt;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct xmlValidCtxtPyCtxt {
    pub warn: * mut crate::src::python::libxml::_object,
    pub error: * mut crate::src::python::libxml::_object,
    pub arg: * mut crate::src::python::libxml::_object,
}
impl xmlValidCtxtPyCtxt {
    pub const fn new() -> Self {
        xmlValidCtxtPyCtxt {
        warn: (0 as * mut crate::src::python::libxml::_object),
        error: (0 as * mut crate::src::python::libxml::_object),
        arg: (0 as * mut crate::src::python::libxml::_object)
        }
    }
}

impl std::default::Default for xmlValidCtxtPyCtxt {
    fn default() -> Self { xmlValidCtxtPyCtxt::new() }
}

static mut libxml_xpathCallbacksInitialized: i32 = 0 as i32;
static mut libxml_xpathCallbacksAllocd: i32 = 10 as i32;
static mut libxml_xpathCallbacks: * mut [crate::src::python::libxml::libxml_xpathCallback; 0] = 0
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    as *const libxml_xpathCallbackArray as *mut libxml_xpathCallbackArray;
static mut libxml_xpathCallbacksNb: i32 = 0 as i32;
static mut libxmlMemoryDebugActivated: i32 = 0 as i32;
static mut libxmlMemoryAllocatedBase: i64 = 0 as i32 as i64;
static mut libxmlMemoryDebug: i32 = 0 as i32;
<<<<<<< HEAD
=======
// static mut freeFunc: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,) -> ()> = None;
// static mut mallocFunc: Option<unsafe extern "C"  fn(_: u64,) -> * mut core::ffi::c_void> = None;
// static mut reallocFunc: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: u64,) -> * mut core::ffi::c_void> = None;
// static mut strdupFunc: Option<unsafe extern "C"  fn(_: * const i8,) -> * mut i8> = None;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
static mut freeFunc: xmlFreeFunc = None;
static mut mallocFunc: xmlMallocFunc = None;
static mut reallocFunc: xmlReallocFunc = None;
static mut strdupFunc: xmlStrdupFunc = None;
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlMemoryUsed(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut ret: i64 = 0;
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut ret: i64 = 0;
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ret = xmlMemUsed() as i64;
    py_retval = libxml_longWrap(ret);
    return py_retval;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlDebugMemory(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut current_block: u64;
    let mut activate: i32 = 0;
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut current_block: u64;
    let mut activate: i32 = 0;
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut ret: i64 = 0;
    if _PyArg_ParseTuple_SizeT(
        args,
        b"i:xmlDebugMemory\0" as *const u8 as *const i8 as *mut i8,
        &mut activate as *mut i32,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    if activate != 0 as i32 {
        if libxmlMemoryDebug == 0 as i32 {
            xmlMemGet(
                &mut freeFunc as *mut xmlFreeFunc,
                &mut mallocFunc as *mut xmlMallocFunc,
                &mut reallocFunc as *mut xmlReallocFunc,
                &mut strdupFunc as *mut xmlStrdupFunc,
            );
<<<<<<< HEAD
            if freeFunc
                == Some(xmlMemFree as unsafe extern "C" fn(*mut libc::c_void) -> ())
                && mallocFunc
                    == Some(
                        xmlMemMalloc as unsafe extern "C" fn(size_t) -> *mut libc::c_void,
                    )
                && reallocFunc
                    == Some(
                        xmlMemRealloc
                            as unsafe extern "C" fn(
                                *mut libc::c_void,
                                size_t,
                            ) -> *mut libc::c_void,
                    )
                && strdupFunc
                    == Some(
                        xmlMemoryStrdup
                            as unsafe extern "C" fn(
                                *const i8,
                            ) -> *mut i8,
                    )
=======
            if (freeFunc
                ).map(|f| f as usize) == ( Some(xmlMemFree)).map(|f| f as usize)
                && (mallocFunc
                    ).map(|f| f as usize) == ( Some(
                        xmlMemMalloc,
                    )).map(|f| f as usize)
                && (reallocFunc
                    ).map(|f| f as usize) == ( Some(
                        xmlMemRealloc,
                    )).map(|f| f as usize)
                && (strdupFunc
                    ).map(|f| f as usize) == ( Some(
                        xmlMemoryStrdup,
                    )).map(|f| f as usize)
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            {
                libxmlMemoryAllocatedBase = xmlMemUsed() as i64;
                current_block = 10048703153582371463;
            } else {
                xmlCleanupParser();
                ret = xmlMemSetup(
<<<<<<< HEAD
                    Some(xmlMemFree as unsafe extern "C" fn(*mut libc::c_void) -> ()),
                    Some(
                        xmlMemMalloc as unsafe extern "C" fn(size_t) -> *mut libc::c_void,
                    ),
                    Some(
                        xmlMemRealloc
                            as unsafe extern "C" fn(
                                *mut libc::c_void,
                                size_t,
                            ) -> *mut libc::c_void,
                    ),
                    Some(
                        xmlMemoryStrdup
                            as unsafe extern "C" fn(
                                *const i8,
                            ) -> *mut i8,
=======
                    Some(xmlMemFree),
                    Some(
                        xmlMemMalloc,
                    ),
                    Some(
                        xmlMemRealloc,
                    ),
                    Some(
                        xmlMemoryStrdup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                    ),
                ) as i64;
                if ret < 0 as i32 as i64 {
                    current_block = 15224037586932921579;
                } else {
                    libxmlMemoryAllocatedBase = xmlMemUsed() as i64;
                    xmlInitParser();
                    libxml_xmlErrorInitialize();
                    current_block = 10048703153582371463;
                }
            }
            match current_block {
                15224037586932921579 => {}
                _ => {
                    ret = 0 as i32 as i64;
                    current_block = 4495394744059808450;
                }
            }
        } else {
            if libxmlMemoryDebugActivated == 0 as i32 {
                libxmlMemoryAllocatedBase = xmlMemUsed() as i64;
                ret = 0 as i32 as i64;
            } else {
                ret = xmlMemUsed() as i64 - libxmlMemoryAllocatedBase;
            }
            current_block = 4495394744059808450;
        }
        match current_block {
            15224037586932921579 => {}
            _ => {
                libxmlMemoryDebug = 1 as i32;
                libxmlMemoryDebugActivated = 1 as i32;
            }
        }
    } else {
        if libxmlMemoryDebugActivated == 1 as i32 {
            ret = xmlMemUsed() as i64 - libxmlMemoryAllocatedBase;
        } else {
            ret = 0 as i32 as i64;
        }
        libxmlMemoryDebugActivated = 0 as i32;
    }
    py_retval = libxml_longWrap(ret);
    return py_retval;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlPythonCleanupParser(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut ix: i32 = 0;
    let mut freed: i64 = -(1 as i32) as i64;
    if libxmlMemoryDebug != 0 {
        freed = xmlMemUsed() as i64;
    }
    xmlCleanupParser();
    if !libxml_xpathCallbacks.is_null() {
        ix = 0 as i32;
        while ix < libxml_xpathCallbacksNb {
            if !((*(*libxml_xpathCallbacks).as_mut_ptr().offset(ix as isize)).name)
                .is_null()
            {
                xmlFree
                    .expect(
                        "non-null function pointer",
                    )(
                    (*(*libxml_xpathCallbacks).as_mut_ptr().offset(ix as isize)).name
                        as *mut libc::c_void,
                );
            }
            if !((*(*libxml_xpathCallbacks).as_mut_ptr().offset(ix as isize)).ns_uri)
                .is_null()
            {
                xmlFree
                    .expect(
                        "non-null function pointer",
                    )(
                    (*(*libxml_xpathCallbacks).as_mut_ptr().offset(ix as isize)).ns_uri
                        as *mut libc::c_void,
                );
            }
            ix += 1;
        }
        libxml_xpathCallbacksNb = 0 as i32;
        xmlFree
            .expect(
                "non-null function pointer",
            )(libxml_xpathCallbacks as *mut libc::c_void);
        libxml_xpathCallbacks = 0 as *mut libxml_xpathCallbackArray;
    }
    if libxmlMemoryDebug != 0 {
        freed -= xmlMemUsed() as i64;
        libxmlMemoryAllocatedBase -= freed;
        if libxmlMemoryAllocatedBase < 0 as i32 as i64 {
            libxmlMemoryAllocatedBase = 0 as i32 as i64;
        }
    }
<<<<<<< HEAD
    let ref mut fresh0 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
    let ref mut fresh0 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    *fresh0 += 1;
    return &mut _Py_NoneStruct;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlDumpMemory(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    if libxmlMemoryDebug != 0 as i32 {
        xmlMemoryDump();
    }
    let ref mut fresh1 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    if libxmlMemoryDebug != 0 as i32 {
        xmlMemoryDump();
    }
    let ref mut fresh1 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    *fresh1 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn xmlPythonFileCloseRaw(
<<<<<<< HEAD
    mut context: *mut libc::c_void,
) -> i32 {
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut ret: *mut PyObject = 0 as *mut PyObject;
=======
    mut context: * mut core::ffi::c_void,
) -> i32 {
    let mut file: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut ret: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    file = context as *mut PyObject;
    if file.is_null() {
        return -(1 as i32);
    }
    ret = PyEval_CallMethod(
        file,
        b"close\0" as *const u8 as *const i8 as *mut i8,
        b"()\0" as *const u8 as *const i8 as *mut i8,
    );
    if !ret.is_null() {
        let ref mut fresh2 = (*ret).ob_refcnt;
        *fresh2 -= 1;
        if !(*fresh2 != 0 as i32 as i64) {
            (Some(((*(*ret).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(ret);
        }
    }
    let ref mut fresh3 = (*file).ob_refcnt;
    *fresh3 -= 1;
    if !(*fresh3 != 0 as i32 as i64) {
        (Some(((*(*file).ob_type).tp_dealloc).expect("non-null function pointer")))
            .expect("non-null function pointer")(file);
    }
    return 0 as i32;
}
unsafe extern "C" fn xmlPythonFileReadRaw(
<<<<<<< HEAD
    mut context: *mut libc::c_void,
    mut buffer: *mut i8,
    mut len: i32,
) -> i32 {
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut ret: *mut PyObject = 0 as *mut PyObject;
    let mut lenread: i32 = -(1 as i32);
    let mut data: *mut i8 = 0 as *mut i8;
=======
    mut context: * mut core::ffi::c_void,
    mut buffer: * mut i8,
    mut len: i32,
) -> i32 {
    let mut file: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut ret: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut lenread: i32 = -(1 as i32);
    let mut data: * mut i8 = 0 as *mut i8;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    file = context as *mut PyObject;
    if file.is_null() {
        return -(1 as i32);
    }
    ret = PyEval_CallMethod(
        file,
        b"read\0" as *const u8 as *const i8 as *mut i8,
        b"(i)\0" as *const u8 as *const i8 as *mut i8,
        len,
    );
    if ret.is_null() {
        printf(
            b"xmlPythonFileReadRaw: result is NULL\n\0" as *const u8
                as *const i8,
        );
        return -(1 as i32);
    } else {
        if (*(*ret).ob_type).tp_flags & (1 as i64) << 27 as i32
            != 0 as i32 as i64
        {
            lenread = PyString_Size(ret) as i32;
            data = PyString_AsString(ret);
        } else if (*(*ret).ob_type).tp_flags & (1 as i64) << 28 as i32
                != 0 as i32 as i64
            {
<<<<<<< HEAD
            let mut b: *mut PyObject = 0 as *mut PyObject;
=======
            let mut b: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            b = PyUnicodeUCS4_AsUTF8String(ret);
            if b.is_null() {
                printf(
                    b"xmlPythonFileReadRaw: failed to convert to UTF-8\n\0" as *const u8
                        as *const i8,
                );
                return -(1 as i32);
            }
            lenread = PyString_Size(b) as i32;
            data = PyString_AsString(b);
            let ref mut fresh4 = (*b).ob_refcnt;
            *fresh4 -= 1;
            if !(*fresh4 != 0 as i32 as i64) {
                (Some(((*(*b).ob_type).tp_dealloc).expect("non-null function pointer")))
                    .expect("non-null function pointer")(b);
            }
        } else {
            printf(
                b"xmlPythonFileReadRaw: result is not a String\n\0" as *const u8
                    as *const i8,
            );
            let ref mut fresh5 = (*ret).ob_refcnt;
            *fresh5 -= 1;
            if !(*fresh5 != 0 as i32 as i64) {
                (Some(
                    ((*(*ret).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(ret);
            }
            return -(1 as i32);
        }
    }
    if lenread > len {
        memcpy(
            buffer as *mut libc::c_void,
            data as *const libc::c_void,
            len as u64,
        );
    } else {
        memcpy(
            buffer as *mut libc::c_void,
            data as *const libc::c_void,
            lenread as u64,
        );
    }
    let ref mut fresh6 = (*ret).ob_refcnt;
    *fresh6 -= 1;
    if !(*fresh6 != 0 as i32 as i64) {
        (Some(((*(*ret).ob_type).tp_dealloc).expect("non-null function pointer")))
            .expect("non-null function pointer")(ret);
    }
    return lenread;
}
unsafe extern "C" fn xmlPythonFileRead(
<<<<<<< HEAD
    mut context: *mut libc::c_void,
    mut buffer: *mut i8,
    mut len: i32,
) -> i32 {
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut ret: *mut PyObject = 0 as *mut PyObject;
    let mut lenread: i32 = -(1 as i32);
    let mut data: *mut i8 = 0 as *mut i8;
=======
    mut context: * mut core::ffi::c_void,
    mut buffer: * mut i8,
    mut len: i32,
) -> i32 {
    let mut file: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut ret: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut lenread: i32 = -(1 as i32);
    let mut data: * mut i8 = 0 as *mut i8;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    file = context as *mut PyObject;
    if file.is_null() {
        return -(1 as i32);
    }
    ret = PyEval_CallMethod(
        file,
        b"io_read\0" as *const u8 as *const i8 as *mut i8,
        b"(i)\0" as *const u8 as *const i8 as *mut i8,
        len,
    );
    if ret.is_null() {
        printf(
            b"xmlPythonFileRead: result is NULL\n\0" as *const u8 as *const i8,
        );
        return -(1 as i32);
    } else {
        if (*(*ret).ob_type).tp_flags & (1 as i64) << 27 as i32
            != 0 as i32 as i64
        {
            lenread = PyString_Size(ret) as i32;
            data = PyString_AsString(ret);
        } else if (*(*ret).ob_type).tp_flags & (1 as i64) << 28 as i32
                != 0 as i32 as i64
            {
<<<<<<< HEAD
            let mut b: *mut PyObject = 0 as *mut PyObject;
=======
            let mut b: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            b = PyUnicodeUCS4_AsUTF8String(ret);
            if b.is_null() {
                printf(
                    b"xmlPythonFileRead: failed to convert to UTF-8\n\0" as *const u8
                        as *const i8,
                );
                return -(1 as i32);
            }
            lenread = PyString_Size(b) as i32;
            data = PyString_AsString(b);
            let ref mut fresh7 = (*b).ob_refcnt;
            *fresh7 -= 1;
            if !(*fresh7 != 0 as i32 as i64) {
                (Some(((*(*b).ob_type).tp_dealloc).expect("non-null function pointer")))
                    .expect("non-null function pointer")(b);
            }
        } else {
            printf(
                b"xmlPythonFileRead: result is not a String\n\0" as *const u8
                    as *const i8,
            );
            let ref mut fresh8 = (*ret).ob_refcnt;
            *fresh8 -= 1;
            if !(*fresh8 != 0 as i32 as i64) {
                (Some(
                    ((*(*ret).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(ret);
            }
            return -(1 as i32);
        }
    }
    if lenread > len {
        memcpy(
            buffer as *mut libc::c_void,
            data as *const libc::c_void,
            len as u64,
        );
    } else {
        memcpy(
            buffer as *mut libc::c_void,
            data as *const libc::c_void,
            lenread as u64,
        );
    }
    let ref mut fresh9 = (*ret).ob_refcnt;
    *fresh9 -= 1;
    if !(*fresh9 != 0 as i32 as i64) {
        (Some(((*(*ret).ob_type).tp_dealloc).expect("non-null function pointer")))
            .expect("non-null function pointer")(ret);
    }
    return lenread;
}
unsafe extern "C" fn xmlPythonFileWrite(
<<<<<<< HEAD
    mut context: *mut libc::c_void,
    mut buffer: *const i8,
    mut len: i32,
) -> i32 {
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut string: *mut PyObject = 0 as *mut PyObject;
    let mut ret: *mut PyObject = 0 as *mut PyObject;
=======
    mut context: * mut core::ffi::c_void,
    mut buffer: * const i8,
    mut len: i32,
) -> i32 {
    let mut file: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut string: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut ret: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut written: i32 = -(1 as i32);
    file = context as *mut PyObject;
    if file.is_null() {
        return -(1 as i32);
    }
    string = PyString_FromStringAndSize(buffer, len as Py_ssize_t);
    if string.is_null() {
        return -(1 as i32);
    }
    if PyObject_HasAttrString(
        file,
        b"io_write\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        ret = PyEval_CallMethod(
            file,
            b"io_write\0" as *const u8 as *const i8 as *mut i8,
            b"(O)\0" as *const u8 as *const i8 as *mut i8,
            string,
        );
    } else if PyObject_HasAttrString(
            file,
            b"write\0" as *const u8 as *const i8 as *mut i8,
        ) != 0
        {
        ret = PyEval_CallMethod(
            file,
            b"write\0" as *const u8 as *const i8 as *mut i8,
            b"(O)\0" as *const u8 as *const i8 as *mut i8,
            string,
        );
    }
    let ref mut fresh10 = (*string).ob_refcnt;
    *fresh10 -= 1;
    if !(*fresh10 != 0 as i32 as i64) {
        (Some(((*(*string).ob_type).tp_dealloc).expect("non-null function pointer")))
            .expect("non-null function pointer")(string);
    }
    if ret.is_null() {
        printf(
            b"xmlPythonFileWrite: result is NULL\n\0" as *const u8 as *const i8,
        );
        return -(1 as i32);
    } else {
        if (*(*ret).ob_type).tp_flags & (1 as i64) << 24 as i32
            != 0 as i32 as i64
        {
            written = PyLong_AsLong(ret) as i32;
            let ref mut fresh11 = (*ret).ob_refcnt;
            *fresh11 -= 1;
            if !(*fresh11 != 0 as i32 as i64) {
                (Some(
                    ((*(*ret).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(ret);
            }
        } else if ret == &mut _Py_NoneStruct as *mut PyObject {
            written = len;
            let ref mut fresh12 = (*ret).ob_refcnt;
            *fresh12 -= 1;
            if !(*fresh12 != 0 as i32 as i64) {
                (Some(
                    ((*(*ret).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(ret);
            }
        } else {
            printf(
                b"xmlPythonFileWrite: result is not an Int nor None\n\0" as *const u8
                    as *const i8,
            );
            let ref mut fresh13 = (*ret).ob_refcnt;
            *fresh13 -= 1;
            if !(*fresh13 != 0 as i32 as i64) {
                (Some(
                    ((*(*ret).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(ret);
            }
        }
    }
    return written;
}
<<<<<<< HEAD
unsafe extern "C" fn xmlPythonFileClose(mut context: *mut libc::c_void) -> i32 {
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut ret: *mut PyObject = 0 as *mut PyObject;
=======
unsafe extern "C" fn xmlPythonFileClose(mut context: * mut core::ffi::c_void) -> i32 {
    let mut file: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut ret: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    file = context as *mut PyObject;
    if file.is_null() {
        return -(1 as i32);
    }
    if PyObject_HasAttrString(
        file,
        b"io_close\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        ret = PyEval_CallMethod(
            file,
            b"io_close\0" as *const u8 as *const i8 as *mut i8,
            b"()\0" as *const u8 as *const i8 as *mut i8,
        );
    } else if PyObject_HasAttrString(
            file,
            b"flush\0" as *const u8 as *const i8 as *mut i8,
        ) != 0
        {
        ret = PyEval_CallMethod(
            file,
            b"flush\0" as *const u8 as *const i8 as *mut i8,
            b"()\0" as *const u8 as *const i8 as *mut i8,
        );
    }
    if !ret.is_null() {
        let ref mut fresh14 = (*ret).ob_refcnt;
        *fresh14 -= 1;
        if !(*fresh14 != 0 as i32 as i64) {
            (Some(((*(*ret).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(ret);
        }
    }
    return 0 as i32;
}
unsafe extern "C" fn xmlOutputBufferCreatePythonFile(
<<<<<<< HEAD
    mut file: *mut PyObject,
    mut encoder: xmlCharEncodingHandlerPtr,
) -> xmlOutputBufferPtr {
    let mut ret: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
=======
    mut file: * mut crate::src::python::libxml::_object,
    mut encoder: * mut crate::src::python::libxml::_xmlCharEncodingHandler,
) -> * mut crate::src::python::libxml::_xmlOutputBuffer {
    let mut ret: * mut crate::src::python::libxml::_xmlOutputBuffer = 0 as *mut xmlOutputBuffer;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if file.is_null() {
        return 0 as xmlOutputBufferPtr;
    }
    ret = xmlAllocOutputBuffer(encoder);
    if !ret.is_null() {
        let ref mut fresh15 = (*ret).context;
        *fresh15 = file as *mut libc::c_void;
        let ref mut fresh16 = (*ret).writecallback;
        *fresh16 = Some(
<<<<<<< HEAD
            xmlPythonFileWrite
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    i32,
                ) -> i32,
        );
        let ref mut fresh17 = (*ret).closecallback;
        *fresh17 = Some(
            xmlPythonFileClose as unsafe extern "C" fn(*mut libc::c_void) -> i32,
=======
            xmlPythonFileWrite,
        );
        let ref mut fresh17 = (*ret).closecallback;
        *fresh17 = Some(
            xmlPythonFileClose,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        );
    }
    return ret;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlCreateOutputBuffer(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut encoding: *mut xmlChar = 0 as *mut xmlChar;
    let mut handler: xmlCharEncodingHandlerPtr = 0 as xmlCharEncodingHandlerPtr;
    let mut buffer: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut file: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut encoding: * mut u8 = 0 as *mut xmlChar;
    let mut handler: * mut crate::src::python::libxml::_xmlCharEncodingHandler = 0 as xmlCharEncodingHandlerPtr;
    let mut buffer: * mut crate::src::python::libxml::_xmlOutputBuffer = 0 as *mut xmlOutputBuffer;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"Oz:xmlOutputBufferCreate\0" as *const u8 as *const i8
            as *mut i8,
        &mut file as *mut *mut PyObject,
        &mut encoding as *mut *mut xmlChar,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    if !encoding.is_null()
        && *encoding.offset(0 as i32 as isize) as i32 != 0 as i32
    {
        handler = xmlFindCharEncodingHandler(encoding as *const i8);
    }
    buffer = xmlOutputBufferCreatePythonFile(file, handler);
    if buffer.is_null() {
        printf(
            b"libxml_xmlCreateOutputBuffer: buffer == NULL\n\0" as *const u8
                as *const i8,
        );
    }
    py_retval = libxml_xmlOutputBufferPtrWrap(buffer);
    return py_retval;
}
unsafe extern "C" fn libxml_outputBufferGetPythonFile(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut buffer: *mut PyObject = 0 as *mut PyObject;
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut obj: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut buffer: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut file: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_xmlOutputBuffer = 0 as *mut xmlOutputBuffer;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:outputBufferGetPythonFile\0" as *const u8 as *const i8
            as *mut i8,
        &mut buffer as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    obj = if buffer == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlOutputBufferPtr
    } else {
        (*(buffer as *mut PyoutputBuffer_Object)).obj
    };
    if obj.is_null() {
        fprintf(
            stderr,
            b"outputBufferGetPythonFile: obj == NULL\n\0" as *const u8
                as *const i8,
        );
<<<<<<< HEAD
        let ref mut fresh18 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh18 += 1;
        return &mut _Py_NoneStruct;
    }
    if (*obj).closecallback
        != Some(
            xmlPythonFileClose as unsafe extern "C" fn(*mut libc::c_void) -> i32,
        )
=======
        let ref mut fresh18 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
        *fresh18 += 1;
        return &mut _Py_NoneStruct;
    }
    if ((*obj).closecallback
        ).map(|f| f as usize) == ( Some(
            xmlPythonFileClose,
        )).map(|f| f as usize)
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    {
        fprintf(
            stderr,
            b"outputBufferGetPythonFile: not a python file wrapper\n\0" as *const u8
                as *const i8,
        );
<<<<<<< HEAD
        let ref mut fresh19 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh19 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh19 += 1;
        return &mut _Py_NoneStruct;
    }
    file = (*obj).context as *mut PyObject;
    if file.is_null() {
<<<<<<< HEAD
        let ref mut fresh20 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh20 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh20 += 1;
        return &mut _Py_NoneStruct;
    }
    let ref mut fresh21 = (*file).ob_refcnt;
    *fresh21 += 1;
    return file;
}
unsafe extern "C" fn libxml_xmlOutputBufferClose(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: i32 = 0;
    let mut out: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut pyobj_out: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut c_retval: i32 = 0;
    let mut out: * mut crate::src::python::libxml::_xmlOutputBuffer = 0 as *mut xmlOutputBuffer;
    let mut pyobj_out: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:xmlOutputBufferClose\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_out as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    out = if pyobj_out == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlOutputBufferPtr
    } else {
        (*(pyobj_out as *mut PyoutputBuffer_Object)).obj
    };
    if out.is_null() {
<<<<<<< HEAD
        let ref mut fresh22 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh22 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh22 += 1;
        return &mut _Py_NoneStruct;
    }
    c_retval = xmlOutputBufferClose(out);
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlOutputBufferFlush(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: i32 = 0;
    let mut out: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut pyobj_out: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut c_retval: i32 = 0;
    let mut out: * mut crate::src::python::libxml::_xmlOutputBuffer = 0 as *mut xmlOutputBuffer;
    let mut pyobj_out: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:xmlOutputBufferFlush\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_out as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    out = if pyobj_out == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlOutputBufferPtr
    } else {
        (*(pyobj_out as *mut PyoutputBuffer_Object)).obj
    };
    c_retval = xmlOutputBufferFlush(out);
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlSaveFileTo(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: i32 = 0;
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut pyobj_buf: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlDocPtr = 0 as *mut xmlDoc;
    let mut pyobj_cur: *mut PyObject = 0 as *mut PyObject;
    let mut encoding: *mut i8 = 0 as *mut i8;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut c_retval: i32 = 0;
    let mut buf: * mut crate::src::python::libxml::_xmlOutputBuffer = 0 as *mut xmlOutputBuffer;
    let mut pyobj_buf: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_xmlDoc = 0 as *mut xmlDoc;
    let mut pyobj_cur: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut encoding: * mut i8 = 0 as *mut i8;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OOz:xmlSaveFileTo\0" as *const u8 as *const i8 as *mut i8,
        &mut pyobj_buf as *mut *mut PyObject,
        &mut pyobj_cur as *mut *mut PyObject,
        &mut encoding as *mut *mut i8,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    buf = if pyobj_buf == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlOutputBufferPtr
    } else {
        (*(pyobj_buf as *mut PyoutputBuffer_Object)).obj
    };
    cur = (if pyobj_cur == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(pyobj_cur as *mut PyxmlNode_Object)).obj
    }) as xmlDocPtr;
    c_retval = xmlSaveFileTo(buf, cur, encoding);
    let ref mut fresh23 = (*(pyobj_buf as *mut PyoutputBuffer_Object)).obj;
    *fresh23 = 0 as xmlOutputBufferPtr;
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlSaveFormatFileTo(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: i32 = 0;
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut pyobj_buf: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlDocPtr = 0 as *mut xmlDoc;
    let mut pyobj_cur: *mut PyObject = 0 as *mut PyObject;
    let mut encoding: *mut i8 = 0 as *mut i8;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut c_retval: i32 = 0;
    let mut buf: * mut crate::src::python::libxml::_xmlOutputBuffer = 0 as *mut xmlOutputBuffer;
    let mut pyobj_buf: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_xmlDoc = 0 as *mut xmlDoc;
    let mut pyobj_cur: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut encoding: * mut i8 = 0 as *mut i8;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut format: i32 = 0;
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OOzi:xmlSaveFormatFileTo\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_buf as *mut *mut PyObject,
        &mut pyobj_cur as *mut *mut PyObject,
        &mut encoding as *mut *mut i8,
        &mut format as *mut i32,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    buf = if pyobj_buf == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlOutputBufferPtr
    } else {
        (*(pyobj_buf as *mut PyoutputBuffer_Object)).obj
    };
    cur = (if pyobj_cur == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(pyobj_cur as *mut PyxmlNode_Object)).obj
    }) as xmlDocPtr;
    c_retval = xmlSaveFormatFileTo(buf, cur, encoding, format);
    let ref mut fresh24 = (*(pyobj_buf as *mut PyoutputBuffer_Object)).obj;
    *fresh24 = 0 as xmlOutputBufferPtr;
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
unsafe extern "C" fn xmlParserInputBufferCreatePythonFile(
<<<<<<< HEAD
    mut file: *mut PyObject,
    mut encoding: xmlCharEncoding,
) -> xmlParserInputBufferPtr {
    let mut ret: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
=======
    mut file: * mut crate::src::python::libxml::_object,
    mut encoding: i32,
) -> * mut crate::src::python::libxml::_xmlParserInputBuffer {
    let mut ret: * mut crate::src::python::libxml::_xmlParserInputBuffer = 0 as *mut xmlParserInputBuffer;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if file.is_null() {
        return 0 as xmlParserInputBufferPtr;
    }
    ret = xmlAllocParserInputBuffer(encoding);
    if !ret.is_null() {
        let ref mut fresh25 = (*ret).context;
        *fresh25 = file as *mut libc::c_void;
        let ref mut fresh26 = (*ret).readcallback;
        *fresh26 = Some(
<<<<<<< HEAD
            xmlPythonFileRead
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *mut i8,
                    i32,
                ) -> i32,
        );
        let ref mut fresh27 = (*ret).closecallback;
        *fresh27 = Some(
            xmlPythonFileClose as unsafe extern "C" fn(*mut libc::c_void) -> i32,
=======
            xmlPythonFileRead,
        );
        let ref mut fresh27 = (*ret).closecallback;
        *fresh27 = Some(
            xmlPythonFileClose,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        );
    }
    return ret;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlCreateInputBuffer(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut file: *mut PyObject = 0 as *mut PyObject;
    let mut encoding: *mut xmlChar = 0 as *mut xmlChar;
    let mut enc: xmlCharEncoding = XML_CHAR_ENCODING_NONE;
    let mut buffer: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut file: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut encoding: * mut u8 = 0 as *mut xmlChar;
    let mut enc: i32 = XML_CHAR_ENCODING_NONE;
    let mut buffer: * mut crate::src::python::libxml::_xmlParserInputBuffer = 0 as *mut xmlParserInputBuffer;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"Oz:xmlParserInputBufferCreate\0" as *const u8 as *const i8
            as *mut i8,
        &mut file as *mut *mut PyObject,
        &mut encoding as *mut *mut xmlChar,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    if !encoding.is_null()
        && *encoding.offset(0 as i32 as isize) as i32 != 0 as i32
    {
        enc = xmlParseCharEncoding(encoding as *const i8);
    }
    buffer = xmlParserInputBufferCreatePythonFile(file, enc);
    if buffer.is_null() {
        printf(
            b"libxml_xmlParserInputBufferCreate: buffer == NULL\n\0" as *const u8
                as *const i8,
        );
    }
    py_retval = libxml_xmlParserInputBufferPtrWrap(buffer);
    return py_retval;
}
<<<<<<< HEAD
static mut defaultExternalEntityLoader: xmlExternalEntityLoader = None;
static mut pythonExternalEntityLoaderObjext: *mut PyObject = 0 as *const PyObject
    as *mut PyObject;
unsafe extern "C" fn pythonExternalEntityLoader(
    mut URL: *const i8,
    mut ID: *const i8,
    mut ctxt: xmlParserCtxtPtr,
) -> xmlParserInputPtr {
    let mut result: xmlParserInputPtr = 0 as xmlParserInputPtr;
    if !pythonExternalEntityLoaderObjext.is_null() {
        let mut ret: *mut PyObject = 0 as *mut PyObject;
        let mut ctxtobj: *mut PyObject = 0 as *mut PyObject;
=======
static mut defaultExternalEntityLoader: Option<unsafe extern "C"  fn(_: * const i8,_: * const i8,_: * mut crate::src::python::libxml::_xmlParserCtxt,) -> * mut crate::src::python::libxml::_xmlParserInput> = None;
static mut pythonExternalEntityLoaderObjext: * mut crate::src::python::libxml::_object = 0 as *const PyObject
    as *mut PyObject;
unsafe extern "C" fn pythonExternalEntityLoader(
    mut URL: * const i8,
    mut ID: * const i8,
    mut ctxt: * mut crate::src::python::libxml::_xmlParserCtxt,
) -> * mut crate::src::python::libxml::_xmlParserInput {
    let mut result: * mut crate::src::python::libxml::_xmlParserInput = 0 as xmlParserInputPtr;
    if !pythonExternalEntityLoaderObjext.is_null() {
        let mut ret: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
        let mut ctxtobj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        ctxtobj = libxml_xmlParserCtxtPtrWrap(ctxt);
        ret = _PyObject_CallFunction_SizeT(
            pythonExternalEntityLoaderObjext,
            b"(ssO)\0" as *const u8 as *const i8 as *mut i8,
            URL,
            ID,
            ctxtobj,
        );
        if !ctxtobj.is_null() {
            let ref mut fresh28 = (*ctxtobj).ob_refcnt;
            *fresh28 -= 1;
            if !(*fresh28 != 0 as i32 as i64) {
                (Some(
                    ((*(*ctxtobj).ob_type).tp_dealloc)
                        .expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(ctxtobj);
            }
        }
        if !ret.is_null() {
            if PyObject_HasAttrString(
                ret,
                b"read\0" as *const u8 as *const i8 as *mut i8,
            ) != 0
            {
<<<<<<< HEAD
                let mut buf: xmlParserInputBufferPtr = 0 as *mut xmlParserInputBuffer;
=======
                let mut buf: * mut crate::src::python::libxml::_xmlParserInputBuffer = 0 as *mut xmlParserInputBuffer;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                buf = xmlAllocParserInputBuffer(XML_CHAR_ENCODING_NONE);
                if !buf.is_null() {
                    let ref mut fresh29 = (*buf).context;
                    *fresh29 = ret as *mut libc::c_void;
                    let ref mut fresh30 = (*buf).readcallback;
                    *fresh30 = Some(
<<<<<<< HEAD
                        xmlPythonFileReadRaw
                            as unsafe extern "C" fn(
                                *mut libc::c_void,
                                *mut i8,
                                i32,
                            ) -> i32,
                    );
                    let ref mut fresh31 = (*buf).closecallback;
                    *fresh31 = Some(
                        xmlPythonFileCloseRaw
                            as unsafe extern "C" fn(*mut libc::c_void) -> i32,
=======
                        xmlPythonFileReadRaw,
                    );
                    let ref mut fresh31 = (*buf).closecallback;
                    *fresh31 = Some(
                        xmlPythonFileCloseRaw,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                    );
                    result = xmlNewIOInputStream(ctxt, buf, XML_CHAR_ENCODING_NONE);
                }
            }
            if result.is_null() {
                let ref mut fresh32 = (*ret).ob_refcnt;
                *fresh32 -= 1;
                if !(*fresh32 != 0 as i32 as i64) {
                    (Some(
                        ((*(*ret).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")(ret);
                }
            } else if !URL.is_null() {
                let ref mut fresh33 = (*result).filename;
                *fresh33 = xmlStrdup(URL as *const xmlChar) as *mut i8;
                let ref mut fresh34 = (*result).directory;
                *fresh34 = xmlParserGetDirectory(URL);
            }
        }
    }
    if result.is_null() && defaultExternalEntityLoader.is_some() {
        result = defaultExternalEntityLoader
            .expect("non-null function pointer")(URL, ID, ctxt);
    }
    return result;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlSetEntityLoader(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut loader: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut loader: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:libxml_xmlSetEntityLoader\0" as *const u8 as *const i8
            as *mut i8,
        &mut loader as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    if PyCallable_Check(loader) == 0 {
        PyErr_SetString(
            PyExc_ValueError,
            b"entity loader is not callable\0" as *const u8 as *const i8,
        );
        return 0 as *mut PyObject;
    }
    if defaultExternalEntityLoader.is_none() {
        defaultExternalEntityLoader = xmlGetExternalEntityLoader();
    }
    if !pythonExternalEntityLoaderObjext.is_null() {
        let ref mut fresh35 = (*pythonExternalEntityLoaderObjext).ob_refcnt;
        *fresh35 -= 1;
        if !(*fresh35 != 0 as i32 as i64) {
            (Some(
                ((*(*pythonExternalEntityLoaderObjext).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")(pythonExternalEntityLoaderObjext);
        }
    }
    pythonExternalEntityLoaderObjext = loader;
    if !pythonExternalEntityLoaderObjext.is_null() {
        let ref mut fresh36 = (*pythonExternalEntityLoaderObjext).ob_refcnt;
        *fresh36 += 1;
    }
    xmlSetExternalEntityLoader(
        Some(
<<<<<<< HEAD
            pythonExternalEntityLoader
                as unsafe extern "C" fn(
                    *const i8,
                    *const i8,
                    xmlParserCtxtPtr,
                ) -> xmlParserInputPtr,
=======
            pythonExternalEntityLoader,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        ),
    );
    py_retval = PyLong_FromLong(0 as i32 as i64);
    return py_retval;
}
<<<<<<< HEAD
static mut pythonInputOpenCallbackObject: *mut PyObject = 0 as *const PyObject
    as *mut PyObject;
static mut pythonInputCallbackID: i32 = -(1 as i32);
unsafe extern "C" fn pythonInputMatchCallback(
    mut URI: *const i8,
=======
static mut pythonInputOpenCallbackObject: * mut crate::src::python::libxml::_object = 0 as *const PyObject
    as *mut PyObject;
static mut pythonInputCallbackID: i32 = -(1 as i32);
 extern "C" fn pythonInputMatchCallback(
    mut URI: * const i8,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
) -> i32 {
    return 1 as i32;
}
unsafe extern "C" fn pythonInputOpenCallback(
<<<<<<< HEAD
    mut URI: *const i8,
) -> *mut libc::c_void {
    let mut ret: *mut PyObject = 0 as *mut PyObject;
=======
    mut URI: * const i8,
) -> * mut core::ffi::c_void {
    let mut ret: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ret = _PyObject_CallFunction_SizeT(
        pythonInputOpenCallbackObject,
        b"s\0" as *const u8 as *const i8 as *mut i8,
        URI,
    );
    if ret == &mut _Py_NoneStruct as *mut PyObject {
<<<<<<< HEAD
        let ref mut fresh37 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
        *fresh37 -= 1;
        if !(*fresh37 != 0 as i32 as i64) {
            (Some(
                ((*(*(&mut _Py_NoneStruct as *mut PyObject)).ob_type).tp_dealloc)
=======
        let ref mut fresh37 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
        *fresh37 -= 1;
        if !(*fresh37 != 0 as i32 as i64) {
            (Some(
                ((*(*((Some(&mut _Py_NoneStruct))).unwrap()).ob_type).tp_dealloc)
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                    .expect("non-null function pointer"),
            ))
                .expect(
                    "non-null function pointer",
                )(&mut _Py_NoneStruct as *mut PyObject);
        }
        return 0 as *mut libc::c_void;
    }
    return ret as *mut libc::c_void;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlRegisterInputCallback(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut cb: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut cb: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:libxml_xmlRegisterInputCallback\0" as *const u8 as *const i8,
        &mut cb as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    if PyCallable_Check(cb) == 0 {
        PyErr_SetString(
            PyExc_ValueError,
            b"input callback is not callable\0" as *const u8 as *const i8,
        );
        return 0 as *mut PyObject;
    }
    if pythonInputCallbackID == -(1 as i32) {
        pythonInputCallbackID = xmlRegisterInputCallbacks(
            Some(
<<<<<<< HEAD
                pythonInputMatchCallback
                    as unsafe extern "C" fn(*const i8) -> i32,
            ),
            Some(
                pythonInputOpenCallback
                    as unsafe extern "C" fn(*const i8) -> *mut libc::c_void,
            ),
            Some(
                xmlPythonFileReadRaw
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *mut i8,
                        i32,
                    ) -> i32,
            ),
            Some(
                xmlPythonFileCloseRaw
                    as unsafe extern "C" fn(*mut libc::c_void) -> i32,
=======
                pythonInputMatchCallback,
            ),
            Some(
                pythonInputOpenCallback,
            ),
            Some(
                xmlPythonFileReadRaw,
            ),
            Some(
                xmlPythonFileCloseRaw,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            ),
        );
        if pythonInputCallbackID == -(1 as i32) {
            return PyErr_NoMemory();
        }
        pythonInputOpenCallbackObject = cb;
        let ref mut fresh38 = (*pythonInputOpenCallbackObject).ob_refcnt;
        *fresh38 += 1;
    }
<<<<<<< HEAD
    let ref mut fresh39 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
    let ref mut fresh39 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    *fresh39 += 1;
    return &mut _Py_NoneStruct;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlUnregisterInputCallback(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut ret: i32 = 0;
    ret = xmlPopInputCallbacks();
    if pythonInputCallbackID != -(1 as i32) {
        if pythonInputCallbackID == ret {
            pythonInputCallbackID = -(1 as i32);
            let ref mut fresh40 = (*pythonInputOpenCallbackObject).ob_refcnt;
            *fresh40 -= 1;
            if !(*fresh40 != 0 as i32 as i64) {
                (Some(
                    ((*(*pythonInputOpenCallbackObject).ob_type).tp_dealloc)
                        .expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(pythonInputOpenCallbackObject);
            }
            pythonInputOpenCallbackObject = 0 as *mut PyObject;
        } else {
            PyErr_SetString(
                PyExc_AssertionError,
                b"popped non-python input callback\0" as *const u8 as *const i8,
            );
            return 0 as *mut PyObject;
        }
    } else if ret == -(1 as i32) {
        PyErr_SetString(
            PyExc_IndexError,
            b"no input callbacks to pop\0" as *const u8 as *const i8,
        );
        return 0 as *mut PyObject;
    }
<<<<<<< HEAD
    let ref mut fresh41 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
    let ref mut fresh41 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    *fresh41 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn pythonStartElement(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut name: *const xmlChar,
    mut attrs: *mut *const xmlChar,
) {
    let mut i: i32 = 0;
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut dict: *mut PyObject = 0 as *mut PyObject;
    let mut attrname: *mut PyObject = 0 as *mut PyObject;
    let mut attrvalue: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut name: * const u8,
    mut attrs: * mut * const u8,
) {
    let mut i: i32 = 0;
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut dict: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut attrname: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut attrvalue: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut type_0: i32 = 0 as i32;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"startElement\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        type_0 = 1 as i32;
    } else if PyObject_HasAttrString(
            handler,
            b"start\0" as *const u8 as *const i8 as *mut i8,
        ) != 0
        {
        type_0 = 2 as i32;
    }
    if type_0 != 0 as i32 {
        if attrs.is_null() && type_0 == 1 as i32 {
<<<<<<< HEAD
            if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
                let ref mut fresh42 = (*(&mut _Py_NoneStruct as *mut PyObject))
=======
            if !(Some(&mut _Py_NoneStruct)).is_none() {
                let ref mut fresh42 = (*((Some(&mut _Py_NoneStruct))).unwrap())
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                    .ob_refcnt;
                *fresh42 += 1;
            }
            dict = &mut _Py_NoneStruct;
        } else if attrs.is_null() {
            dict = PyDict_New();
        } else {
            dict = PyDict_New();
            i = 0 as i32;
            while !(*attrs.offset(i as isize)).is_null() {
                attrname = PyString_FromString(
                    *attrs.offset(i as isize) as *mut i8,
                );
                i += 1;
                if !(*attrs.offset(i as isize)).is_null() {
                    attrvalue = PyString_FromString(
                        *attrs.offset(i as isize) as *mut i8,
                    );
                } else {
<<<<<<< HEAD
                    if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
                        let ref mut fresh43 = (*(&mut _Py_NoneStruct as *mut PyObject))
=======
                    if !(Some(&mut _Py_NoneStruct)).is_none() {
                        let ref mut fresh43 = (*((Some(&mut _Py_NoneStruct))).unwrap())
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                            .ob_refcnt;
                        *fresh43 += 1;
                    }
                    attrvalue = &mut _Py_NoneStruct;
                }
                PyDict_SetItem(dict, attrname, attrvalue);
                let ref mut fresh44 = (*attrname).ob_refcnt;
                *fresh44 -= 1;
                if !(*fresh44 != 0 as i32 as i64) {
                    (Some(
                        ((*(*attrname).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")(attrname);
                }
                let ref mut fresh45 = (*attrvalue).ob_refcnt;
                *fresh45 -= 1;
                if !(*fresh45 != 0 as i32 as i64) {
                    (Some(
                        ((*(*attrvalue).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")(attrvalue);
                }
                i += 1;
            }
        }
        if type_0 == 1 as i32 {
            result = _PyObject_CallMethod_SizeT(
                handler,
                b"startElement\0" as *const u8 as *const i8
                    as *mut i8,
                b"sO\0" as *const u8 as *const i8 as *mut i8,
                name,
                dict,
            );
        } else if type_0 == 2 as i32 {
            result = _PyObject_CallMethod_SizeT(
                handler,
                b"start\0" as *const u8 as *const i8 as *mut i8,
                b"sO\0" as *const u8 as *const i8 as *mut i8,
                name,
                dict,
            );
        }
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !dict.is_null() {
            let ref mut fresh46 = (*dict).ob_refcnt;
            *fresh46 -= 1;
            if !(*fresh46 != 0 as i32 as i64) {
                (Some(
                    ((*(*dict).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(dict);
            }
        }
        if !result.is_null() {
            let ref mut fresh47 = (*result).ob_refcnt;
            *fresh47 -= 1;
            if !(*fresh47 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
<<<<<<< HEAD
unsafe extern "C" fn pythonStartDocument(mut user_data: *mut libc::c_void) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
unsafe extern "C" fn pythonStartDocument(mut user_data: * mut core::ffi::c_void) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"startDocument\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"startDocument\0" as *const u8 as *const i8 as *mut i8,
            0 as *mut i8,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh48 = (*result).ob_refcnt;
            *fresh48 -= 1;
            if !(*fresh48 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
<<<<<<< HEAD
unsafe extern "C" fn pythonEndDocument(mut user_data: *mut libc::c_void) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
unsafe extern "C" fn pythonEndDocument(mut user_data: * mut core::ffi::c_void) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"endDocument\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"endDocument\0" as *const u8 as *const i8 as *mut i8,
            0 as *mut i8,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh49 = (*result).ob_refcnt;
            *fresh49 -= 1;
            if !(*fresh49 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
    if !handler.is_null() {
        let ref mut fresh50 = (*handler).ob_refcnt;
        *fresh50 -= 1;
        if !(*fresh50 != 0 as i32 as i64) {
            (Some(
                ((*(*handler).ob_type).tp_dealloc).expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")(handler);
        }
    }
}
unsafe extern "C" fn pythonEndElement(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut name: *const xmlChar,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut name: * const u8,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"endElement\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"endElement\0" as *const u8 as *const i8 as *mut i8,
            b"s\0" as *const u8 as *const i8 as *mut i8,
            name,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh51 = (*result).ob_refcnt;
            *fresh51 -= 1;
            if !(*fresh51 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    } else if PyObject_HasAttrString(
            handler,
            b"end\0" as *const u8 as *const i8 as *mut i8,
        ) != 0
        {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"end\0" as *const u8 as *const i8 as *mut i8,
            b"s\0" as *const u8 as *const i8 as *mut i8,
            name,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh52 = (*result).ob_refcnt;
            *fresh52 -= 1;
            if !(*fresh52 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonReference(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut name: *const xmlChar,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut name: * const u8,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"reference\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"reference\0" as *const u8 as *const i8 as *mut i8,
            b"s\0" as *const u8 as *const i8 as *mut i8,
            name,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh53 = (*result).ob_refcnt;
            *fresh53 -= 1;
            if !(*fresh53 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonCharacters(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut ch: *const xmlChar,
    mut len: i32,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut ch: * const u8,
    mut len: i32,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut type_0: i32 = 0 as i32;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"characters\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        type_0 = 1 as i32;
    } else if PyObject_HasAttrString(
            handler,
            b"data\0" as *const u8 as *const i8 as *mut i8,
        ) != 0
        {
        type_0 = 2 as i32;
    }
    if type_0 != 0 as i32 {
        if type_0 == 1 as i32 {
            result = _PyObject_CallMethod_SizeT(
                handler,
                b"characters\0" as *const u8 as *const i8 as *mut i8,
                b"s#\0" as *const u8 as *const i8 as *mut i8,
                ch,
                len as Py_ssize_t,
            );
        } else if type_0 == 2 as i32 {
            result = _PyObject_CallMethod_SizeT(
                handler,
                b"data\0" as *const u8 as *const i8 as *mut i8,
                b"s#\0" as *const u8 as *const i8 as *mut i8,
                ch,
                len as Py_ssize_t,
            );
        }
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh54 = (*result).ob_refcnt;
            *fresh54 -= 1;
            if !(*fresh54 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonIgnorableWhitespace(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut ch: *const xmlChar,
    mut len: i32,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut ch: * const u8,
    mut len: i32,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut type_0: i32 = 0 as i32;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"ignorableWhitespace\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        type_0 = 1 as i32;
    } else if PyObject_HasAttrString(
            handler,
            b"data\0" as *const u8 as *const i8 as *mut i8,
        ) != 0
        {
        type_0 = 2 as i32;
    }
    if type_0 != 0 as i32 {
        if type_0 == 1 as i32 {
            result = _PyObject_CallMethod_SizeT(
                handler,
                b"ignorableWhitespace\0" as *const u8 as *const i8
                    as *mut i8,
                b"s#\0" as *const u8 as *const i8 as *mut i8,
                ch,
                len as Py_ssize_t,
            );
        } else if type_0 == 2 as i32 {
            result = _PyObject_CallMethod_SizeT(
                handler,
                b"data\0" as *const u8 as *const i8 as *mut i8,
                b"s#\0" as *const u8 as *const i8 as *mut i8,
                ch,
                len as Py_ssize_t,
            );
        }
        if !result.is_null() {
            let ref mut fresh55 = (*result).ob_refcnt;
            *fresh55 -= 1;
            if !(*fresh55 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonProcessingInstruction(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut target: *const xmlChar,
    mut data: *const xmlChar,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut target: * const u8,
    mut data: * const u8,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"processingInstruction\0" as *const u8 as *const i8
            as *mut i8,
    ) != 0
    {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"processingInstruction\0" as *const u8 as *const i8
                as *mut i8,
            b"ss\0" as *const u8 as *const i8 as *mut i8,
            target,
            data,
        );
        if !result.is_null() {
            let ref mut fresh56 = (*result).ob_refcnt;
            *fresh56 -= 1;
            if !(*fresh56 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonComment(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut value: *const xmlChar,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut value: * const u8,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"comment\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"comment\0" as *const u8 as *const i8 as *mut i8,
            b"s\0" as *const u8 as *const i8 as *mut i8,
            value,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh57 = (*result).ob_refcnt;
            *fresh57 -= 1;
            if !(*fresh57 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonWarning(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut args_0: ::std::ffi::VaListImpl;
=======
    mut user_data: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut args_0: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut buf: [i8; 1024] = [0; 1024];
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"warning\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        args_0 = args.clone();
        vsnprintf(
            buf.as_mut_ptr(),
            1023 as i32 as u64,
            msg,
            args_0.as_va_list(),
        );
        buf[1023 as i32 as usize] = 0 as i32 as i8;
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"warning\0" as *const u8 as *const i8 as *mut i8,
            b"s\0" as *const u8 as *const i8 as *mut i8,
            buf.as_mut_ptr(),
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh58 = (*result).ob_refcnt;
            *fresh58 -= 1;
            if !(*fresh58 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonError(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut args_0: ::std::ffi::VaListImpl;
=======
    mut user_data: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut args_0: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut buf: [i8; 1024] = [0; 1024];
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"error\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        args_0 = args.clone();
        vsnprintf(
            buf.as_mut_ptr(),
            1023 as i32 as u64,
            msg,
            args_0.as_va_list(),
        );
        buf[1023 as i32 as usize] = 0 as i32 as i8;
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"error\0" as *const u8 as *const i8 as *mut i8,
            b"s\0" as *const u8 as *const i8 as *mut i8,
            buf.as_mut_ptr(),
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh59 = (*result).ob_refcnt;
            *fresh59 -= 1;
            if !(*fresh59 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonFatalError(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut args_0: ::std::ffi::VaListImpl;
=======
    mut user_data: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut args_0: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut buf: [i8; 1024] = [0; 1024];
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"fatalError\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        args_0 = args.clone();
        vsnprintf(
            buf.as_mut_ptr(),
            1023 as i32 as u64,
            msg,
            args_0.as_va_list(),
        );
        buf[1023 as i32 as usize] = 0 as i32 as i8;
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"fatalError\0" as *const u8 as *const i8 as *mut i8,
            b"s\0" as *const u8 as *const i8 as *mut i8,
            buf.as_mut_ptr(),
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh60 = (*result).ob_refcnt;
            *fresh60 -= 1;
            if !(*fresh60 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonCdataBlock(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut ch: *const xmlChar,
    mut len: i32,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut ch: * const u8,
    mut len: i32,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut type_0: i32 = 0 as i32;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"cdataBlock\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        type_0 = 1 as i32;
    } else if PyObject_HasAttrString(
            handler,
            b"cdata\0" as *const u8 as *const i8 as *mut i8,
        ) != 0
        {
        type_0 = 2 as i32;
    }
    if type_0 != 0 as i32 {
        if type_0 == 1 as i32 {
            result = _PyObject_CallMethod_SizeT(
                handler,
                b"cdataBlock\0" as *const u8 as *const i8 as *mut i8,
                b"s#\0" as *const u8 as *const i8 as *mut i8,
                ch,
                len as Py_ssize_t,
            );
        } else if type_0 == 2 as i32 {
            result = _PyObject_CallMethod_SizeT(
                handler,
                b"cdata\0" as *const u8 as *const i8 as *mut i8,
                b"s#\0" as *const u8 as *const i8 as *mut i8,
                ch,
                len as Py_ssize_t,
            );
        }
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh61 = (*result).ob_refcnt;
            *fresh61 -= 1;
            if !(*fresh61 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonExternalSubset(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut name: *const xmlChar,
    mut externalID: *const xmlChar,
    mut systemID: *const xmlChar,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut name: * const u8,
    mut externalID: * const u8,
    mut systemID: * const u8,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"externalSubset\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"externalSubset\0" as *const u8 as *const i8 as *mut i8,
            b"sss\0" as *const u8 as *const i8 as *mut i8,
            name,
            externalID,
            systemID,
        );
        if !result.is_null() {
            let ref mut fresh62 = (*result).ob_refcnt;
            *fresh62 -= 1;
            if !(*fresh62 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonEntityDecl(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut name: *const xmlChar,
    mut type_0: i32,
    mut publicId: *const xmlChar,
    mut systemId: *const xmlChar,
    mut content: *mut xmlChar,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut name: * const u8,
    mut type_0: i32,
    mut publicId: * const u8,
    mut systemId: * const u8,
    mut content: * mut u8,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"entityDecl\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"entityDecl\0" as *const u8 as *const i8 as *mut i8,
            b"sisss\0" as *const u8 as *const i8 as *mut i8,
            name,
            type_0,
            publicId,
            systemId,
            content,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh63 = (*result).ob_refcnt;
            *fresh63 -= 1;
            if !(*fresh63 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonNotationDecl(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut name: *const xmlChar,
    mut publicId: *const xmlChar,
    mut systemId: *const xmlChar,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut name: * const u8,
    mut publicId: * const u8,
    mut systemId: * const u8,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"notationDecl\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"notationDecl\0" as *const u8 as *const i8 as *mut i8,
            b"sss\0" as *const u8 as *const i8 as *mut i8,
            name,
            publicId,
            systemId,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh64 = (*result).ob_refcnt;
            *fresh64 -= 1;
            if !(*fresh64 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonAttributeDecl(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut elem: *const xmlChar,
    mut name: *const xmlChar,
    mut type_0: i32,
    mut def: i32,
    mut defaultValue: *const xmlChar,
    mut tree: xmlEnumerationPtr,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut nameList: *mut PyObject = 0 as *mut PyObject;
    let mut newName: *mut PyObject = 0 as *mut PyObject;
    let mut node: xmlEnumerationPtr = 0 as *mut xmlEnumeration;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut elem: * const u8,
    mut name: * const u8,
    mut type_0: i32,
    mut def: i32,
    mut defaultValue: * const u8,
    mut tree: * mut crate::src::python::libxml::_xmlEnumeration,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut nameList: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut newName: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut node: * mut crate::src::python::libxml::_xmlEnumeration = 0 as *mut xmlEnumeration;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut count: i32 = 0;
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"attributeDecl\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        count = 0 as i32;
        node = tree;
        while !node.is_null() {
            count += 1;
            node = (*node).next;
        }
        nameList = PyList_New(count as Py_ssize_t);
        count = 0 as i32;
        node = tree;
        while !node.is_null() {
            newName = PyString_FromString((*node).name as *mut i8);
            PyList_SetItem(nameList, count as Py_ssize_t, newName);
            let ref mut fresh65 = (*newName).ob_refcnt;
            *fresh65 -= 1;
            if !(*fresh65 != 0 as i32 as i64) {
                (Some(
                    ((*(*newName).ob_type).tp_dealloc)
                        .expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(newName);
            }
            count += 1;
            node = (*node).next;
        }
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"attributeDecl\0" as *const u8 as *const i8 as *mut i8,
            b"ssiisO\0" as *const u8 as *const i8 as *mut i8,
            elem,
            name,
            type_0,
            def,
            defaultValue,
            nameList,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !nameList.is_null() {
            let ref mut fresh66 = (*nameList).ob_refcnt;
            *fresh66 -= 1;
            if !(*fresh66 != 0 as i32 as i64) {
                (Some(
                    ((*(*nameList).ob_type).tp_dealloc)
                        .expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(nameList);
            }
        }
        if !result.is_null() {
            let ref mut fresh67 = (*result).ob_refcnt;
            *fresh67 -= 1;
            if !(*fresh67 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonElementDecl(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut name: *const xmlChar,
    mut type_0: i32,
    mut content: xmlElementContentPtr,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut name: * const u8,
    mut type_0: i32,
    mut content: * mut crate::src::python::libxml::_xmlElementContent,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"elementDecl\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        printf(
            b"pythonElementDecl: xmlElementContentPtr wrapper missing !\n\0" as *const u8
                as *const i8,
        );
        obj = &mut _Py_NoneStruct;
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"elementDecl\0" as *const u8 as *const i8 as *mut i8,
            b"siO\0" as *const u8 as *const i8 as *mut i8,
            name,
            type_0,
            obj,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh68 = (*result).ob_refcnt;
            *fresh68 -= 1;
            if !(*fresh68 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonUnparsedEntityDecl(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut name: *const xmlChar,
    mut publicId: *const xmlChar,
    mut systemId: *const xmlChar,
    mut notationName: *const xmlChar,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut name: * const u8,
    mut publicId: * const u8,
    mut systemId: * const u8,
    mut notationName: * const u8,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"unparsedEntityDecl\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"unparsedEntityDecl\0" as *const u8 as *const i8
                as *mut i8,
            b"ssss\0" as *const u8 as *const i8 as *mut i8,
            name,
            publicId,
            systemId,
            notationName,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh69 = (*result).ob_refcnt;
            *fresh69 -= 1;
            if !(*fresh69 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
unsafe extern "C" fn pythonInternalSubset(
<<<<<<< HEAD
    mut user_data: *mut libc::c_void,
    mut name: *const xmlChar,
    mut ExternalID: *const xmlChar,
    mut SystemID: *const xmlChar,
) {
    let mut handler: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut user_data: * mut core::ffi::c_void,
    mut name: * const u8,
    mut ExternalID: * const u8,
    mut SystemID: * const u8,
) {
    let mut handler: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    handler = user_data as *mut PyObject;
    if PyObject_HasAttrString(
        handler,
        b"internalSubset\0" as *const u8 as *const i8 as *mut i8,
    ) != 0
    {
        result = _PyObject_CallMethod_SizeT(
            handler,
            b"internalSubset\0" as *const u8 as *const i8 as *mut i8,
            b"sss\0" as *const u8 as *const i8 as *mut i8,
            name,
            ExternalID,
            SystemID,
        );
        if !(PyErr_Occurred()).is_null() {
            PyErr_Print();
        }
        if !result.is_null() {
            let ref mut fresh70 = (*result).ob_refcnt;
            *fresh70 -= 1;
            if !(*fresh70 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    }
}
<<<<<<< HEAD
static mut pythonSaxHandler: xmlSAXHandler = unsafe {
    {
        let mut init = _xmlSAXHandler {
            internalSubset: Some(
                pythonInternalSubset
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        *const xmlChar,
                        *const xmlChar,
                    ) -> (),
=======
static mut pythonSaxHandler: crate::src::python::libxml::_xmlSAXHandler = unsafe {
    {
        let mut init = _xmlSAXHandler {
            internalSubset: Some(
                pythonInternalSubset,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            ),
            isStandalone: None,
            hasInternalSubset: None,
            hasExternalSubset: None,
            resolveEntity: None,
            getEntity: None,
            entityDecl: Some(
<<<<<<< HEAD
                pythonEntityDecl
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        i32,
                        *const xmlChar,
                        *const xmlChar,
                        *mut xmlChar,
                    ) -> (),
            ),
            notationDecl: Some(
                pythonNotationDecl
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        *const xmlChar,
                        *const xmlChar,
                    ) -> (),
            ),
            attributeDecl: Some(
                pythonAttributeDecl
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        *const xmlChar,
                        i32,
                        i32,
                        *const xmlChar,
                        xmlEnumerationPtr,
                    ) -> (),
            ),
            elementDecl: Some(
                pythonElementDecl
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        i32,
                        xmlElementContentPtr,
                    ) -> (),
            ),
            unparsedEntityDecl: Some(
                pythonUnparsedEntityDecl
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        *const xmlChar,
                        *const xmlChar,
                        *const xmlChar,
                    ) -> (),
            ),
            setDocumentLocator: None,
            startDocument: Some(
                pythonStartDocument as unsafe extern "C" fn(*mut libc::c_void) -> (),
            ),
            endDocument: Some(
                pythonEndDocument as unsafe extern "C" fn(*mut libc::c_void) -> (),
            ),
            startElement: Some(
                pythonStartElement
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        *mut *const xmlChar,
                    ) -> (),
            ),
            endElement: Some(
                pythonEndElement
                    as unsafe extern "C" fn(*mut libc::c_void, *const xmlChar) -> (),
            ),
            reference: Some(
                pythonReference
                    as unsafe extern "C" fn(*mut libc::c_void, *const xmlChar) -> (),
            ),
            characters: Some(
                pythonCharacters
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        i32,
                    ) -> (),
            ),
            ignorableWhitespace: Some(
                pythonIgnorableWhitespace
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        i32,
                    ) -> (),
            ),
            processingInstruction: Some(
                pythonProcessingInstruction
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        *const xmlChar,
                    ) -> (),
            ),
            comment: Some(
                pythonComment
                    as unsafe extern "C" fn(*mut libc::c_void, *const xmlChar) -> (),
            ),
            warning: Some(
                pythonWarning
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const i8,
                        ...
                    ) -> (),
            ),
            error: Some(
                pythonError
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const i8,
                        ...
                    ) -> (),
            ),
            fatalError: Some(
                pythonFatalError
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const i8,
                        ...
                    ) -> (),
            ),
            getParameterEntity: None,
            cdataBlock: Some(
                pythonCdataBlock
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        i32,
                    ) -> (),
            ),
            externalSubset: Some(
                pythonExternalSubset
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const xmlChar,
                        *const xmlChar,
                        *const xmlChar,
                    ) -> (),
=======
                pythonEntityDecl,
            ),
            notationDecl: Some(
                pythonNotationDecl,
            ),
            attributeDecl: Some(
                pythonAttributeDecl,
            ),
            elementDecl: Some(
                pythonElementDecl,
            ),
            unparsedEntityDecl: Some(
                pythonUnparsedEntityDecl,
            ),
            setDocumentLocator: None,
            startDocument: Some(
                pythonStartDocument,
            ),
            endDocument: Some(
                pythonEndDocument,
            ),
            startElement: Some(
                pythonStartElement,
            ),
            endElement: Some(
                pythonEndElement,
            ),
            reference: Some(
                pythonReference,
            ),
            characters: Some(
                pythonCharacters,
            ),
            ignorableWhitespace: Some(
                pythonIgnorableWhitespace,
            ),
            processingInstruction: Some(
                pythonProcessingInstruction,
            ),
            comment: Some(
                pythonComment,
            ),
            warning: Some(
                pythonWarning,
            ),
            error: Some(
                pythonError,
            ),
            fatalError: Some(
                pythonFatalError,
            ),
            getParameterEntity: None,
            cdataBlock: Some(
                pythonCdataBlock,
            ),
            externalSubset: Some(
                pythonExternalSubset,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            ),
            initialized: 1 as i32 as u32,
            _private: 0 as *const libc::c_void as *mut libc::c_void,
            startElementNs: None,
            endElementNs: None,
            serror: None,
        };
        init
    }
};
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlCreatePushParser(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut chunk: *const i8 = 0 as *const i8;
    let mut size: i32 = 0;
    let mut URI: *const i8 = 0 as *const i8;
    let mut pyobj_SAX: *mut PyObject = 0 as *mut PyObject;
    let mut SAX: xmlSAXHandlerPtr = 0 as xmlSAXHandlerPtr;
    let mut ret: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyret: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut chunk: * const i8 = 0 as *const i8;
    let mut size: i32 = 0;
    let mut URI: * const i8 = 0 as *const i8;
    let mut pyobj_SAX: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut SAX: * mut crate::src::python::libxml::_xmlSAXHandler = 0 as xmlSAXHandlerPtr;
    let mut ret: * mut crate::src::python::libxml::_xmlParserCtxt = 0 as *mut xmlParserCtxt;
    let mut pyret: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"Oziz:xmlCreatePushParser\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_SAX as *mut *mut PyObject,
        &mut chunk as *mut *const i8,
        &mut size as *mut i32,
        &mut URI as *mut *const i8,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    if pyobj_SAX != &mut _Py_NoneStruct as *mut PyObject {
        SAX = &mut pythonSaxHandler;
        let ref mut fresh71 = (*pyobj_SAX).ob_refcnt;
        *fresh71 += 1;
    }
    ret = xmlCreatePushParserCtxt(SAX, pyobj_SAX as *mut libc::c_void, chunk, size, URI);
    pyret = libxml_xmlParserCtxtPtrWrap(ret);
    return pyret;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_htmlCreatePushParser(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut chunk: *const i8 = 0 as *const i8;
    let mut size: i32 = 0;
    let mut URI: *const i8 = 0 as *const i8;
    let mut pyobj_SAX: *mut PyObject = 0 as *mut PyObject;
    let mut SAX: xmlSAXHandlerPtr = 0 as xmlSAXHandlerPtr;
    let mut ret: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyret: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut chunk: * const i8 = 0 as *const i8;
    let mut size: i32 = 0;
    let mut URI: * const i8 = 0 as *const i8;
    let mut pyobj_SAX: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut SAX: * mut crate::src::python::libxml::_xmlSAXHandler = 0 as xmlSAXHandlerPtr;
    let mut ret: * mut crate::src::python::libxml::_xmlParserCtxt = 0 as *mut xmlParserCtxt;
    let mut pyret: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"Oziz:htmlCreatePushParser\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_SAX as *mut *mut PyObject,
        &mut chunk as *mut *const i8,
        &mut size as *mut i32,
        &mut URI as *mut *const i8,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    if pyobj_SAX != &mut _Py_NoneStruct as *mut PyObject {
        SAX = &mut pythonSaxHandler;
        let ref mut fresh72 = (*pyobj_SAX).ob_refcnt;
        *fresh72 += 1;
    }
    ret = htmlCreatePushParserCtxt(
        SAX,
        pyobj_SAX as *mut libc::c_void,
        chunk,
        size,
        URI,
        XML_CHAR_ENCODING_NONE,
    );
    pyret = libxml_xmlParserCtxtPtrWrap(ret);
    return pyret;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlSAXParseFile(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut recover: i32 = 0;
    let mut URI: *const i8 = 0 as *const i8;
    let mut pyobj_SAX: *mut PyObject = 0 as *mut PyObject;
    let mut SAX: xmlSAXHandlerPtr = 0 as xmlSAXHandlerPtr;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut recover: i32 = 0;
    let mut URI: * const i8 = 0 as *const i8;
    let mut pyobj_SAX: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut SAX: * mut crate::src::python::libxml::_xmlSAXHandler = 0 as xmlSAXHandlerPtr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"Osi:xmlSAXParseFile\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_SAX as *mut *mut PyObject,
        &mut URI as *mut *const i8,
        &mut recover as *mut i32,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    if pyobj_SAX == &mut _Py_NoneStruct as *mut PyObject {
<<<<<<< HEAD
        let ref mut fresh73 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh73 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh73 += 1;
        return &mut _Py_NoneStruct;
    }
    SAX = &mut pythonSaxHandler;
    let ref mut fresh74 = (*pyobj_SAX).ob_refcnt;
    *fresh74 += 1;
    xmlSAXUserParseFile(SAX, pyobj_SAX as *mut libc::c_void, URI);
<<<<<<< HEAD
    let ref mut fresh75 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
    let ref mut fresh75 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    *fresh75 += 1;
    return &mut _Py_NoneStruct;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_htmlSAXParseFile(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut URI: *const i8 = 0 as *const i8;
    let mut encoding: *const i8 = 0 as *const i8;
    let mut pyobj_SAX: *mut PyObject = 0 as *mut PyObject;
    let mut SAX: xmlSAXHandlerPtr = 0 as xmlSAXHandlerPtr;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut URI: * const i8 = 0 as *const i8;
    let mut encoding: * const i8 = 0 as *const i8;
    let mut pyobj_SAX: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut SAX: * mut crate::src::python::libxml::_xmlSAXHandler = 0 as xmlSAXHandlerPtr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"Osz:htmlSAXParseFile\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_SAX as *mut *mut PyObject,
        &mut URI as *mut *const i8,
        &mut encoding as *mut *const i8,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    if pyobj_SAX == &mut _Py_NoneStruct as *mut PyObject {
<<<<<<< HEAD
        let ref mut fresh76 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh76 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh76 += 1;
        return &mut _Py_NoneStruct;
    }
    SAX = &mut pythonSaxHandler;
    let ref mut fresh77 = (*pyobj_SAX).ob_refcnt;
    *fresh77 += 1;
    htmlSAXParseFile(URI, encoding, SAX, pyobj_SAX as *mut libc::c_void);
<<<<<<< HEAD
    let ref mut fresh78 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh78 += 1;
    return &mut _Py_NoneStruct;
}
static mut libxml_xmlPythonErrorFuncHandler: *mut PyObject = 0 as *const PyObject
    as *mut PyObject;
static mut libxml_xmlPythonErrorFuncCtxt: *mut PyObject = 0 as *const PyObject
    as *mut PyObject;
unsafe extern "C" fn libxml_buildMessage(
    mut msg: *const i8,
    mut ap: ::std::ffi::VaList,
) -> *mut i8 {
    let mut chars: i32 = 0;
    let mut str: *mut i8 = 0 as *mut i8;
=======
    let ref mut fresh78 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
    *fresh78 += 1;
    return &mut _Py_NoneStruct;
}
static mut libxml_xmlPythonErrorFuncHandler: * mut crate::src::python::libxml::_object = 0 as *const PyObject
    as *mut PyObject;
static mut libxml_xmlPythonErrorFuncCtxt: * mut crate::src::python::libxml::_object = 0 as *const PyObject
    as *mut PyObject;
unsafe extern "C" fn libxml_buildMessage(
    mut msg: * const i8,
    mut ap: core::ffi::VaList,
) -> * mut i8 {
    let mut chars: i32 = 0;
    let mut str: * mut i8 = 0 as *mut i8;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    str = xmlMalloc.expect("non-null function pointer")(1000 as i32 as size_t)
        as *mut i8;
    if str.is_null() {
        return 0 as *mut i8;
    }
    chars = vsnprintf(str, 999 as i32 as u64, msg, ap.as_va_list());
    if chars >= 998 as i32 {
        *str.offset(999 as i32 as isize) = 0 as i32 as i8;
    }
    return str;
}
unsafe extern "C" fn libxml_xmlErrorFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut ap: ::std::ffi::VaListImpl;
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut message: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut ctx: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut ap: core::ffi::VaListImpl;
    let mut list: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut message: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut str: [i8; 1000] = [0; 1000];
    if libxml_xmlPythonErrorFuncHandler.is_null() {
        ap = args.clone();
        vfprintf(stderr, msg, ap.as_va_list());
    } else {
        ap = args.clone();
        if vsnprintf(
            str.as_mut_ptr(),
            999 as i32 as u64,
            msg,
            ap.as_va_list(),
        ) >= 998 as i32
        {
            str[999 as i32 as usize] = 0 as i32 as i8;
        }
        list = PyTuple_New(2 as i32 as Py_ssize_t);
        PyTuple_SetItem(
            list,
            0 as i32 as Py_ssize_t,
            libxml_xmlPythonErrorFuncCtxt,
        );
        if !libxml_xmlPythonErrorFuncCtxt.is_null() {
            let ref mut fresh79 = (*libxml_xmlPythonErrorFuncCtxt).ob_refcnt;
            *fresh79 += 1;
        }
        message = libxml_charPtrConstWrap(str.as_mut_ptr());
        PyTuple_SetItem(list, 1 as i32 as Py_ssize_t, message);
        result = PyEval_CallObjectWithKeywords(
            libxml_xmlPythonErrorFuncHandler,
            list,
            0 as *mut libc::c_void as *mut PyObject,
        );
        if !list.is_null() {
            let ref mut fresh80 = (*list).ob_refcnt;
            *fresh80 -= 1;
            if !(*fresh80 != 0 as i32 as i64) {
                (Some(
                    ((*(*list).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(list);
            }
        }
        if !result.is_null() {
            let ref mut fresh81 = (*result).ob_refcnt;
            *fresh81 -= 1;
            if !(*fresh81 != 0 as i32 as i64) {
                (Some(
                    ((*(*result).ob_type).tp_dealloc).expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(result);
            }
        }
    };
}
unsafe extern "C" fn libxml_xmlErrorInitialize() {
    xmlSetGenericErrorFunc(
        0 as *mut libc::c_void,
        Some(
<<<<<<< HEAD
            libxml_xmlErrorFuncHandler
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
=======
            libxml_xmlErrorFuncHandler,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        ),
    );
    xmlThrDefSetGenericErrorFunc(
        0 as *mut libc::c_void,
        Some(
<<<<<<< HEAD
            libxml_xmlErrorFuncHandler
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
=======
            libxml_xmlErrorFuncHandler,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        ),
    );
}
unsafe extern "C" fn libxml_xmlRegisterErrorHandler(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_f: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_f: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_ctx: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OO:xmlRegisterErrorHandler\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_f as *mut *mut PyObject,
        &mut pyobj_ctx as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    if !libxml_xmlPythonErrorFuncHandler.is_null() {
        if !libxml_xmlPythonErrorFuncHandler.is_null() {
            let ref mut fresh82 = (*libxml_xmlPythonErrorFuncHandler).ob_refcnt;
            *fresh82 -= 1;
            if !(*fresh82 != 0 as i32 as i64) {
                (Some(
                    ((*(*libxml_xmlPythonErrorFuncHandler).ob_type).tp_dealloc)
                        .expect("non-null function pointer"),
                ))
                    .expect(
                        "non-null function pointer",
                    )(libxml_xmlPythonErrorFuncHandler);
            }
        }
    }
    if !libxml_xmlPythonErrorFuncCtxt.is_null() {
        if !libxml_xmlPythonErrorFuncCtxt.is_null() {
            let ref mut fresh83 = (*libxml_xmlPythonErrorFuncCtxt).ob_refcnt;
            *fresh83 -= 1;
            if !(*fresh83 != 0 as i32 as i64) {
                (Some(
                    ((*(*libxml_xmlPythonErrorFuncCtxt).ob_type).tp_dealloc)
                        .expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")(libxml_xmlPythonErrorFuncCtxt);
            }
        }
    }
    if !pyobj_ctx.is_null() {
        let ref mut fresh84 = (*pyobj_ctx).ob_refcnt;
        *fresh84 += 1;
    }
    if !pyobj_f.is_null() {
        let ref mut fresh85 = (*pyobj_f).ob_refcnt;
        *fresh85 += 1;
    }
    libxml_xmlPythonErrorFuncHandler = pyobj_f;
    libxml_xmlPythonErrorFuncCtxt = pyobj_ctx;
    py_retval = libxml_intWrap(1 as i32);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlParserCtxtGenericErrorFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut severity: i32,
    mut str: *mut i8,
) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyCtxt: xmlParserCtxtPyCtxtPtr = 0 as *mut xmlParserCtxtPyCtxt;
=======
    mut ctx: * mut core::ffi::c_void,
    mut severity: i32,
    mut str: * mut i8,
) {
    let mut list: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut ctxt: * mut crate::src::python::libxml::_xmlParserCtxt = (0 as * mut crate::src::python::libxml::_xmlParserCtxt);
    let mut pyCtxt: * mut crate::src::python::libxml::xmlParserCtxtPyCtxt = (0 as * mut crate::src::python::libxml::xmlParserCtxtPyCtxt);
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ctxt = ctx as xmlParserCtxtPtr;
    pyCtxt = (*ctxt)._private as xmlParserCtxtPyCtxtPtr;
    list = PyTuple_New(4 as i32 as Py_ssize_t);
    PyTuple_SetItem(list, 0 as i32 as Py_ssize_t, (*pyCtxt).arg);
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh86 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh86 += 1;
    }
    PyTuple_SetItem(list, 1 as i32 as Py_ssize_t, libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 2 as i32 as Py_ssize_t, libxml_intWrap(severity));
    PyTuple_SetItem(list, 3 as i32 as Py_ssize_t, &mut _Py_NoneStruct);
<<<<<<< HEAD
    let ref mut fresh87 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
    let ref mut fresh87 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    *fresh87 += 1;
    result = PyEval_CallObjectWithKeywords(
        (*pyCtxt).f,
        list,
        0 as *mut libc::c_void as *mut PyObject,
    );
    if result.is_null() {
        PyErr_Print();
    }
    if !list.is_null() {
        let ref mut fresh88 = (*list).ob_refcnt;
        *fresh88 -= 1;
        if !(*fresh88 != 0 as i32 as i64) {
            (Some(((*(*list).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        let ref mut fresh89 = (*result).ob_refcnt;
        *fresh89 -= 1;
        if !(*fresh89 != 0 as i32 as i64) {
            (Some(((*(*result).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(result);
        }
    }
}
unsafe extern "C" fn libxml_xmlParserCtxtErrorFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut ap: ::std::ffi::VaListImpl;
=======
    mut ctx: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut ap: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ap = args.clone();
    libxml_xmlParserCtxtGenericErrorFuncHandler(
        ctx,
        XML_PARSER_SEVERITY_ERROR as i32,
        libxml_buildMessage(msg, ap.as_va_list()),
    );
}
unsafe extern "C" fn libxml_xmlParserCtxtWarningFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut ap: ::std::ffi::VaListImpl;
=======
    mut ctx: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut ap: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ap = args.clone();
    libxml_xmlParserCtxtGenericErrorFuncHandler(
        ctx,
        XML_PARSER_SEVERITY_WARNING as i32,
        libxml_buildMessage(msg, ap.as_va_list()),
    );
}
unsafe extern "C" fn libxml_xmlParserCtxtValidityErrorFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut ap: ::std::ffi::VaListImpl;
=======
    mut ctx: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut ap: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ap = args.clone();
    libxml_xmlParserCtxtGenericErrorFuncHandler(
        ctx,
        XML_PARSER_SEVERITY_VALIDITY_ERROR as i32,
        libxml_buildMessage(msg, ap.as_va_list()),
    );
}
unsafe extern "C" fn libxml_xmlParserCtxtValidityWarningFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut ap: ::std::ffi::VaListImpl;
=======
    mut ctx: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut ap: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ap = args.clone();
    libxml_xmlParserCtxtGenericErrorFuncHandler(
        ctx,
        XML_PARSER_SEVERITY_VALIDITY_WARNING as i32,
        libxml_buildMessage(msg, ap.as_va_list()),
    );
}
unsafe extern "C" fn libxml_xmlParserCtxtSetErrorHandler(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyCtxt: xmlParserCtxtPyCtxtPtr = 0 as *mut xmlParserCtxtPyCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_f: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_arg: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut ctxt: * mut crate::src::python::libxml::_xmlParserCtxt = 0 as *mut xmlParserCtxt;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlParserCtxtPyCtxt = 0 as *mut xmlParserCtxtPyCtxt;
    let mut pyobj_ctxt: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_f: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_arg: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OOO:xmlParserCtxtSetErrorHandler\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_ctxt as *mut *mut PyObject,
        &mut pyobj_f as *mut *mut PyObject,
        &mut pyobj_arg as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    ctxt = if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlParserCtxtPtr
    } else {
        (*(pyobj_ctxt as *mut PyparserCtxt_Object)).obj
    };
    if ((*ctxt)._private).is_null() {
        pyCtxt = xmlMalloc
            .expect(
                "non-null function pointer",
            )(::std::mem::size_of::<xmlParserCtxtPyCtxt>() as u64)
            as xmlParserCtxtPyCtxtPtr;
        if pyCtxt.is_null() {
            py_retval = libxml_intWrap(-(1 as i32));
            return py_retval;
        }
        memset(
            pyCtxt as *mut libc::c_void,
            0 as i32,
            ::std::mem::size_of::<xmlParserCtxtPyCtxt>() as u64,
        );
        let ref mut fresh90 = (*ctxt)._private;
        *fresh90 = pyCtxt as *mut libc::c_void;
    } else {
        pyCtxt = (*ctxt)._private as xmlParserCtxtPyCtxtPtr;
    }
    if !((*pyCtxt).f).is_null() {
        let ref mut fresh91 = (*(*pyCtxt).f).ob_refcnt;
        *fresh91 -= 1;
        if !(*fresh91 != 0 as i32 as i64) {
            (Some(
                ((*(*(*pyCtxt).f).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")((*pyCtxt).f);
        }
    }
    if !pyobj_f.is_null() {
        let ref mut fresh92 = (*pyobj_f).ob_refcnt;
        *fresh92 += 1;
    }
    let ref mut fresh93 = (*pyCtxt).f;
    *fresh93 = pyobj_f;
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh94 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh94 -= 1;
        if !(*fresh94 != 0 as i32 as i64) {
            (Some(
                ((*(*(*pyCtxt).arg).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")((*pyCtxt).arg);
        }
    }
    if !pyobj_arg.is_null() {
        let ref mut fresh95 = (*pyobj_arg).ob_refcnt;
        *fresh95 += 1;
    }
    let ref mut fresh96 = (*pyCtxt).arg;
    *fresh96 = pyobj_arg;
    if pyobj_f != &mut _Py_NoneStruct as *mut PyObject {
        let ref mut fresh97 = (*(*ctxt).sax).error;
        *fresh97 = Some(
<<<<<<< HEAD
            libxml_xmlParserCtxtErrorFuncHandler
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
        );
        let ref mut fresh98 = (*(*ctxt).sax).warning;
        *fresh98 = Some(
            libxml_xmlParserCtxtWarningFuncHandler
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
        );
        let ref mut fresh99 = (*ctxt).vctxt.error;
        *fresh99 = Some(
            libxml_xmlParserCtxtValidityErrorFuncHandler
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
        );
        let ref mut fresh100 = (*ctxt).vctxt.warning;
        *fresh100 = Some(
            libxml_xmlParserCtxtValidityWarningFuncHandler
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
=======
            libxml_xmlParserCtxtErrorFuncHandler,
        );
        let ref mut fresh98 = (*(*ctxt).sax).warning;
        *fresh98 = Some(
            libxml_xmlParserCtxtWarningFuncHandler,
        );
        let ref mut fresh99 = (*ctxt).vctxt.error;
        *fresh99 = Some(
            libxml_xmlParserCtxtValidityErrorFuncHandler,
        );
        let ref mut fresh100 = (*ctxt).vctxt.warning;
        *fresh100 = Some(
            libxml_xmlParserCtxtValidityWarningFuncHandler,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        );
    } else {
        let ref mut fresh101 = (*(*ctxt).sax).error;
        *fresh101 = Some(
<<<<<<< HEAD
            xmlParserError
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
        );
        let ref mut fresh102 = (*ctxt).vctxt.error;
        *fresh102 = Some(
            xmlParserValidityError
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
        );
        let ref mut fresh103 = (*(*ctxt).sax).warning;
        *fresh103 = Some(
            xmlParserWarning
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
        );
        let ref mut fresh104 = (*ctxt).vctxt.warning;
        *fresh104 = Some(
            xmlParserValidityWarning
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
=======
            xmlParserError,
        );
        let ref mut fresh102 = (*ctxt).vctxt.error;
        *fresh102 = Some(
            xmlParserValidityError,
        );
        let ref mut fresh103 = (*(*ctxt).sax).warning;
        *fresh103 = Some(
            xmlParserWarning,
        );
        let ref mut fresh104 = (*ctxt).vctxt.warning;
        *fresh104 = Some(
            xmlParserValidityWarning,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        );
    }
    py_retval = libxml_intWrap(1 as i32);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlParserCtxtGetErrorHandler(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyCtxt: xmlParserCtxtPyCtxtPtr = 0 as *mut xmlParserCtxtPyCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut ctxt: * mut crate::src::python::libxml::_xmlParserCtxt = 0 as *mut xmlParserCtxt;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlParserCtxtPyCtxt = (0 as * mut crate::src::python::libxml::xmlParserCtxtPyCtxt);
    let mut pyobj_ctxt: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:xmlParserCtxtGetErrorHandler\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_ctxt as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    ctxt = if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlParserCtxtPtr
    } else {
        (*(pyobj_ctxt as *mut PyparserCtxt_Object)).obj
    };
    py_retval = PyTuple_New(2 as i32 as Py_ssize_t);
    if !((*ctxt)._private).is_null() {
        pyCtxt = (*ctxt)._private as xmlParserCtxtPyCtxtPtr;
        PyTuple_SetItem(py_retval, 0 as i32 as Py_ssize_t, (*pyCtxt).f);
        if !((*pyCtxt).f).is_null() {
            let ref mut fresh105 = (*(*pyCtxt).f).ob_refcnt;
            *fresh105 += 1;
        }
        PyTuple_SetItem(py_retval, 1 as i32 as Py_ssize_t, (*pyCtxt).arg);
        if !((*pyCtxt).arg).is_null() {
            let ref mut fresh106 = (*(*pyCtxt).arg).ob_refcnt;
            *fresh106 += 1;
        }
    } else {
        PyTuple_SetItem(py_retval, 0 as i32 as Py_ssize_t, &mut _Py_NoneStruct);
<<<<<<< HEAD
        if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
            let ref mut fresh107 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
            *fresh107 += 1;
        }
        PyTuple_SetItem(py_retval, 1 as i32 as Py_ssize_t, &mut _Py_NoneStruct);
        if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
            let ref mut fresh108 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        if !(Some(&mut _Py_NoneStruct)).is_none() {
            let ref mut fresh107 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
            *fresh107 += 1;
        }
        PyTuple_SetItem(py_retval, 1 as i32 as Py_ssize_t, &mut _Py_NoneStruct);
        if !(Some(&mut _Py_NoneStruct)).is_none() {
            let ref mut fresh108 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            *fresh108 += 1;
        }
    }
    return py_retval;
}
unsafe extern "C" fn libxml_xmlFreeParserCtxt(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlParserCtxtPyCtxtPtr = 0 as *mut xmlParserCtxtPyCtxt;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut ctxt: * mut crate::src::python::libxml::_xmlParserCtxt = 0 as *mut xmlParserCtxt;
    let mut pyobj_ctxt: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlParserCtxtPyCtxt = 0 as *mut xmlParserCtxtPyCtxt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:xmlFreeParserCtxt\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_ctxt as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    ctxt = if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlParserCtxtPtr
    } else {
        (*(pyobj_ctxt as *mut PyparserCtxt_Object)).obj
    };
    if !ctxt.is_null() {
        pyCtxt = (*ctxt)._private as xmlParserCtxtPyCtxtPtr;
        if !pyCtxt.is_null() {
            if !((*pyCtxt).f).is_null() {
                let ref mut fresh109 = (*(*pyCtxt).f).ob_refcnt;
                *fresh109 -= 1;
                if !(*fresh109 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).f).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).f);
                }
            }
            if !((*pyCtxt).arg).is_null() {
                let ref mut fresh110 = (*(*pyCtxt).arg).ob_refcnt;
                *fresh110 -= 1;
                if !(*fresh110 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).arg).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).arg);
                }
            }
            xmlFree.expect("non-null function pointer")(pyCtxt as *mut libc::c_void);
        }
        xmlFreeParserCtxt(ctxt);
    }
<<<<<<< HEAD
    let ref mut fresh111 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
    let ref mut fresh111 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    *fresh111 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn libxml_xmlValidCtxtGenericErrorFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut severity: i32,
    mut str: *mut i8,
) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlValidCtxtPyCtxtPtr = 0 as *mut xmlValidCtxtPyCtxt;
=======
    mut ctx: * mut core::ffi::c_void,
    mut severity: i32,
    mut str: * mut i8,
) {
    let mut list: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlValidCtxtPyCtxt = (0 as * mut crate::src::python::libxml::xmlValidCtxtPyCtxt);
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pyCtxt = ctx as xmlValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as i32 as Py_ssize_t);
    PyTuple_SetItem(list, 0 as i32 as Py_ssize_t, libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as i32 as Py_ssize_t, (*pyCtxt).arg);
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh112 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh112 += 1;
    }
    result = PyEval_CallObjectWithKeywords(
        (*pyCtxt).error,
        list,
        0 as *mut libc::c_void as *mut PyObject,
    );
    if result.is_null() {
        PyErr_Print();
    }
    if !list.is_null() {
        let ref mut fresh113 = (*list).ob_refcnt;
        *fresh113 -= 1;
        if !(*fresh113 != 0 as i32 as i64) {
            (Some(((*(*list).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        let ref mut fresh114 = (*result).ob_refcnt;
        *fresh114 -= 1;
        if !(*fresh114 != 0 as i32 as i64) {
            (Some(((*(*result).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(result);
        }
    }
}
unsafe extern "C" fn libxml_xmlValidCtxtGenericWarningFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut severity: i32,
    mut str: *mut i8,
) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlValidCtxtPyCtxtPtr = 0 as *mut xmlValidCtxtPyCtxt;
=======
    mut ctx: * mut core::ffi::c_void,
    mut severity: i32,
    mut str: * mut i8,
) {
    let mut list: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlValidCtxtPyCtxt = (0 as * mut crate::src::python::libxml::xmlValidCtxtPyCtxt);
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pyCtxt = ctx as xmlValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as i32 as Py_ssize_t);
    PyTuple_SetItem(list, 0 as i32 as Py_ssize_t, libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as i32 as Py_ssize_t, (*pyCtxt).arg);
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh115 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh115 += 1;
    }
    result = PyEval_CallObjectWithKeywords(
        (*pyCtxt).warn,
        list,
        0 as *mut libc::c_void as *mut PyObject,
    );
    if result.is_null() {
        PyErr_Print();
    }
    if !list.is_null() {
        let ref mut fresh116 = (*list).ob_refcnt;
        *fresh116 -= 1;
        if !(*fresh116 != 0 as i32 as i64) {
            (Some(((*(*list).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        let ref mut fresh117 = (*result).ob_refcnt;
        *fresh117 -= 1;
        if !(*fresh117 != 0 as i32 as i64) {
            (Some(((*(*result).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(result);
        }
    }
}
unsafe extern "C" fn libxml_xmlValidCtxtErrorFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut ap: ::std::ffi::VaListImpl;
=======
    mut ctx: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut ap: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ap = args.clone();
    libxml_xmlValidCtxtGenericErrorFuncHandler(
        ctx,
        XML_PARSER_SEVERITY_VALIDITY_ERROR as i32,
        libxml_buildMessage(msg, ap.as_va_list()),
    );
}
unsafe extern "C" fn libxml_xmlValidCtxtWarningFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut ap: ::std::ffi::VaListImpl;
=======
    mut ctx: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut ap: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ap = args.clone();
    libxml_xmlValidCtxtGenericWarningFuncHandler(
        ctx,
        XML_PARSER_SEVERITY_VALIDITY_WARNING as i32,
        libxml_buildMessage(msg, ap.as_va_list()),
    );
}
unsafe extern "C" fn libxml_xmlSetValidErrors(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_error: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_warn: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_arg: *mut PyObject = &mut _Py_NoneStruct;
    let mut ctxt: xmlValidCtxtPtr = 0 as *mut xmlValidCtxt;
    let mut pyCtxt: xmlValidCtxtPyCtxtPtr = 0 as *mut xmlValidCtxtPyCtxt;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_error: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_warn: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_ctx: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_arg: * mut crate::src::python::libxml::_object = &mut _Py_NoneStruct;
    let mut ctxt: * mut crate::src::python::libxml::_xmlValidCtxt = 0 as *mut xmlValidCtxt;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlValidCtxtPyCtxt = 0 as *mut xmlValidCtxtPyCtxt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OOO|O:xmlSetValidErrors\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_ctx as *mut *mut PyObject,
        &mut pyobj_error as *mut *mut PyObject,
        &mut pyobj_warn as *mut *mut PyObject,
        &mut pyobj_arg as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    ctxt = if pyobj_ctx == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlValidCtxtPtr
    } else {
        (*(pyobj_ctx as *mut PyValidCtxt_Object)).obj
    };
    pyCtxt = xmlMalloc
        .expect(
            "non-null function pointer",
        )(::std::mem::size_of::<xmlValidCtxtPyCtxt>() as u64)
        as xmlValidCtxtPyCtxtPtr;
    if pyCtxt.is_null() {
        py_retval = libxml_intWrap(-(1 as i32));
        return py_retval;
    }
    memset(
        pyCtxt as *mut libc::c_void,
        0 as i32,
        ::std::mem::size_of::<xmlValidCtxtPyCtxt>() as u64,
    );
    if !((*pyCtxt).error).is_null() {
        let ref mut fresh118 = (*(*pyCtxt).error).ob_refcnt;
        *fresh118 -= 1;
        if !(*fresh118 != 0 as i32 as i64) {
            (Some(
                ((*(*(*pyCtxt).error).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")((*pyCtxt).error);
        }
    }
    if !pyobj_error.is_null() {
        let ref mut fresh119 = (*pyobj_error).ob_refcnt;
        *fresh119 += 1;
    }
    let ref mut fresh120 = (*pyCtxt).error;
    *fresh120 = pyobj_error;
    if !((*pyCtxt).warn).is_null() {
        let ref mut fresh121 = (*(*pyCtxt).warn).ob_refcnt;
        *fresh121 -= 1;
        if !(*fresh121 != 0 as i32 as i64) {
            (Some(
                ((*(*(*pyCtxt).warn).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")((*pyCtxt).warn);
        }
    }
    if !pyobj_warn.is_null() {
        let ref mut fresh122 = (*pyobj_warn).ob_refcnt;
        *fresh122 += 1;
    }
    let ref mut fresh123 = (*pyCtxt).warn;
    *fresh123 = pyobj_warn;
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh124 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh124 -= 1;
        if !(*fresh124 != 0 as i32 as i64) {
            (Some(
                ((*(*(*pyCtxt).arg).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")((*pyCtxt).arg);
        }
    }
    if !pyobj_arg.is_null() {
        let ref mut fresh125 = (*pyobj_arg).ob_refcnt;
        *fresh125 += 1;
    }
    let ref mut fresh126 = (*pyCtxt).arg;
    *fresh126 = pyobj_arg;
    let ref mut fresh127 = (*ctxt).error;
    *fresh127 = Some(
<<<<<<< HEAD
        libxml_xmlValidCtxtErrorFuncHandler
            as unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
    );
    let ref mut fresh128 = (*ctxt).warning;
    *fresh128 = Some(
        libxml_xmlValidCtxtWarningFuncHandler
            as unsafe extern "C" fn(*mut libc::c_void, *const i8, ...) -> (),
=======
        libxml_xmlValidCtxtErrorFuncHandler,
    );
    let ref mut fresh128 = (*ctxt).warning;
    *fresh128 = Some(
        libxml_xmlValidCtxtWarningFuncHandler,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    );
    let ref mut fresh129 = (*ctxt).userData;
    *fresh129 = pyCtxt as *mut libc::c_void;
    py_retval = libxml_intWrap(1 as i32);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlFreeValidCtxt(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut cur: xmlValidCtxtPtr = 0 as *mut xmlValidCtxt;
    let mut pyCtxt: xmlValidCtxtPyCtxtPtr = 0 as *mut xmlValidCtxtPyCtxt;
    let mut pyobj_cur: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut cur: * mut crate::src::python::libxml::_xmlValidCtxt = 0 as *mut xmlValidCtxt;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlValidCtxtPyCtxt = 0 as *mut xmlValidCtxtPyCtxt;
    let mut pyobj_cur: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:xmlFreeValidCtxt\0" as *const u8 as *const i8 as *mut i8,
        &mut pyobj_cur as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    cur = if pyobj_cur == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlValidCtxtPtr
    } else {
        (*(pyobj_cur as *mut PyValidCtxt_Object)).obj
    };
    pyCtxt = (*cur).userData as xmlValidCtxtPyCtxtPtr;
    if !pyCtxt.is_null() {
        if !((*pyCtxt).error).is_null() {
            let ref mut fresh130 = (*(*pyCtxt).error).ob_refcnt;
            *fresh130 -= 1;
            if !(*fresh130 != 0 as i32 as i64) {
                (Some(
                    ((*(*(*pyCtxt).error).ob_type).tp_dealloc)
                        .expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")((*pyCtxt).error);
            }
        }
        if !((*pyCtxt).warn).is_null() {
            let ref mut fresh131 = (*(*pyCtxt).warn).ob_refcnt;
            *fresh131 -= 1;
            if !(*fresh131 != 0 as i32 as i64) {
                (Some(
                    ((*(*(*pyCtxt).warn).ob_type).tp_dealloc)
                        .expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")((*pyCtxt).warn);
            }
        }
        if !((*pyCtxt).arg).is_null() {
            let ref mut fresh132 = (*(*pyCtxt).arg).ob_refcnt;
            *fresh132 -= 1;
            if !(*fresh132 != 0 as i32 as i64) {
                (Some(
                    ((*(*(*pyCtxt).arg).ob_type).tp_dealloc)
                        .expect("non-null function pointer"),
                ))
                    .expect("non-null function pointer")((*pyCtxt).arg);
            }
        }
        xmlFree.expect("non-null function pointer")(pyCtxt as *mut libc::c_void);
    }
    xmlFreeValidCtxt(cur);
<<<<<<< HEAD
    let ref mut fresh133 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
    let ref mut fresh133 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    *fresh133 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn libxml_xmlTextReaderErrorCallback(
<<<<<<< HEAD
    mut arg: *mut libc::c_void,
    mut msg: *const i8,
    mut severity: i32,
    mut locator: xmlTextReaderLocatorPtr,
) {
    let mut pyCtxt: *mut xmlTextReaderPyCtxt = arg as *mut xmlTextReaderPyCtxt;
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
=======
    mut arg: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut severity: i32,
    mut locator: * mut core::ffi::c_void,
) {
    let mut pyCtxt: * mut crate::src::python::libxml::xmlTextReaderPyCtxt = arg as *mut xmlTextReaderPyCtxt;
    let mut list: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    list = PyTuple_New(4 as i32 as Py_ssize_t);
    PyTuple_SetItem(list, 0 as i32 as Py_ssize_t, (*pyCtxt).arg);
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh134 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh134 += 1;
    }
    PyTuple_SetItem(list, 1 as i32 as Py_ssize_t, libxml_charPtrConstWrap(msg));
    PyTuple_SetItem(list, 2 as i32 as Py_ssize_t, libxml_intWrap(severity));
    PyTuple_SetItem(
        list,
        3 as i32 as Py_ssize_t,
        libxml_xmlTextReaderLocatorPtrWrap(locator),
    );
    result = PyEval_CallObjectWithKeywords(
        (*pyCtxt).f,
        list,
        0 as *mut libc::c_void as *mut PyObject,
    );
    if result.is_null() {
        PyErr_Print();
    }
    if !list.is_null() {
        let ref mut fresh135 = (*list).ob_refcnt;
        *fresh135 -= 1;
        if !(*fresh135 != 0 as i32 as i64) {
            (Some(((*(*list).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        let ref mut fresh136 = (*result).ob_refcnt;
        *fresh136 -= 1;
        if !(*fresh136 != 0 as i32 as i64) {
            (Some(((*(*result).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(result);
        }
    }
}
unsafe extern "C" fn libxml_xmlTextReaderSetErrorHandler(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut reader: xmlTextReaderPtr = 0 as *mut xmlTextReader;
    let mut pyCtxt: xmlTextReaderPyCtxtPtr = 0 as *mut xmlTextReaderPyCtxt;
    let mut f: xmlTextReaderErrorFunc = None;
    let mut arg: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut pyobj_reader: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_f: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_arg: *mut PyObject = 0 as *mut PyObject;
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut reader: * mut crate::src::python::types::_xmlTextReader = 0 as *mut xmlTextReader;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlTextReaderPyCtxt = 0 as *mut xmlTextReaderPyCtxt;
    let mut f: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: u32,_: * mut core::ffi::c_void,) -> ()> = None;
    let mut arg: * mut core::ffi::c_void = 0 as *mut libc::c_void;
    let mut pyobj_reader: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_f: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_arg: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OOO:xmlTextReaderSetErrorHandler\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_reader as *mut *mut PyObject,
        &mut pyobj_f as *mut *mut PyObject,
        &mut pyobj_arg as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    reader = if pyobj_reader == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlTextReaderPtr
    } else {
        (*(pyobj_reader as *mut PyxmlTextReader_Object)).obj
    };
    xmlTextReaderGetErrorHandler(reader, &mut f, &mut arg);
    if !arg.is_null() {
<<<<<<< HEAD
        if f
            == ::std::mem::transmute::<
                Option::<
                    unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const i8,
                        i32,
                        xmlTextReaderLocatorPtr,
                    ) -> (),
                >,
                xmlTextReaderErrorFunc,
            >(
                Some(
                    libxml_xmlTextReaderErrorCallback
                        as unsafe extern "C" fn(
                            *mut libc::c_void,
                            *const i8,
                            i32,
                            xmlTextReaderLocatorPtr,
                        ) -> (),
                ),
            )
=======
        if (f
            ).map(|f| f as usize) == ( core::intrinsics::transmute::<Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: i32,_: * mut core::ffi::c_void,) -> ()>, Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: u32,_: * mut core::ffi::c_void,) -> ()>>(
                Some(
                    libxml_xmlTextReaderErrorCallback,
                ),
            )).map(|f| f as usize)
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        {
            pyCtxt = arg as xmlTextReaderPyCtxtPtr;
            if !((*pyCtxt).f).is_null() {
                let ref mut fresh137 = (*(*pyCtxt).f).ob_refcnt;
                *fresh137 -= 1;
                if !(*fresh137 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).f).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).f);
                }
            }
            if !((*pyCtxt).arg).is_null() {
                let ref mut fresh138 = (*(*pyCtxt).arg).ob_refcnt;
                *fresh138 -= 1;
                if !(*fresh138 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).arg).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).arg);
                }
            }
            xmlFree.expect("non-null function pointer")(pyCtxt as *mut libc::c_void);
        } else {
            py_retval = libxml_intWrap(-(1 as i32));
            return py_retval;
        }
    }
    xmlTextReaderSetErrorHandler(reader, None, 0 as *mut libc::c_void);
    if pyobj_f != &mut _Py_NoneStruct as *mut PyObject {
        pyCtxt = xmlMalloc
            .expect(
                "non-null function pointer",
            )(::std::mem::size_of::<xmlTextReaderPyCtxt>() as u64)
            as xmlTextReaderPyCtxtPtr;
        if pyCtxt.is_null() {
            py_retval = libxml_intWrap(-(1 as i32));
            return py_retval;
        }
        if !pyobj_f.is_null() {
            let ref mut fresh139 = (*pyobj_f).ob_refcnt;
            *fresh139 += 1;
        }
        let ref mut fresh140 = (*pyCtxt).f;
        *fresh140 = pyobj_f;
        if !pyobj_arg.is_null() {
            let ref mut fresh141 = (*pyobj_arg).ob_refcnt;
            *fresh141 += 1;
        }
        let ref mut fresh142 = (*pyCtxt).arg;
        *fresh142 = pyobj_arg;
        xmlTextReaderSetErrorHandler(
            reader,
<<<<<<< HEAD
            ::std::mem::transmute::<
                Option::<
                    unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const i8,
                        i32,
                        xmlTextReaderLocatorPtr,
                    ) -> (),
                >,
                xmlTextReaderErrorFunc,
            >(
                Some(
                    libxml_xmlTextReaderErrorCallback
                        as unsafe extern "C" fn(
                            *mut libc::c_void,
                            *const i8,
                            i32,
                            xmlTextReaderLocatorPtr,
                        ) -> (),
=======
            core::intrinsics::transmute::<Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: i32,_: * mut core::ffi::c_void,) -> ()>, Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: u32,_: * mut core::ffi::c_void,) -> ()>>(
                Some(
                    libxml_xmlTextReaderErrorCallback,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
            ),
            pyCtxt as *mut libc::c_void,
        );
    }
    py_retval = libxml_intWrap(1 as i32);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlTextReaderGetErrorHandler(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut reader: xmlTextReaderPtr = 0 as *mut xmlTextReader;
    let mut pyCtxt: xmlTextReaderPyCtxtPtr = 0 as *mut xmlTextReaderPyCtxt;
    let mut f: xmlTextReaderErrorFunc = None;
    let mut arg: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut pyobj_reader: *mut PyObject = 0 as *mut PyObject;
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut reader: * mut crate::src::python::types::_xmlTextReader = 0 as *mut xmlTextReader;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlTextReaderPyCtxt = (0 as * mut crate::src::python::libxml::xmlTextReaderPyCtxt);
    let mut f: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: u32,_: * mut core::ffi::c_void,) -> ()> = None;
    let mut arg: * mut core::ffi::c_void = 0 as *mut libc::c_void;
    let mut pyobj_reader: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:xmlTextReaderSetErrorHandler\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_reader as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    reader = if pyobj_reader == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlTextReaderPtr
    } else {
        (*(pyobj_reader as *mut PyxmlTextReader_Object)).obj
    };
    xmlTextReaderGetErrorHandler(reader, &mut f, &mut arg);
    py_retval = PyTuple_New(2 as i32 as Py_ssize_t);
<<<<<<< HEAD
    if f
        == ::std::mem::transmute::<
            Option::<
                unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    i32,
                    xmlTextReaderLocatorPtr,
                ) -> (),
            >,
            xmlTextReaderErrorFunc,
        >(
            Some(
                libxml_xmlTextReaderErrorCallback
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const i8,
                        i32,
                        xmlTextReaderLocatorPtr,
                    ) -> (),
            ),
        )
=======
    if (f
        ).map(|f| f as usize) == ( core::intrinsics::transmute::<Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: i32,_: * mut core::ffi::c_void,) -> ()>, Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: u32,_: * mut core::ffi::c_void,) -> ()>>(
            Some(
                libxml_xmlTextReaderErrorCallback,
            ),
        )).map(|f| f as usize)
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    {
        pyCtxt = arg as xmlTextReaderPyCtxtPtr;
        PyTuple_SetItem(py_retval, 0 as i32 as Py_ssize_t, (*pyCtxt).f);
        if !((*pyCtxt).f).is_null() {
            let ref mut fresh143 = (*(*pyCtxt).f).ob_refcnt;
            *fresh143 += 1;
        }
        PyTuple_SetItem(py_retval, 1 as i32 as Py_ssize_t, (*pyCtxt).arg);
        if !((*pyCtxt).arg).is_null() {
            let ref mut fresh144 = (*(*pyCtxt).arg).ob_refcnt;
            *fresh144 += 1;
        }
    } else {
        PyTuple_SetItem(py_retval, 0 as i32 as Py_ssize_t, &mut _Py_NoneStruct);
<<<<<<< HEAD
        if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
            let ref mut fresh145 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
            *fresh145 += 1;
        }
        PyTuple_SetItem(py_retval, 1 as i32 as Py_ssize_t, &mut _Py_NoneStruct);
        if !(&mut _Py_NoneStruct as *mut PyObject).is_null() {
            let ref mut fresh146 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        if !(Some(&mut _Py_NoneStruct)).is_none() {
            let ref mut fresh145 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
            *fresh145 += 1;
        }
        PyTuple_SetItem(py_retval, 1 as i32 as Py_ssize_t, &mut _Py_NoneStruct);
        if !(Some(&mut _Py_NoneStruct)).is_none() {
            let ref mut fresh146 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            *fresh146 += 1;
        }
    }
    return py_retval;
}
unsafe extern "C" fn libxml_xmlFreeTextReader(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut reader: xmlTextReaderPtr = 0 as *mut xmlTextReader;
    let mut pyobj_reader: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlTextReaderPyCtxtPtr = 0 as *mut xmlTextReaderPyCtxt;
    let mut f: xmlTextReaderErrorFunc = None;
    let mut arg: *mut libc::c_void = 0 as *mut libc::c_void;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut reader: * mut crate::src::python::types::_xmlTextReader = 0 as *mut xmlTextReader;
    let mut pyobj_reader: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlTextReaderPyCtxt = 0 as *mut xmlTextReaderPyCtxt;
    let mut f: Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: u32,_: * mut core::ffi::c_void,) -> ()> = None;
    let mut arg: * mut core::ffi::c_void = 0 as *mut libc::c_void;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:xmlFreeTextReader\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_reader as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    if !((*pyobj_reader).ob_type == &mut PyCapsule_Type as *mut PyTypeObject) {
<<<<<<< HEAD
        let ref mut fresh147 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh147 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh147 += 1;
        return &mut _Py_NoneStruct;
    }
    reader = if pyobj_reader == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlTextReaderPtr
    } else {
        (*(pyobj_reader as *mut PyxmlTextReader_Object)).obj
    };
    if reader.is_null() {
<<<<<<< HEAD
        let ref mut fresh148 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh148 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh148 += 1;
        return &mut _Py_NoneStruct;
    }
    xmlTextReaderGetErrorHandler(reader, &mut f, &mut arg);
    if !arg.is_null() {
<<<<<<< HEAD
        if f
            == ::std::mem::transmute::<
                Option::<
                    unsafe extern "C" fn(
                        *mut libc::c_void,
                        *const i8,
                        i32,
                        xmlTextReaderLocatorPtr,
                    ) -> (),
                >,
                xmlTextReaderErrorFunc,
            >(
                Some(
                    libxml_xmlTextReaderErrorCallback
                        as unsafe extern "C" fn(
                            *mut libc::c_void,
                            *const i8,
                            i32,
                            xmlTextReaderLocatorPtr,
                        ) -> (),
                ),
            )
=======
        if (f
            ).map(|f| f as usize) == ( core::intrinsics::transmute::<Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: i32,_: * mut core::ffi::c_void,) -> ()>, Option<unsafe extern "C"  fn(_: * mut core::ffi::c_void,_: * const i8,_: u32,_: * mut core::ffi::c_void,) -> ()>>(
                Some(
                    libxml_xmlTextReaderErrorCallback,
                ),
            )).map(|f| f as usize)
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        {
            pyCtxt = arg as xmlTextReaderPyCtxtPtr;
            if !((*pyCtxt).f).is_null() {
                let ref mut fresh149 = (*(*pyCtxt).f).ob_refcnt;
                *fresh149 -= 1;
                if !(*fresh149 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).f).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).f);
                }
            }
            if !((*pyCtxt).arg).is_null() {
                let ref mut fresh150 = (*(*pyCtxt).arg).ob_refcnt;
                *fresh150 -= 1;
                if !(*fresh150 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).arg).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).arg);
                }
            }
            xmlFree.expect("non-null function pointer")(pyCtxt as *mut libc::c_void);
        }
    }
    xmlFreeTextReader(reader);
<<<<<<< HEAD
    let ref mut fresh151 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
    let ref mut fresh151 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    *fresh151 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn libxml_xmlXPathFuncCallback(
<<<<<<< HEAD
    mut ctxt: xmlXPathParserContextPtr,
    mut nargs: i32,
) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut cur: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut obj: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
    let mut rctxt: xmlXPathContextPtr = 0 as *mut xmlXPathContext;
    let mut current_function: *mut PyObject = 0 as *mut PyObject;
    let mut name: *const xmlChar = 0 as *const xmlChar;
    let mut ns_uri: *const xmlChar = 0 as *const xmlChar;
=======
    mut ctxt: * mut crate::src::python::libxml::_xmlXPathParserContext,
    mut nargs: i32,
) {
    let mut list: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_xmlXPathObject = 0 as *mut xmlXPathObject;
    let mut rctxt: * mut crate::src::python::libxml::_xmlXPathContext = 0 as *mut xmlXPathContext;
    let mut current_function: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut name: * const u8 = 0 as *const xmlChar;
    let mut ns_uri: * const u8 = 0 as *const xmlChar;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut i: i32 = 0;
    if ctxt.is_null() {
        return;
    }
    rctxt = (*ctxt).context;
    if rctxt.is_null() {
        return;
    }
    name = (*rctxt).function;
    ns_uri = (*rctxt).functionURI;
    i = 0 as i32;
    while i < libxml_xpathCallbacksNb {
        if xmlStrEqual(
            name,
            (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).name,
        ) != 0
            && xmlStrEqual(
                ns_uri,
                (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).ns_uri,
            ) != 0
        {
            current_function = (*(*libxml_xpathCallbacks)
                .as_mut_ptr()
                .offset(i as isize))
                .function;
        }
        i += 1;
    }
    if current_function.is_null() {
        printf(
            b"libxml_xmlXPathFuncCallback: internal error %s not found !\n\0"
                as *const u8 as *const i8,
            name,
        );
        return;
    }
    list = PyTuple_New((nargs + 1 as i32) as Py_ssize_t);
    PyTuple_SetItem(
        list,
        0 as i32 as Py_ssize_t,
        libxml_xmlXPathParserContextPtrWrap(ctxt),
    );
    i = nargs - 1 as i32;
    while i >= 0 as i32 {
        obj = valuePop(ctxt);
        cur = libxml_xmlXPathObjectPtrWrap(obj);
        PyTuple_SetItem(list, (i + 1 as i32) as Py_ssize_t, cur);
        i -= 1;
    }
    result = PyEval_CallObjectWithKeywords(
        current_function,
        list,
        0 as *mut libc::c_void as *mut PyObject,
    );
    let ref mut fresh152 = (*list).ob_refcnt;
    *fresh152 -= 1;
    if !(*fresh152 != 0 as i32 as i64) {
        (Some(((*(*list).ob_type).tp_dealloc).expect("non-null function pointer")))
            .expect("non-null function pointer")(list);
    }
    obj = libxml_xmlXPathObjectPtrConvert(result);
    valuePush(ctxt, obj);
}
unsafe extern "C" fn libxml_xmlXPathFuncLookupFunc(
<<<<<<< HEAD
    mut ctxt: *mut libc::c_void,
    mut name: *const xmlChar,
    mut ns_uri: *const xmlChar,
) -> xmlXPathFunction {
=======
    mut ctxt: * mut core::ffi::c_void,
    mut name: * const u8,
    mut ns_uri: * const u8,
) -> Option<unsafe extern "C"  fn(_: * mut crate::src::python::libxml::_xmlXPathParserContext,_: i32,) -> ()> {
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut i: i32 = 0;
    i = 0 as i32;
    while i < libxml_xpathCallbacksNb {
        if ctxt
            == (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).ctx
                as *mut libc::c_void
            && xmlStrEqual(
                name,
                (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).name,
            ) != 0
            && xmlStrEqual(
                ns_uri,
                (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).ns_uri,
            ) != 0
        {
            return Some(
<<<<<<< HEAD
                libxml_xmlXPathFuncCallback
                    as unsafe extern "C" fn(xmlXPathParserContextPtr, i32) -> (),
=======
                libxml_xmlXPathFuncCallback,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            );
        }
        i += 1;
    }
    return None;
}
unsafe extern "C" fn libxml_xpathCallbacksInitialize() {
    let mut i: i32 = 0;
    if libxml_xpathCallbacksInitialized != 0 as i32 {
        return;
    }
    libxml_xpathCallbacks = xmlMalloc
        .expect(
            "non-null function pointer",
        )(
        (libxml_xpathCallbacksAllocd as u64)
            .wrapping_mul(::std::mem::size_of::<libxml_xpathCallback>() as u64),
    ) as *mut libxml_xpathCallbackArray;
    i = 0 as i32;
    while i < libxml_xpathCallbacksAllocd {
        let ref mut fresh153 = (*(*libxml_xpathCallbacks)
            .as_mut_ptr()
            .offset(i as isize))
            .ctx;
        *fresh153 = 0 as xmlXPathContextPtr;
        let ref mut fresh154 = (*(*libxml_xpathCallbacks)
            .as_mut_ptr()
            .offset(i as isize))
            .name;
        *fresh154 = 0 as *mut xmlChar;
        let ref mut fresh155 = (*(*libxml_xpathCallbacks)
            .as_mut_ptr()
            .offset(i as isize))
            .ns_uri;
        *fresh155 = 0 as *mut xmlChar;
        let ref mut fresh156 = (*(*libxml_xpathCallbacks)
            .as_mut_ptr()
            .offset(i as isize))
            .function;
        *fresh156 = 0 as *mut PyObject;
        i += 1;
    }
    libxml_xpathCallbacksInitialized = 1 as i32;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlRegisterXPathFunction(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut current_block: u64;
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: i32 = 0 as i32;
    let mut name: *mut xmlChar = 0 as *mut xmlChar;
    let mut ns_uri: *mut xmlChar = 0 as *mut xmlChar;
    let mut ctx: xmlXPathContextPtr = 0 as *mut xmlXPathContext;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_f: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut current_block: u64;
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut c_retval: i32 = 0 as i32;
    let mut name: * mut u8 = 0 as *mut xmlChar;
    let mut ns_uri: * mut u8 = 0 as *mut xmlChar;
    let mut ctx: * mut crate::src::python::libxml::_xmlXPathContext = 0 as *mut xmlXPathContext;
    let mut pyobj_ctx: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_f: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut i: i32 = 0;
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OszO:registerXPathFunction\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_ctx as *mut *mut PyObject,
        &mut name as *mut *mut xmlChar,
        &mut ns_uri as *mut *mut xmlChar,
        &mut pyobj_f as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    ctx = if pyobj_ctx == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlXPathContextPtr
    } else {
        (*(pyobj_ctx as *mut PyxmlXPathContext_Object)).obj
    };
    if libxml_xpathCallbacksInitialized == 0 as i32 {
        libxml_xpathCallbacksInitialize();
    }
    xmlXPathRegisterFuncLookup(
        ctx,
        Some(
<<<<<<< HEAD
            libxml_xmlXPathFuncLookupFunc
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const xmlChar,
                    *const xmlChar,
                ) -> xmlXPathFunction,
=======
            libxml_xmlXPathFuncLookupFunc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        ),
        ctx as *mut libc::c_void,
    );
    if pyobj_ctx.is_null() || name.is_null() || pyobj_f.is_null() {
        py_retval = libxml_intWrap(-(1 as i32));
        return py_retval;
    }
    i = 0 as i32;
    loop {
        if !(i < libxml_xpathCallbacksNb) {
            current_block = 18377268871191777778;
            break;
        }
        if ctx == (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).ctx
            && xmlStrEqual(
                name,
                (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).name,
            ) != 0
            && xmlStrEqual(
                ns_uri,
                (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).ns_uri,
            ) != 0
        {
            if !pyobj_f.is_null() {
                let ref mut fresh157 = (*pyobj_f).ob_refcnt;
                *fresh157 += 1;
            }
            if !((*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize)).function)
                .is_null()
            {
                let ref mut fresh158 = (*(*(*libxml_xpathCallbacks)
                    .as_mut_ptr()
                    .offset(i as isize))
                    .function)
                    .ob_refcnt;
                *fresh158 -= 1;
                if !(*fresh158 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize))
                            .function)
                            .ob_type)
                            .tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect(
                            "non-null function pointer",
                        )(
                        (*(*libxml_xpathCallbacks).as_mut_ptr().offset(i as isize))
                            .function,
                    );
                }
            }
            let ref mut fresh159 = (*(*libxml_xpathCallbacks)
                .as_mut_ptr()
                .offset(i as isize))
                .function;
            *fresh159 = pyobj_f;
            c_retval = 1 as i32;
            current_block = 4356395540054036081;
            break;
        } else {
            i += 1;
        }
    }
    match current_block {
        18377268871191777778 => {
            if libxml_xpathCallbacksNb >= libxml_xpathCallbacksAllocd {
                libxml_xpathCallbacksAllocd += 10 as i32;
                libxml_xpathCallbacks = xmlRealloc
                    .expect(
                        "non-null function pointer",
                    )(
                    libxml_xpathCallbacks as *mut libc::c_void,
                    (libxml_xpathCallbacksAllocd as u64)
                        .wrapping_mul(
                            ::std::mem::size_of::<libxml_xpathCallback>()
                                as u64,
                        ),
                ) as *mut libxml_xpathCallbackArray;
            }
<<<<<<< HEAD
            let fresh160 = libxml_xpathCallbacksNb;
=======
            let mut fresh160 = libxml_xpathCallbacksNb;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            libxml_xpathCallbacksNb = libxml_xpathCallbacksNb + 1;
            i = fresh160;
            if !pyobj_f.is_null() {
                let ref mut fresh161 = (*pyobj_f).ob_refcnt;
                *fresh161 += 1;
            }
            let ref mut fresh162 = (*(*libxml_xpathCallbacks)
                .as_mut_ptr()
                .offset(i as isize))
                .ctx;
            *fresh162 = ctx;
            let ref mut fresh163 = (*(*libxml_xpathCallbacks)
                .as_mut_ptr()
                .offset(i as isize))
                .name;
            *fresh163 = xmlStrdup(name);
            let ref mut fresh164 = (*(*libxml_xpathCallbacks)
                .as_mut_ptr()
                .offset(i as isize))
                .ns_uri;
            *fresh164 = xmlStrdup(ns_uri);
            let ref mut fresh165 = (*(*libxml_xpathCallbacks)
                .as_mut_ptr()
                .offset(i as isize))
                .function;
            *fresh165 = pyobj_f;
            c_retval = 1 as i32;
        }
        _ => {}
    }
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlXPathRegisterVariable(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: i32 = 0 as i32;
    let mut name: *mut xmlChar = 0 as *mut xmlChar;
    let mut ns_uri: *mut xmlChar = 0 as *mut xmlChar;
    let mut ctx: xmlXPathContextPtr = 0 as *mut xmlXPathContext;
    let mut val: xmlXPathObjectPtr = 0 as *mut xmlXPathObject;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_value: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut c_retval: i32 = 0 as i32;
    let mut name: * mut u8 = 0 as *mut xmlChar;
    let mut ns_uri: * mut u8 = 0 as *mut xmlChar;
    let mut ctx: * mut crate::src::python::libxml::_xmlXPathContext = 0 as *mut xmlXPathContext;
    let mut val: * mut crate::src::python::libxml::_xmlXPathObject = 0 as *mut xmlXPathObject;
    let mut pyobj_ctx: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_value: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OszO:xpathRegisterVariable\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_ctx as *mut *mut PyObject,
        &mut name as *mut *mut xmlChar,
        &mut ns_uri as *mut *mut xmlChar,
        &mut pyobj_value as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    ctx = if pyobj_ctx == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlXPathContextPtr
    } else {
        (*(pyobj_ctx as *mut PyxmlXPathContext_Object)).obj
    };
    val = libxml_xmlXPathObjectPtrConvert(pyobj_value);
    c_retval = xmlXPathRegisterVariableNS(ctx, name, ns_uri, val);
    py_retval = libxml_intWrap(c_retval);
    return py_retval;
}
unsafe extern "C" fn libxml_name(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: *const xmlChar = 0 as *const xmlChar;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut resultobj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut res: * const u8 = 0 as *const xmlChar;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:name\0" as *const u8 as *const i8 as *mut i8,
        &mut obj as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    cur = if obj == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(obj as *mut PyxmlNode_Object)).obj
    };
    match (*cur).type_0 as u32 {
        9 | 13 => {
<<<<<<< HEAD
            let mut doc: xmlDocPtr = cur as xmlDocPtr;
            res = (*doc).URL;
        }
        2 => {
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
            res = (*attr).name;
        }
        18 => {
            let mut ns: xmlNsPtr = cur as xmlNsPtr;
=======
            let mut doc: * mut crate::src::python::libxml::_xmlDoc = cur as xmlDocPtr;
            res = (*doc).URL;
        }
        2 => {
            let mut attr: * mut crate::src::python::libxml::_xmlAttr = cur as xmlAttrPtr;
            res = (*attr).name;
        }
        18 => {
            let mut ns: * mut crate::src::python::libxml::_xmlNs = cur as xmlNsPtr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            res = (*ns).prefix;
        }
        _ => {
            res = (*cur).name;
        }
    }
    resultobj = libxml_constxmlCharPtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_doc(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlDocPtr = 0 as *mut xmlDoc;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut resultobj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut res: * mut crate::src::python::libxml::_xmlDoc = 0 as *mut xmlDoc;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:doc\0" as *const u8 as *const i8 as *mut i8,
        &mut obj as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    cur = if obj == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(obj as *mut PyxmlNode_Object)).obj
    };
    match (*cur).type_0 as u32 {
        9 | 13 => {
            res = 0 as xmlDocPtr;
        }
        2 => {
<<<<<<< HEAD
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
=======
            let mut attr: * mut crate::src::python::libxml::_xmlAttr = cur as xmlAttrPtr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            res = (*attr).doc;
        }
        18 => {
            res = 0 as xmlDocPtr;
        }
        _ => {
            res = (*cur).doc;
        }
    }
    resultobj = libxml_xmlDocPtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_properties(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlAttrPtr = 0 as *mut xmlAttr;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut resultobj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut res: * mut crate::src::python::libxml::_xmlAttr = 0 as *mut xmlAttr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:properties\0" as *const u8 as *const i8 as *mut i8,
        &mut obj as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    cur = if obj == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(obj as *mut PyxmlNode_Object)).obj
    };
    if !cur.is_null()
        && (*cur).type_0 as u32
            == XML_ELEMENT_NODE as i32 as u32
    {
        res = (*cur).properties;
    } else {
        res = 0 as xmlAttrPtr;
    }
    resultobj = libxml_xmlAttrPtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_next(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlNodePtr = 0 as *mut xmlNode;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut resultobj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut res: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:next\0" as *const u8 as *const i8 as *mut i8,
        &mut obj as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    cur = if obj == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(obj as *mut PyxmlNode_Object)).obj
    };
    match (*cur).type_0 as u32 {
        9 | 13 => {
            res = 0 as xmlNodePtr;
        }
        2 => {
<<<<<<< HEAD
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
            res = (*attr).next as xmlNodePtr;
        }
        18 => {
            let mut ns: xmlNsPtr = cur as xmlNsPtr;
=======
            let mut attr: * mut crate::src::python::libxml::_xmlAttr = cur as xmlAttrPtr;
            res = (*attr).next as xmlNodePtr;
        }
        18 => {
            let mut ns: * mut crate::src::python::libxml::_xmlNs = cur as xmlNsPtr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            res = (*ns).next as xmlNodePtr;
        }
        _ => {
            res = (*cur).next;
        }
    }
    resultobj = libxml_xmlNodePtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_prev(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlNodePtr = 0 as *mut xmlNode;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut resultobj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut res: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:prev\0" as *const u8 as *const i8 as *mut i8,
        &mut obj as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    cur = if obj == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(obj as *mut PyxmlNode_Object)).obj
    };
    match (*cur).type_0 as u32 {
        9 | 13 => {
            res = 0 as xmlNodePtr;
        }
        2 => {
<<<<<<< HEAD
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
=======
            let mut attr: * mut crate::src::python::libxml::_xmlAttr = cur as xmlAttrPtr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            res = (*attr).prev as xmlNodePtr;
        }
        18 => {
            res = 0 as xmlNodePtr;
        }
        _ => {
            res = (*cur).prev;
        }
    }
    resultobj = libxml_xmlNodePtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_children(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlNodePtr = 0 as *mut xmlNode;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut resultobj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut res: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:children\0" as *const u8 as *const i8 as *mut i8,
        &mut obj as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    cur = if obj == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(obj as *mut PyxmlNode_Object)).obj
    };
    match (*cur).type_0 as u32 {
        1 | 5 | 6 | 7 | 8 | 9 | 13 | 14 => {
            res = (*cur).children;
        }
        2 => {
<<<<<<< HEAD
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
=======
            let mut attr: * mut crate::src::python::libxml::_xmlAttr = cur as xmlAttrPtr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            res = (*attr).children;
        }
        _ => {
            res = 0 as xmlNodePtr;
        }
    }
    resultobj = libxml_xmlNodePtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_last(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlNodePtr = 0 as *mut xmlNode;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut resultobj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut res: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:last\0" as *const u8 as *const i8 as *mut i8,
        &mut obj as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    cur = if obj == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(obj as *mut PyxmlNode_Object)).obj
    };
    match (*cur).type_0 as u32 {
        1 | 5 | 6 | 7 | 8 | 9 | 13 | 14 => {
            res = (*cur).last;
        }
        2 => {
<<<<<<< HEAD
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
=======
            let mut attr: * mut crate::src::python::libxml::_xmlAttr = cur as xmlAttrPtr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            res = (*attr).last;
        }
        _ => {
            res = 0 as xmlNodePtr;
        }
    }
    resultobj = libxml_xmlNodePtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_parent(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: xmlNodePtr = 0 as *mut xmlNode;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut resultobj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut res: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:parent\0" as *const u8 as *const i8 as *mut i8,
        &mut obj as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    cur = if obj == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(obj as *mut PyxmlNode_Object)).obj
    };
    match (*cur).type_0 as u32 {
        9 | 13 => {
            res = 0 as xmlNodePtr;
        }
        2 => {
<<<<<<< HEAD
            let mut attr: xmlAttrPtr = cur as xmlAttrPtr;
=======
            let mut attr: * mut crate::src::python::libxml::_xmlAttr = cur as xmlAttrPtr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            res = (*attr).parent;
        }
        17 | 18 | 19 | 20 => {
            res = 0 as xmlNodePtr;
        }
        _ => {
            res = (*cur).parent;
        }
    }
    resultobj = libxml_xmlNodePtrWrap(res);
    return resultobj;
}
unsafe extern "C" fn libxml_type(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut resultobj: *mut PyObject = 0 as *mut PyObject;
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut cur: xmlNodePtr = 0 as *mut xmlNode;
    let mut res: *const xmlChar = 0 as *const xmlChar;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut resultobj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut obj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut cur: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut res: * const u8 = 0 as *const xmlChar;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:last\0" as *const u8 as *const i8 as *mut i8,
        &mut obj as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    cur = if obj == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(obj as *mut PyxmlNode_Object)).obj
    };
    if cur.is_null() {
<<<<<<< HEAD
        let ref mut fresh166 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh166 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh166 += 1;
        return &mut _Py_NoneStruct;
    }
    match (*cur).type_0 as u32 {
        1 => {
            res = b"element\0" as *const u8 as *const i8 as *const xmlChar;
        }
        2 => {
            res = b"attribute\0" as *const u8 as *const i8 as *const xmlChar;
        }
        3 => {
            res = b"text\0" as *const u8 as *const i8 as *const xmlChar;
        }
        4 => {
            res = b"cdata\0" as *const u8 as *const i8 as *const xmlChar;
        }
        5 => {
            res = b"entity_ref\0" as *const u8 as *const i8 as *const xmlChar;
        }
        6 => {
            res = b"entity\0" as *const u8 as *const i8 as *const xmlChar;
        }
        7 => {
            res = b"pi\0" as *const u8 as *const i8 as *const xmlChar;
        }
        8 => {
            res = b"comment\0" as *const u8 as *const i8 as *const xmlChar;
        }
        9 => {
            res = b"document_xml\0" as *const u8 as *const i8
                as *const xmlChar;
        }
        10 => {
            res = b"doctype\0" as *const u8 as *const i8 as *const xmlChar;
        }
        11 => {
            res = b"fragment\0" as *const u8 as *const i8 as *const xmlChar;
        }
        12 => {
            res = b"notation\0" as *const u8 as *const i8 as *const xmlChar;
        }
        13 => {
            res = b"document_html\0" as *const u8 as *const i8
                as *const xmlChar;
        }
        14 => {
            res = b"dtd\0" as *const u8 as *const i8 as *const xmlChar;
        }
        15 => {
            res = b"elem_decl\0" as *const u8 as *const i8 as *const xmlChar;
        }
        16 => {
            res = b"attribute_decl\0" as *const u8 as *const i8
                as *const xmlChar;
        }
        17 => {
            res = b"entity_decl\0" as *const u8 as *const i8 as *const xmlChar;
        }
        18 => {
            res = b"namespace\0" as *const u8 as *const i8 as *const xmlChar;
        }
        19 => {
            res = b"xinclude_start\0" as *const u8 as *const i8
                as *const xmlChar;
        }
        20 => {
            res = b"xinclude_end\0" as *const u8 as *const i8
                as *const xmlChar;
        }
        _ => {}
    }
    resultobj = libxml_constxmlCharPtrWrap(res);
    return resultobj;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlNodeGetNsDefs(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: xmlNsPtr = 0 as *mut xmlNs;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
    let mut pyobj_node: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut c_retval: * mut crate::src::python::libxml::_xmlNs = 0 as *mut xmlNs;
    let mut node: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut pyobj_node: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:xmlNodeGetNsDefs\0" as *const u8 as *const i8 as *mut i8,
        &mut pyobj_node as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    node = if pyobj_node == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(pyobj_node as *mut PyxmlNode_Object)).obj
    };
    if node.is_null()
        || (*node).type_0 as u32
            != XML_ELEMENT_NODE as i32 as u32
    {
<<<<<<< HEAD
        let ref mut fresh167 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh167 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh167 += 1;
        return &mut _Py_NoneStruct;
    }
    c_retval = (*node).nsDef;
    py_retval = libxml_xmlNsPtrWrap(c_retval);
    return py_retval;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlNodeRemoveNsDef(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut ns: xmlNsPtr = 0 as *mut xmlNs;
    let mut prev: xmlNsPtr = 0 as *mut xmlNs;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
    let mut pyobj_node: *mut PyObject = 0 as *mut PyObject;
    let mut href: *mut xmlChar = 0 as *mut xmlChar;
    let mut c_retval: xmlNsPtr = 0 as *mut xmlNs;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut ns: * mut crate::src::python::libxml::_xmlNs = 0 as *mut xmlNs;
    let mut prev: * mut crate::src::python::libxml::_xmlNs = 0 as *mut xmlNs;
    let mut node: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut pyobj_node: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut href: * mut u8 = 0 as *mut xmlChar;
    let mut c_retval: * mut crate::src::python::libxml::_xmlNs = 0 as *mut xmlNs;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"Oz:xmlNodeRemoveNsDef\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_node as *mut *mut PyObject,
        &mut href as *mut *mut xmlChar,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    node = if pyobj_node == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(pyobj_node as *mut PyxmlNode_Object)).obj
    };
    ns = 0 as xmlNsPtr;
    if node.is_null()
        || (*node).type_0 as u32
            != XML_ELEMENT_NODE as i32 as u32
    {
<<<<<<< HEAD
        let ref mut fresh168 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh168 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh168 += 1;
        return &mut _Py_NoneStruct;
    }
    if href.is_null() {
        ns = (*node).nsDef;
        let ref mut fresh169 = (*node).nsDef;
        *fresh169 = 0 as *mut xmlNs;
        c_retval = 0 as xmlNsPtr;
    } else {
        prev = 0 as xmlNsPtr;
        ns = (*node).nsDef;
        while !ns.is_null() {
            if xmlStrEqual((*ns).href, href) != 0 {
                if !prev.is_null() {
                    let ref mut fresh170 = (*prev).next;
                    *fresh170 = (*ns).next;
                } else {
                    let ref mut fresh171 = (*node).nsDef;
                    *fresh171 = (*ns).next;
                }
                let ref mut fresh172 = (*ns).next;
                *fresh172 = 0 as *mut _xmlNs;
                c_retval = 0 as xmlNsPtr;
                break;
            } else {
                prev = ns;
                ns = (*ns).next;
            }
        }
    }
    c_retval = ns;
    py_retval = libxml_xmlNsPtrWrap(c_retval);
    return py_retval;
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlNodeGetNs(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: xmlNsPtr = 0 as *mut xmlNs;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
    let mut pyobj_node: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut c_retval: * mut crate::src::python::libxml::_xmlNs = 0 as *mut xmlNs;
    let mut node: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut pyobj_node: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:xmlNodeGetNs\0" as *const u8 as *const i8 as *mut i8,
        &mut pyobj_node as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    node = if pyobj_node == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(pyobj_node as *mut PyxmlNode_Object)).obj
    };
    if node.is_null()
        || (*node).type_0 as u32
            != XML_ELEMENT_NODE as i32 as u32
            && (*node).type_0 as u32
                != XML_ATTRIBUTE_NODE as i32 as u32
    {
<<<<<<< HEAD
        let ref mut fresh173 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh173 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh173 += 1;
        return &mut _Py_NoneStruct;
    }
    c_retval = (*node).ns;
    py_retval = libxml_xmlNsPtrWrap(c_retval);
    return py_retval;
}
unsafe extern "C" fn libxml_serializeNode(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut c_retval: *mut xmlChar = 0 as *mut xmlChar;
    let mut pyobj_node: *mut PyObject = 0 as *mut PyObject;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
    let mut doc: xmlDocPtr = 0 as *mut xmlDoc;
    let mut encoding: *const i8 = 0 as *const i8;
    let mut format: i32 = 0;
    let mut ctxt: xmlSaveCtxtPtr = 0 as *mut xmlSaveCtxt;
    let mut buf: xmlBufferPtr = 0 as *mut xmlBuffer;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut c_retval: * mut u8 = 0 as *mut xmlChar;
    let mut pyobj_node: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut node: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut doc: * mut crate::src::python::libxml::_xmlDoc = 0 as *mut xmlDoc;
    let mut encoding: * const i8 = 0 as *const i8;
    let mut format: i32 = 0;
    let mut ctxt: * mut crate::src::python::libxml::_xmlSaveCtxt = 0 as *mut xmlSaveCtxt;
    let mut buf: * mut crate::src::python::libxml::_xmlBuffer = 0 as *mut xmlBuffer;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut options: i32 = 0 as i32;
    if _PyArg_ParseTuple_SizeT(
        args,
        b"Ozi:serializeNode\0" as *const u8 as *const i8 as *mut i8,
        &mut pyobj_node as *mut *mut PyObject,
        &mut encoding as *mut *const i8,
        &mut format as *mut i32,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    node = if pyobj_node == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(pyobj_node as *mut PyxmlNode_Object)).obj
    };
    if node.is_null() {
<<<<<<< HEAD
        let ref mut fresh174 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh174 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh174 += 1;
        return &mut _Py_NoneStruct;
    }
    if (*node).type_0 as u32 == XML_DOCUMENT_NODE as i32 as u32
    {
        doc = node as xmlDocPtr;
        node = 0 as xmlNodePtr;
    } else if (*node).type_0 as u32
            == XML_HTML_DOCUMENT_NODE as i32 as u32
        {
        doc = node as xmlDocPtr;
        node = 0 as xmlNodePtr;
    } else {
        if (*node).type_0 as u32
            == XML_NAMESPACE_DECL as i32 as u32
        {
            doc = 0 as xmlDocPtr;
        } else {
            doc = (*node).doc;
        }
        if !(doc.is_null()
            || (*doc).type_0 as u32
                == XML_DOCUMENT_NODE as i32 as u32)
        {
            if (*doc).type_0 as u32
                == XML_HTML_DOCUMENT_NODE as i32 as u32
            {} else {
<<<<<<< HEAD
                let ref mut fresh175 = (*(&mut _Py_NoneStruct as *mut PyObject))
=======
                let ref mut fresh175 = (*((Some(&mut _Py_NoneStruct))).unwrap())
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                    .ob_refcnt;
                *fresh175 += 1;
                return &mut _Py_NoneStruct;
            }
        }
    }
    buf = xmlBufferCreate();
    if buf.is_null() {
<<<<<<< HEAD
        let ref mut fresh176 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh176 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh176 += 1;
        return &mut _Py_NoneStruct;
    }
    if format != 0 {
        options |= XML_SAVE_FORMAT as i32;
    }
    ctxt = xmlSaveToBuffer(buf, encoding, options);
    if ctxt.is_null() {
        xmlBufferFree(buf);
<<<<<<< HEAD
        let ref mut fresh177 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh177 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh177 += 1;
        return &mut _Py_NoneStruct;
    }
    if node.is_null() {
        xmlSaveDoc(ctxt, doc);
    } else {
        xmlSaveTree(ctxt, node);
    }
    xmlSaveClose(ctxt);
    c_retval = (*buf).content;
    let ref mut fresh178 = (*buf).content;
    *fresh178 = 0 as *mut xmlChar;
    xmlBufferFree(buf);
    py_retval = libxml_charPtrWrap(c_retval as *mut i8);
    return py_retval;
}
unsafe extern "C" fn libxml_saveNodeTo(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_file: *mut PyObject = 0 as *mut PyObject;
    let mut output: *mut FILE = 0 as *mut FILE;
    let mut pyobj_node: *mut PyObject = 0 as *mut PyObject;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
    let mut doc: xmlDocPtr = 0 as *mut xmlDoc;
    let mut encoding: *const i8 = 0 as *const i8;
    let mut format: i32 = 0;
    let mut len: i32 = 0;
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
    let mut handler: xmlCharEncodingHandlerPtr = 0 as xmlCharEncodingHandlerPtr;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_file: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut output: * mut crate::src::python::libxml::_IO_FILE = 0 as *mut FILE;
    let mut pyobj_node: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut node: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut doc: * mut crate::src::python::libxml::_xmlDoc = 0 as *mut xmlDoc;
    let mut encoding: * const i8 = 0 as *const i8;
    let mut format: i32 = 0;
    let mut len: i32 = 0;
    let mut buf: * mut crate::src::python::libxml::_xmlOutputBuffer = 0 as *mut xmlOutputBuffer;
    let mut handler: * mut crate::src::python::libxml::_xmlCharEncodingHandler = 0 as xmlCharEncodingHandlerPtr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OOzi:serializeNode\0" as *const u8 as *const i8 as *mut i8,
        &mut pyobj_node as *mut *mut PyObject,
        &mut py_file as *mut *mut PyObject,
        &mut encoding as *mut *const i8,
        &mut format as *mut i32,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    node = if pyobj_node == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(pyobj_node as *mut PyxmlNode_Object)).obj
    };
    if node.is_null() {
        return PyLong_FromLong(-(1 as i32) as i64);
    }
    output = if py_file == &mut _Py_NoneStruct as *mut PyObject {
        0 as *mut FILE
    } else if (*py_file).ob_type == &mut PyFile_Type as *mut PyTypeObject
            || PyType_IsSubtype((*py_file).ob_type, &mut PyFile_Type) != 0
        {
        PyFile_AsFile(py_file)
    } else {
        stdout
    };
    if output.is_null() {
        return PyLong_FromLong(-(1 as i32) as i64);
    }
    if (*node).type_0 as u32 == XML_DOCUMENT_NODE as i32 as u32
    {
        doc = node as xmlDocPtr;
    } else if (*node).type_0 as u32
            == XML_HTML_DOCUMENT_NODE as i32 as u32
        {
        doc = node as xmlDocPtr;
    } else {
        doc = (*node).doc;
    }
    if (*doc).type_0 as u32
        == XML_HTML_DOCUMENT_NODE as i32 as u32
    {
        if encoding.is_null() {
            encoding = htmlGetMetaEncoding(doc) as *const i8;
        }
    }
    if !encoding.is_null() {
        handler = xmlFindCharEncodingHandler(encoding);
        if handler.is_null() {
            return PyLong_FromLong(-(1 as i32) as i64);
        }
    }
    if (*doc).type_0 as u32
        == XML_HTML_DOCUMENT_NODE as i32 as u32
    {
        if handler.is_null() {
            handler = xmlFindCharEncodingHandler(
                b"HTML\0" as *const u8 as *const i8,
            );
        }
        if handler.is_null() {
            handler = xmlFindCharEncodingHandler(
                b"ascii\0" as *const u8 as *const i8,
            );
        }
    }
    buf = xmlOutputBufferCreateFile(output, handler);
    if (*node).type_0 as u32 == XML_DOCUMENT_NODE as i32 as u32
    {
        len = xmlSaveFormatFileTo(buf, doc, encoding, format);
    } else if (*node).type_0 as u32
            == XML_HTML_DOCUMENT_NODE as i32 as u32
        {
        htmlDocContentDumpFormatOutput(buf, doc, encoding, format);
        len = xmlOutputBufferClose(buf);
    } else if (*doc).type_0 as u32
            == XML_HTML_DOCUMENT_NODE as i32 as u32
        {
        htmlNodeDumpFormatOutput(buf, doc, node, encoding, format);
        len = xmlOutputBufferClose(buf);
    } else {
        xmlNodeDumpOutput(buf, doc, node, 0 as i32, format, encoding);
        len = xmlOutputBufferClose(buf);
    }
    return PyLong_FromLong(len as i64);
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlNewNode(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut name: *mut xmlChar = 0 as *mut xmlChar;
    let mut node: xmlNodePtr = 0 as *mut xmlNode;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut name: * mut u8 = 0 as *mut xmlChar;
    let mut node: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"s:xmlNewNode\0" as *const u8 as *const i8 as *mut i8,
        &mut name as *mut *mut xmlChar,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    node = xmlNewNode(0 as xmlNsPtr, name);
    if node.is_null() {
<<<<<<< HEAD
        let ref mut fresh179 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
        let ref mut fresh179 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        *fresh179 += 1;
        return &mut _Py_NoneStruct;
    }
    py_retval = libxml_xmlNodePtrWrap(node);
    return py_retval;
}
unsafe extern "C" fn libxml_addLocalCatalog(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut URL: *mut xmlChar = 0 as *mut xmlChar;
    let mut ctxt: xmlParserCtxtPtr = 0 as *mut xmlParserCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut URL: * mut u8 = 0 as *mut xmlChar;
    let mut ctxt: * mut crate::src::python::libxml::_xmlParserCtxt = 0 as *mut xmlParserCtxt;
    let mut pyobj_ctxt: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"Os:addLocalCatalog\0" as *const u8 as *const i8 as *mut i8,
        &mut pyobj_ctxt as *mut *mut PyObject,
        &mut URL as *mut *mut xmlChar,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    ctxt = if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlParserCtxtPtr
    } else {
        (*(pyobj_ctxt as *mut PyparserCtxt_Object)).obj
    };
    if !URL.is_null() {
        let ref mut fresh180 = (*ctxt).catalogs;
        *fresh180 = xmlCatalogAddLocal((*ctxt).catalogs, URL);
    }
<<<<<<< HEAD
    let ref mut fresh181 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
    let ref mut fresh181 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    *fresh181 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn libxml_xmlRelaxNGValidityGenericErrorFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut str: *mut i8,
) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlRelaxNGValidCtxtPyCtxtPtr = 0 as *mut xmlRelaxNGValidCtxtPyCtxt;
=======
    mut ctx: * mut core::ffi::c_void,
    mut str: * mut i8,
) {
    let mut list: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlRelaxNGValidCtxtPyCtxt = (0 as * mut crate::src::python::libxml::xmlRelaxNGValidCtxtPyCtxt);
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pyCtxt = ctx as xmlRelaxNGValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as i32 as Py_ssize_t);
    PyTuple_SetItem(list, 0 as i32 as Py_ssize_t, libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as i32 as Py_ssize_t, (*pyCtxt).arg);
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh182 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh182 += 1;
    }
    result = PyEval_CallObjectWithKeywords(
        (*pyCtxt).error,
        list,
        0 as *mut libc::c_void as *mut PyObject,
    );
    if result.is_null() {
        PyErr_Print();
    }
    if !list.is_null() {
        let ref mut fresh183 = (*list).ob_refcnt;
        *fresh183 -= 1;
        if !(*fresh183 != 0 as i32 as i64) {
            (Some(((*(*list).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        let ref mut fresh184 = (*result).ob_refcnt;
        *fresh184 -= 1;
        if !(*fresh184 != 0 as i32 as i64) {
            (Some(((*(*result).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(result);
        }
    }
}
unsafe extern "C" fn libxml_xmlRelaxNGValidityGenericWarningFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut str: *mut i8,
) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlRelaxNGValidCtxtPyCtxtPtr = 0 as *mut xmlRelaxNGValidCtxtPyCtxt;
=======
    mut ctx: * mut core::ffi::c_void,
    mut str: * mut i8,
) {
    let mut list: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlRelaxNGValidCtxtPyCtxt = (0 as * mut crate::src::python::libxml::xmlRelaxNGValidCtxtPyCtxt);
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pyCtxt = ctx as xmlRelaxNGValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as i32 as Py_ssize_t);
    PyTuple_SetItem(list, 0 as i32 as Py_ssize_t, libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as i32 as Py_ssize_t, (*pyCtxt).arg);
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh185 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh185 += 1;
    }
    result = PyEval_CallObjectWithKeywords(
        (*pyCtxt).warn,
        list,
        0 as *mut libc::c_void as *mut PyObject,
    );
    if result.is_null() {
        PyErr_Print();
    }
    if !list.is_null() {
        let ref mut fresh186 = (*list).ob_refcnt;
        *fresh186 -= 1;
        if !(*fresh186 != 0 as i32 as i64) {
            (Some(((*(*list).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        let ref mut fresh187 = (*result).ob_refcnt;
        *fresh187 -= 1;
        if !(*fresh187 != 0 as i32 as i64) {
            (Some(((*(*result).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(result);
        }
    }
}
unsafe extern "C" fn libxml_xmlRelaxNGValidityErrorFunc(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut ap: ::std::ffi::VaListImpl;
=======
    mut ctx: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut ap: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ap = args.clone();
    libxml_xmlRelaxNGValidityGenericErrorFuncHandler(
        ctx,
        libxml_buildMessage(msg, ap.as_va_list()),
    );
}
unsafe extern "C" fn libxml_xmlRelaxNGValidityWarningFunc(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut ap: ::std::ffi::VaListImpl;
=======
    mut ctx: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut ap: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ap = args.clone();
    libxml_xmlRelaxNGValidityGenericWarningFuncHandler(
        ctx,
        libxml_buildMessage(msg, ap.as_va_list()),
    );
}
unsafe extern "C" fn libxml_xmlRelaxNGSetValidErrors(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_error: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_warn: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_arg: *mut PyObject = &mut _Py_NoneStruct;
    let mut ctxt: xmlRelaxNGValidCtxtPtr = 0 as *mut xmlRelaxNGValidCtxt;
    let mut pyCtxt: xmlRelaxNGValidCtxtPyCtxtPtr = 0 as *mut xmlRelaxNGValidCtxtPyCtxt;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_error: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_warn: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_ctx: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_arg: * mut crate::src::python::libxml::_object = &mut _Py_NoneStruct;
    let mut ctxt: * mut crate::src::python::types::_xmlRelaxNGValidCtxt = 0 as *mut xmlRelaxNGValidCtxt;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlRelaxNGValidCtxtPyCtxt = 0 as *mut xmlRelaxNGValidCtxtPyCtxt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OOO|O:xmlRelaxNGSetValidErrors\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_ctx as *mut *mut PyObject,
        &mut pyobj_error as *mut *mut PyObject,
        &mut pyobj_warn as *mut *mut PyObject,
        &mut pyobj_arg as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    ctxt = if pyobj_ctx == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlRelaxNGValidCtxtPtr
    } else {
        (*(pyobj_ctx as *mut PyrelaxNgValidCtxt_Object)).obj
    };
    if xmlRelaxNGGetValidErrors(
        ctxt,
        0 as *mut xmlRelaxNGValidityErrorFunc,
        0 as *mut xmlRelaxNGValidityWarningFunc,
        &mut pyCtxt as *mut xmlRelaxNGValidCtxtPyCtxtPtr as *mut *mut libc::c_void,
    ) == -(1 as i32)
    {
        py_retval = libxml_intWrap(-(1 as i32));
        return py_retval;
    }
    if pyCtxt.is_null() {
        pyCtxt = xmlMalloc
            .expect(
                "non-null function pointer",
            )(::std::mem::size_of::<xmlRelaxNGValidCtxtPyCtxt>() as u64)
            as xmlRelaxNGValidCtxtPyCtxtPtr;
        if pyCtxt.is_null() {
            py_retval = libxml_intWrap(-(1 as i32));
            return py_retval;
        }
        memset(
            pyCtxt as *mut libc::c_void,
            0 as i32,
            ::std::mem::size_of::<xmlRelaxNGValidCtxtPyCtxt>() as u64,
        );
    }
    if !((*pyCtxt).error).is_null() {
        let ref mut fresh188 = (*(*pyCtxt).error).ob_refcnt;
        *fresh188 -= 1;
        if !(*fresh188 != 0 as i32 as i64) {
            (Some(
                ((*(*(*pyCtxt).error).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")((*pyCtxt).error);
        }
    }
    if !pyobj_error.is_null() {
        let ref mut fresh189 = (*pyobj_error).ob_refcnt;
        *fresh189 += 1;
    }
    let ref mut fresh190 = (*pyCtxt).error;
    *fresh190 = pyobj_error;
    if !((*pyCtxt).warn).is_null() {
        let ref mut fresh191 = (*(*pyCtxt).warn).ob_refcnt;
        *fresh191 -= 1;
        if !(*fresh191 != 0 as i32 as i64) {
            (Some(
                ((*(*(*pyCtxt).warn).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")((*pyCtxt).warn);
        }
    }
    if !pyobj_warn.is_null() {
        let ref mut fresh192 = (*pyobj_warn).ob_refcnt;
        *fresh192 += 1;
    }
    let ref mut fresh193 = (*pyCtxt).warn;
    *fresh193 = pyobj_warn;
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh194 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh194 -= 1;
        if !(*fresh194 != 0 as i32 as i64) {
            (Some(
                ((*(*(*pyCtxt).arg).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")((*pyCtxt).arg);
        }
    }
    if !pyobj_arg.is_null() {
        let ref mut fresh195 = (*pyobj_arg).ob_refcnt;
        *fresh195 += 1;
    }
    let ref mut fresh196 = (*pyCtxt).arg;
    *fresh196 = pyobj_arg;
    xmlRelaxNGSetValidErrors(
        ctxt,
        Some(
<<<<<<< HEAD
            libxml_xmlRelaxNGValidityErrorFunc
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
        ),
        Some(
            libxml_xmlRelaxNGValidityWarningFunc
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
=======
            libxml_xmlRelaxNGValidityErrorFunc,
        ),
        Some(
            libxml_xmlRelaxNGValidityWarningFunc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        ),
        pyCtxt as *mut libc::c_void,
    );
    py_retval = libxml_intWrap(1 as i32);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlRelaxNGFreeValidCtxt(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut ctxt: xmlRelaxNGValidCtxtPtr = 0 as *mut xmlRelaxNGValidCtxt;
    let mut pyCtxt: xmlRelaxNGValidCtxtPyCtxtPtr = 0 as *mut xmlRelaxNGValidCtxtPyCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut ctxt: * mut crate::src::python::types::_xmlRelaxNGValidCtxt = 0 as *mut xmlRelaxNGValidCtxt;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlRelaxNGValidCtxtPyCtxt = 0 as *mut xmlRelaxNGValidCtxtPyCtxt;
    let mut pyobj_ctxt: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:xmlRelaxNGFreeValidCtxt\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_ctxt as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    ctxt = if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlRelaxNGValidCtxtPtr
    } else {
        (*(pyobj_ctxt as *mut PyrelaxNgValidCtxt_Object)).obj
    };
    if xmlRelaxNGGetValidErrors(
        ctxt,
        0 as *mut xmlRelaxNGValidityErrorFunc,
        0 as *mut xmlRelaxNGValidityWarningFunc,
        &mut pyCtxt as *mut xmlRelaxNGValidCtxtPyCtxtPtr as *mut *mut libc::c_void,
    ) == 0 as i32
    {
        if !pyCtxt.is_null() {
            if !((*pyCtxt).error).is_null() {
                let ref mut fresh197 = (*(*pyCtxt).error).ob_refcnt;
                *fresh197 -= 1;
                if !(*fresh197 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).error).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).error);
                }
            }
            if !((*pyCtxt).warn).is_null() {
                let ref mut fresh198 = (*(*pyCtxt).warn).ob_refcnt;
                *fresh198 -= 1;
                if !(*fresh198 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).warn).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).warn);
                }
            }
            if !((*pyCtxt).arg).is_null() {
                let ref mut fresh199 = (*(*pyCtxt).arg).ob_refcnt;
                *fresh199 -= 1;
                if !(*fresh199 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).arg).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).arg);
                }
            }
            xmlFree.expect("non-null function pointer")(pyCtxt as *mut libc::c_void);
        }
    }
    xmlRelaxNGFreeValidCtxt(ctxt);
<<<<<<< HEAD
    let ref mut fresh200 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
=======
    let ref mut fresh200 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    *fresh200 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn libxml_xmlSchemaValidityGenericErrorFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut str: *mut i8,
) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlSchemaValidCtxtPyCtxtPtr = 0 as *mut xmlSchemaValidCtxtPyCtxt;
=======
    mut ctx: * mut core::ffi::c_void,
    mut str: * mut i8,
) {
    let mut list: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlSchemaValidCtxtPyCtxt = (0 as * mut crate::src::python::libxml::xmlSchemaValidCtxtPyCtxt);
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pyCtxt = ctx as xmlSchemaValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as i32 as Py_ssize_t);
    PyTuple_SetItem(list, 0 as i32 as Py_ssize_t, libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as i32 as Py_ssize_t, (*pyCtxt).arg);
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh201 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh201 += 1;
    }
    result = PyEval_CallObjectWithKeywords(
        (*pyCtxt).error,
        list,
        0 as *mut libc::c_void as *mut PyObject,
    );
    if result.is_null() {
        PyErr_Print();
    }
    if !list.is_null() {
        let ref mut fresh202 = (*list).ob_refcnt;
        *fresh202 -= 1;
        if !(*fresh202 != 0 as i32 as i64) {
            (Some(((*(*list).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        let ref mut fresh203 = (*result).ob_refcnt;
        *fresh203 -= 1;
        if !(*fresh203 != 0 as i32 as i64) {
            (Some(((*(*result).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(result);
        }
    }
}
unsafe extern "C" fn libxml_xmlSchemaValidityGenericWarningFuncHandler(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut str: *mut i8,
) {
    let mut list: *mut PyObject = 0 as *mut PyObject;
    let mut result: *mut PyObject = 0 as *mut PyObject;
    let mut pyCtxt: xmlSchemaValidCtxtPyCtxtPtr = 0 as *mut xmlSchemaValidCtxtPyCtxt;
=======
    mut ctx: * mut core::ffi::c_void,
    mut str: * mut i8,
) {
    let mut list: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut result: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlSchemaValidCtxtPyCtxt = (0 as * mut crate::src::python::libxml::xmlSchemaValidCtxtPyCtxt);
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    pyCtxt = ctx as xmlSchemaValidCtxtPyCtxtPtr;
    list = PyTuple_New(2 as i32 as Py_ssize_t);
    PyTuple_SetItem(list, 0 as i32 as Py_ssize_t, libxml_charPtrWrap(str));
    PyTuple_SetItem(list, 1 as i32 as Py_ssize_t, (*pyCtxt).arg);
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh204 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh204 += 1;
    }
    result = PyEval_CallObjectWithKeywords(
        (*pyCtxt).warn,
        list,
        0 as *mut libc::c_void as *mut PyObject,
    );
    if result.is_null() {
        PyErr_Print();
    }
    if !list.is_null() {
        let ref mut fresh205 = (*list).ob_refcnt;
        *fresh205 -= 1;
        if !(*fresh205 != 0 as i32 as i64) {
            (Some(((*(*list).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(list);
        }
    }
    if !result.is_null() {
        let ref mut fresh206 = (*result).ob_refcnt;
        *fresh206 -= 1;
        if !(*fresh206 != 0 as i32 as i64) {
            (Some(((*(*result).ob_type).tp_dealloc).expect("non-null function pointer")))
                .expect("non-null function pointer")(result);
        }
    }
}
unsafe extern "C" fn libxml_xmlSchemaValidityErrorFunc(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut ap: ::std::ffi::VaListImpl;
=======
    mut ctx: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut ap: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ap = args.clone();
    libxml_xmlSchemaValidityGenericErrorFuncHandler(
        ctx,
        libxml_buildMessage(msg, ap.as_va_list()),
    );
}
unsafe extern "C" fn libxml_xmlSchemaValidityWarningFunc(
<<<<<<< HEAD
    mut ctx: *mut libc::c_void,
    mut msg: *const i8,
    mut args: ...
) {
    let mut ap: ::std::ffi::VaListImpl;
=======
    mut ctx: * mut core::ffi::c_void,
    mut msg: * const i8,
    mut args: ...
) {
    let mut ap: core::ffi::VaListImpl;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    ap = args.clone();
    libxml_xmlSchemaValidityGenericWarningFuncHandler(
        ctx,
        libxml_buildMessage(msg, ap.as_va_list()),
    );
}
#[no_mangle]
pub unsafe extern "C" fn libxml_xmlSchemaSetValidErrors(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_error: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_warn: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_ctx: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_arg: *mut PyObject = &mut _Py_NoneStruct;
    let mut ctxt: xmlSchemaValidCtxtPtr = 0 as *mut xmlSchemaValidCtxt;
    let mut pyCtxt: xmlSchemaValidCtxtPyCtxtPtr = 0 as *mut xmlSchemaValidCtxtPyCtxt;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_error: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_warn: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_ctx: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_arg: * mut crate::src::python::libxml::_object = &mut _Py_NoneStruct;
    let mut ctxt: * mut crate::src::python::types::_xmlSchemaValidCtxt = 0 as *mut xmlSchemaValidCtxt;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlSchemaValidCtxtPyCtxt = 0 as *mut xmlSchemaValidCtxtPyCtxt;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OOO|O:xmlSchemaSetValidErrors\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_ctx as *mut *mut PyObject,
        &mut pyobj_error as *mut *mut PyObject,
        &mut pyobj_warn as *mut *mut PyObject,
        &mut pyobj_arg as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    ctxt = if pyobj_ctx == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlSchemaValidCtxtPtr
    } else {
        (*(pyobj_ctx as *mut PySchemaValidCtxt_Object)).obj
    };
    if xmlSchemaGetValidErrors(
        ctxt,
        0 as *mut xmlSchemaValidityErrorFunc,
        0 as *mut xmlSchemaValidityWarningFunc,
        &mut pyCtxt as *mut xmlSchemaValidCtxtPyCtxtPtr as *mut *mut libc::c_void,
    ) == -(1 as i32)
    {
        py_retval = libxml_intWrap(-(1 as i32));
        return py_retval;
    }
    if pyCtxt.is_null() {
        pyCtxt = xmlMalloc
            .expect(
                "non-null function pointer",
            )(::std::mem::size_of::<xmlSchemaValidCtxtPyCtxt>() as u64)
            as xmlSchemaValidCtxtPyCtxtPtr;
        if pyCtxt.is_null() {
            py_retval = libxml_intWrap(-(1 as i32));
            return py_retval;
        }
        memset(
            pyCtxt as *mut libc::c_void,
            0 as i32,
            ::std::mem::size_of::<xmlSchemaValidCtxtPyCtxt>() as u64,
        );
    }
    if !((*pyCtxt).error).is_null() {
        let ref mut fresh207 = (*(*pyCtxt).error).ob_refcnt;
        *fresh207 -= 1;
        if !(*fresh207 != 0 as i32 as i64) {
            (Some(
                ((*(*(*pyCtxt).error).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")((*pyCtxt).error);
        }
    }
    if !pyobj_error.is_null() {
        let ref mut fresh208 = (*pyobj_error).ob_refcnt;
        *fresh208 += 1;
    }
    let ref mut fresh209 = (*pyCtxt).error;
    *fresh209 = pyobj_error;
    if !((*pyCtxt).warn).is_null() {
        let ref mut fresh210 = (*(*pyCtxt).warn).ob_refcnt;
        *fresh210 -= 1;
        if !(*fresh210 != 0 as i32 as i64) {
            (Some(
                ((*(*(*pyCtxt).warn).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")((*pyCtxt).warn);
        }
    }
    if !pyobj_warn.is_null() {
        let ref mut fresh211 = (*pyobj_warn).ob_refcnt;
        *fresh211 += 1;
    }
    let ref mut fresh212 = (*pyCtxt).warn;
    *fresh212 = pyobj_warn;
    if !((*pyCtxt).arg).is_null() {
        let ref mut fresh213 = (*(*pyCtxt).arg).ob_refcnt;
        *fresh213 -= 1;
        if !(*fresh213 != 0 as i32 as i64) {
            (Some(
                ((*(*(*pyCtxt).arg).ob_type).tp_dealloc)
                    .expect("non-null function pointer"),
            ))
                .expect("non-null function pointer")((*pyCtxt).arg);
        }
    }
    if !pyobj_arg.is_null() {
        let ref mut fresh214 = (*pyobj_arg).ob_refcnt;
        *fresh214 += 1;
    }
    let ref mut fresh215 = (*pyCtxt).arg;
    *fresh215 = pyobj_arg;
    xmlSchemaSetValidErrors(
        ctxt,
        Some(
<<<<<<< HEAD
            libxml_xmlSchemaValidityErrorFunc
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
        ),
        Some(
            libxml_xmlSchemaValidityWarningFunc
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    ...
                ) -> (),
=======
            libxml_xmlSchemaValidityErrorFunc,
        ),
        Some(
            libxml_xmlSchemaValidityWarningFunc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        ),
        pyCtxt as *mut libc::c_void,
    );
    py_retval = libxml_intWrap(1 as i32);
    return py_retval;
}
unsafe extern "C" fn libxml_xmlSchemaFreeValidCtxt(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut ctxt: xmlSchemaValidCtxtPtr = 0 as *mut xmlSchemaValidCtxt;
    let mut pyCtxt: xmlSchemaValidCtxtPyCtxtPtr = 0 as *mut xmlSchemaValidCtxtPyCtxt;
    let mut pyobj_ctxt: *mut PyObject = 0 as *mut PyObject;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut ctxt: * mut crate::src::python::types::_xmlSchemaValidCtxt = 0 as *mut xmlSchemaValidCtxt;
    let mut pyCtxt: * mut crate::src::python::libxml::xmlSchemaValidCtxtPyCtxt = 0 as *mut xmlSchemaValidCtxtPyCtxt;
    let mut pyobj_ctxt: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:xmlSchemaFreeValidCtxt\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_ctxt as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    ctxt = if pyobj_ctxt == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlSchemaValidCtxtPtr
    } else {
        (*(pyobj_ctxt as *mut PySchemaValidCtxt_Object)).obj
    };
    if xmlSchemaGetValidErrors(
        ctxt,
        0 as *mut xmlSchemaValidityErrorFunc,
        0 as *mut xmlSchemaValidityWarningFunc,
        &mut pyCtxt as *mut xmlSchemaValidCtxtPyCtxtPtr as *mut *mut libc::c_void,
    ) == 0 as i32
    {
        if !pyCtxt.is_null() {
            if !((*pyCtxt).error).is_null() {
                let ref mut fresh216 = (*(*pyCtxt).error).ob_refcnt;
                *fresh216 -= 1;
                if !(*fresh216 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).error).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).error);
                }
            }
            if !((*pyCtxt).warn).is_null() {
                let ref mut fresh217 = (*(*pyCtxt).warn).ob_refcnt;
                *fresh217 -= 1;
                if !(*fresh217 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).warn).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).warn);
                }
            }
            if !((*pyCtxt).arg).is_null() {
                let ref mut fresh218 = (*(*pyCtxt).arg).ob_refcnt;
                *fresh218 -= 1;
                if !(*fresh218 != 0 as i32 as i64) {
                    (Some(
                        ((*(*(*pyCtxt).arg).ob_type).tp_dealloc)
                            .expect("non-null function pointer"),
                    ))
                        .expect("non-null function pointer")((*pyCtxt).arg);
                }
            }
            xmlFree.expect("non-null function pointer")(pyCtxt as *mut libc::c_void);
        }
    }
    xmlSchemaFreeValidCtxt(ctxt);
<<<<<<< HEAD
    let ref mut fresh219 = (*(&mut _Py_NoneStruct as *mut PyObject)).ob_refcnt;
    *fresh219 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn PyxmlNodeSet_Convert(
    mut py_nodeset: *mut PyObject,
    mut result: *mut xmlNodeSetPtr,
) -> i32 {
    let mut nodeSet: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
=======
    let ref mut fresh219 = (*((Some(&mut _Py_NoneStruct))).unwrap()).ob_refcnt;
    *fresh219 += 1;
    return &mut _Py_NoneStruct;
}
unsafe extern "C" fn PyxmlNodeSet_Convert<'a1>(
    mut py_nodeset: * mut crate::src::python::libxml::_object,
    mut result: Option<&'a1 mut * mut crate::src::python::libxml::_xmlNodeSet>,
) -> i32 {
    let mut nodeSet: * mut crate::src::python::libxml::_xmlNodeSet = 0 as *mut xmlNodeSet;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut is_tuple: i32 = 0 as i32;
    if (*(*py_nodeset).ob_type).tp_flags & (1 as i64) << 26 as i32
        != 0 as i32 as i64
    {
        is_tuple = 1 as i32;
    } else if (*(*py_nodeset).ob_type).tp_flags
            & (1 as i64) << 25 as i32
            != 0 as i32 as i64
        {
        is_tuple = 0 as i32;
    } else if py_nodeset == &mut _Py_NoneStruct as *mut PyObject {
<<<<<<< HEAD
        *result = 0 as xmlNodeSetPtr;
=======
        *(borrow_mut(&mut result)).unwrap() = 0 as xmlNodeSetPtr;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        return 0 as i32;
    } else {
        PyErr_SetString(
            PyExc_TypeError,
            b"must be a tuple or list of nodes.\0" as *const u8 as *const i8,
        );
        return -(1 as i32);
    }
    nodeSet = xmlMalloc
        .expect(
            "non-null function pointer",
        )(::std::mem::size_of::<xmlNodeSet>() as u64) as xmlNodeSetPtr;
    if nodeSet.is_null() {
        PyErr_SetString(PyExc_MemoryError, b"\0" as *const u8 as *const i8);
        return -(1 as i32);
    }
    (*nodeSet).nodeNr = 0 as i32;
    (*nodeSet)
        .nodeMax = (if is_tuple != 0 {
        (*(py_nodeset as *mut PyVarObject)).ob_size
    } else {
        (*(py_nodeset as *mut PyVarObject)).ob_size
    }) as i32;
    let ref mut fresh220 = (*nodeSet).nodeTab;
    *fresh220 = xmlMalloc
        .expect(
            "non-null function pointer",
        )(
        ((*nodeSet).nodeMax as u64)
            .wrapping_mul(::std::mem::size_of::<xmlNodePtr>() as u64),
    ) as *mut xmlNodePtr;
    if ((*nodeSet).nodeTab).is_null() {
        xmlFree.expect("non-null function pointer")(nodeSet as *mut libc::c_void);
        PyErr_SetString(PyExc_MemoryError, b"\0" as *const u8 as *const i8);
        return -(1 as i32);
    }
    memset(
        (*nodeSet).nodeTab as *mut libc::c_void,
        0 as i32,
        ((*nodeSet).nodeMax as u64)
            .wrapping_mul(::std::mem::size_of::<xmlNodePtr>() as u64),
    );
    let mut idx: i32 = 0;
    idx = 0 as i32;
    while idx < (*nodeSet).nodeMax {
<<<<<<< HEAD
        let mut pynode: xmlNodePtr = if (if is_tuple != 0 {
            *((*(py_nodeset as *mut PyTupleObject)).ob_item)
                .as_mut_ptr()
                .offset(idx as isize)
        } else {
            *((*(py_nodeset as *mut PyListObject)).ob_item).offset(idx as isize)
=======
        let mut pynode: * mut crate::src::python::libxml::_xmlNode = if (if is_tuple != 0 {
            (*crate::__laertes_array::Get::<&_>::get_offset(((*(py_nodeset as *mut PyTupleObject)).ob_item).as_ref().unwrap(), (idx as isize)))
        } else {
            (*crate::__laertes_array::Get::<&_>::get_offset(crate::__laertes_array::borrow(& ((*(py_nodeset as *mut PyListObject)).ob_item))/*borrow*/.as_ref().unwrap(), (idx as isize)))
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        }) == &mut _Py_NoneStruct as *mut PyObject
        {
            0 as xmlNodePtr
        } else {
            (*((if is_tuple != 0 {
<<<<<<< HEAD
                *((*(py_nodeset as *mut PyTupleObject)).ob_item)
                    .as_mut_ptr()
                    .offset(idx as isize)
            } else {
                *((*(py_nodeset as *mut PyListObject)).ob_item).offset(idx as isize)
=======
                (*crate::__laertes_array::GetMut::<&mut _>::get_offset_mut(((*(py_nodeset as *mut PyTupleObject)).ob_item).as_mut().unwrap(), (idx as isize)))
            } else {
                (*crate::__laertes_array::GetMut::<&mut _>::get_offset_mut(crate::__laertes_array::borrow_mut(&mut ((*(py_nodeset as *mut PyListObject)).ob_item))/*borrow*/.as_mut().unwrap(), (idx as isize)))
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            }) as *mut PyxmlNode_Object))
                .obj
        };
        if !pynode.is_null() {
            let ref mut fresh221 = (*nodeSet).nodeNr;
<<<<<<< HEAD
            let fresh222 = *fresh221;
=======
            let mut fresh222 = *fresh221;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            *fresh221 = *fresh221 + 1;
            let ref mut fresh223 = *((*nodeSet).nodeTab).offset(fresh222 as isize);
            *fresh223 = pynode;
        }
        idx += 1;
    }
<<<<<<< HEAD
    *result = nodeSet;
    return 0 as i32;
}
unsafe extern "C" fn PystringSet_Convert(
    mut py_strings: *mut PyObject,
    mut result: *mut *mut *mut xmlChar,
) -> i32 {
    let mut strings: *mut *mut xmlChar = 0 as *mut *mut xmlChar;
=======
    *(borrow_mut(&mut result)).unwrap() = nodeSet;
    return 0 as i32;
}
unsafe extern "C" fn PystringSet_Convert<'a1>(
    mut py_strings: * mut crate::src::python::libxml::_object,
    mut result: Option<&'a1 mut * mut * mut u8>,
) -> i32 {
    let mut strings: * mut * mut u8 = 0 as *mut *mut xmlChar;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut is_tuple: i32 = 0 as i32;
    let mut count: i32 = 0;
    let mut init_index: i32 = 0 as i32;
    if (*(*py_strings).ob_type).tp_flags & (1 as i64) << 26 as i32
        != 0 as i32 as i64
    {
        is_tuple = 1 as i32;
    } else if (*(*py_strings).ob_type).tp_flags
            & (1 as i64) << 25 as i32
            != 0 as i32 as i64
        {
        is_tuple = 0 as i32;
    } else if py_strings == &mut _Py_NoneStruct as *mut PyObject {
<<<<<<< HEAD
        *result = 0 as *mut *mut xmlChar;
=======
        *(borrow_mut(&mut result)).unwrap() = 0 as *mut *mut xmlChar;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        return 0 as i32;
    } else {
        PyErr_SetString(
            PyExc_TypeError,
            b"must be a tuple or list of strings.\0" as *const u8 as *const i8,
        );
        return -(1 as i32);
    }
    count = (if is_tuple != 0 {
        (*(py_strings as *mut PyVarObject)).ob_size
    } else {
        (*(py_strings as *mut PyVarObject)).ob_size
    }) as i32;
    strings = xmlMalloc
        .expect(
            "non-null function pointer",
        )(
        (::std::mem::size_of::<*mut xmlChar>() as u64)
            .wrapping_mul(count as u64),
    ) as *mut *mut xmlChar;
    if strings.is_null() {
        PyErr_SetString(PyExc_MemoryError, b"\0" as *const u8 as *const i8);
        return -(1 as i32);
    }
    memset(
        strings as *mut libc::c_void,
        0 as i32,
        (::std::mem::size_of::<*mut xmlChar>() as u64)
            .wrapping_mul(count as u64),
    );
    let mut idx: i32 = 0;
    idx = 0 as i32;
    while idx < count {
<<<<<<< HEAD
        let mut s: *mut i8 = PyString_AsString(
            if is_tuple != 0 {
                *((*(py_strings as *mut PyTupleObject)).ob_item)
                    .as_mut_ptr()
                    .offset(idx as isize)
            } else {
                *((*(py_strings as *mut PyListObject)).ob_item).offset(idx as isize)
            },
        );
        if !s.is_null() {
            let fresh224 = init_index;
=======
        let mut s: * mut i8 = PyString_AsString(
            if is_tuple != 0 {
                (*crate::__laertes_array::GetMut::<&mut _>::get_offset_mut(((*(py_strings as *mut PyTupleObject)).ob_item).as_mut().unwrap(), (idx as isize)))
            } else {
                (*crate::__laertes_array::GetMut::<&mut _>::get_offset_mut(crate::__laertes_array::borrow_mut(&mut ((*(py_strings as *mut PyListObject)).ob_item))/*borrow*/.as_mut().unwrap(), (idx as isize)))
            },
        );
        if !s.is_null() {
            let mut fresh224 = init_index;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            init_index = init_index + 1;
            let ref mut fresh225 = *strings.offset(fresh224 as isize);
            *fresh225 = s as *mut xmlChar;
        } else {
            xmlFree.expect("non-null function pointer")(strings as *mut libc::c_void);
            PyErr_SetString(
                PyExc_TypeError,
                b"must be a tuple or list of strings.\0" as *const u8
                    as *const i8,
            );
            return -(1 as i32);
        }
        idx += 1;
    }
<<<<<<< HEAD
    *result = strings;
    return 0 as i32;
}
unsafe extern "C" fn libxml_C14NDocDumpMemory(
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_retval: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_doc: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_nodes: *mut PyObject = 0 as *mut PyObject;
    let mut exclusive: i32 = 0;
    let mut pyobj_prefixes: *mut PyObject = 0 as *mut PyObject;
    let mut with_comments: i32 = 0;
    let mut doc: xmlDocPtr = 0 as *mut xmlDoc;
    let mut nodes: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
    let mut prefixes: *mut *mut xmlChar = 0 as *mut *mut xmlChar;
    let mut doc_txt: *mut xmlChar = 0 as *mut xmlChar;
=======
    *(borrow_mut(&mut result)).unwrap() = strings;
    return 0 as i32;
}
unsafe extern "C" fn libxml_C14NDocDumpMemory(
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_retval: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_doc: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_nodes: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut exclusive: i32 = 0;
    let mut pyobj_prefixes: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut with_comments: i32 = 0;
    let mut doc: * mut crate::src::python::libxml::_xmlDoc = 0 as *mut xmlDoc;
    let mut nodes: * mut crate::src::python::libxml::_xmlNodeSet = 0 as *mut xmlNodeSet;
    let mut prefixes: * mut * mut u8 = 0 as *mut *mut xmlChar;
    let mut doc_txt: * mut u8 = 0 as *mut xmlChar;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut result: i32 = 0;
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OOiOi:C14NDocDumpMemory\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_doc as *mut *mut PyObject,
        &mut pyobj_nodes as *mut *mut PyObject,
        &mut exclusive as *mut i32,
        &mut pyobj_prefixes as *mut *mut PyObject,
        &mut with_comments as *mut i32,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    doc = (if pyobj_doc == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(pyobj_doc as *mut PyxmlNode_Object)).obj
    }) as xmlDocPtr;
    if doc.is_null() {
        PyErr_SetString(
            PyExc_TypeError,
            b"bad document.\0" as *const u8 as *const i8,
        );
        return 0 as *mut PyObject;
    }
<<<<<<< HEAD
    result = PyxmlNodeSet_Convert(pyobj_nodes, &mut nodes);
=======
    result = PyxmlNodeSet_Convert(pyobj_nodes, Some(&mut nodes));
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if result < 0 as i32 {
        return 0 as *mut PyObject;
    }
    if exclusive != 0 {
<<<<<<< HEAD
        result = PystringSet_Convert(pyobj_prefixes, &mut prefixes);
=======
        result = PystringSet_Convert(pyobj_prefixes, Some(&mut prefixes));
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        if result < 0 as i32 {
            if !nodes.is_null() {
                xmlFree
                    .expect(
                        "non-null function pointer",
                    )((*nodes).nodeTab as *mut libc::c_void);
                xmlFree.expect("non-null function pointer")(nodes as *mut libc::c_void);
            }
            return 0 as *mut PyObject;
        }
    }
    result = xmlC14NDocDumpMemory(
        doc,
        nodes,
        exclusive,
        prefixes,
        with_comments,
        &mut doc_txt,
    );
    if !nodes.is_null() {
        xmlFree
            .expect("non-null function pointer")((*nodes).nodeTab as *mut libc::c_void);
        xmlFree.expect("non-null function pointer")(nodes as *mut libc::c_void);
    }
    if !prefixes.is_null() {
<<<<<<< HEAD
        let mut idx: *mut *mut xmlChar = prefixes;
        while !(*idx).is_null() {
            let fresh226 = idx;
=======
        let mut idx: * mut * mut u8 = prefixes;
        while !(*idx).is_null() {
            let mut fresh226 = idx;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            idx = idx.offset(1);
            xmlFree.expect("non-null function pointer")(*fresh226 as *mut libc::c_void);
        }
        xmlFree.expect("non-null function pointer")(prefixes as *mut libc::c_void);
    }
    if result < 0 as i32 {
        PyErr_SetString(
            PyExc_Exception,
            b"libxml2 xmlC14NDocDumpMemory failure.\0" as *const u8
                as *const i8,
        );
        return 0 as *mut PyObject;
    } else {
        py_retval = PyString_FromStringAndSize(
            doc_txt as *const i8,
            result as Py_ssize_t,
        );
        xmlFree.expect("non-null function pointer")(doc_txt as *mut libc::c_void);
        return py_retval;
    };
}
unsafe extern "C" fn libxml_C14NDocSaveTo(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut pyobj_doc: *mut PyObject = 0 as *mut PyObject;
    let mut py_file: *mut PyObject = 0 as *mut PyObject;
    let mut pyobj_nodes: *mut PyObject = 0 as *mut PyObject;
    let mut exclusive: i32 = 0;
    let mut pyobj_prefixes: *mut PyObject = 0 as *mut PyObject;
    let mut with_comments: i32 = 0;
    let mut doc: xmlDocPtr = 0 as *mut xmlDoc;
    let mut nodes: xmlNodeSetPtr = 0 as *mut xmlNodeSet;
    let mut prefixes: *mut *mut xmlChar = 0 as *mut *mut xmlChar;
    let mut output: *mut FILE = 0 as *mut FILE;
    let mut buf: xmlOutputBufferPtr = 0 as *mut xmlOutputBuffer;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut pyobj_doc: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut py_file: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut pyobj_nodes: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut exclusive: i32 = 0;
    let mut pyobj_prefixes: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut with_comments: i32 = 0;
    let mut doc: * mut crate::src::python::libxml::_xmlDoc = 0 as *mut xmlDoc;
    let mut nodes: * mut crate::src::python::libxml::_xmlNodeSet = 0 as *mut xmlNodeSet;
    let mut prefixes: * mut * mut u8 = 0 as *mut *mut xmlChar;
    let mut output: * mut crate::src::python::libxml::_IO_FILE = 0 as *mut FILE;
    let mut buf: * mut crate::src::python::libxml::_xmlOutputBuffer = 0 as *mut xmlOutputBuffer;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    let mut result: i32 = 0;
    let mut len: i32 = 0;
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OOiOiO:C14NDocSaveTo\0" as *const u8 as *const i8
            as *mut i8,
        &mut pyobj_doc as *mut *mut PyObject,
        &mut pyobj_nodes as *mut *mut PyObject,
        &mut exclusive as *mut i32,
        &mut pyobj_prefixes as *mut *mut PyObject,
        &mut with_comments as *mut i32,
        &mut py_file as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    doc = (if pyobj_doc == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(pyobj_doc as *mut PyxmlNode_Object)).obj
    }) as xmlDocPtr;
    if doc.is_null() {
        PyErr_SetString(
            PyExc_TypeError,
            b"bad document.\0" as *const u8 as *const i8,
        );
        return 0 as *mut PyObject;
    }
    output = if py_file == &mut _Py_NoneStruct as *mut PyObject {
        0 as *mut FILE
    } else if (*py_file).ob_type == &mut PyFile_Type as *mut PyTypeObject
            || PyType_IsSubtype((*py_file).ob_type, &mut PyFile_Type) != 0
        {
        PyFile_AsFile(py_file)
    } else {
        stdout
    };
    if output.is_null() {
        PyErr_SetString(
            PyExc_TypeError,
            b"bad file.\0" as *const u8 as *const i8,
        );
        return 0 as *mut PyObject;
    }
    buf = xmlOutputBufferCreateFile(output, 0 as xmlCharEncodingHandlerPtr);
<<<<<<< HEAD
    result = PyxmlNodeSet_Convert(pyobj_nodes, &mut nodes);
=======
    result = PyxmlNodeSet_Convert(pyobj_nodes, Some(&mut nodes));
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if result < 0 as i32 {
        xmlOutputBufferClose(buf);
        return 0 as *mut PyObject;
    }
    if exclusive != 0 {
<<<<<<< HEAD
        result = PystringSet_Convert(pyobj_prefixes, &mut prefixes);
=======
        result = PystringSet_Convert(pyobj_prefixes, Some(&mut prefixes));
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
        if result < 0 as i32 {
            if !nodes.is_null() {
                xmlFree
                    .expect(
                        "non-null function pointer",
                    )((*nodes).nodeTab as *mut libc::c_void);
                xmlFree.expect("non-null function pointer")(nodes as *mut libc::c_void);
            }
            xmlOutputBufferClose(buf);
            return 0 as *mut PyObject;
        }
    }
    result = xmlC14NDocSaveTo(doc, nodes, exclusive, prefixes, with_comments, buf);
    if !nodes.is_null() {
        xmlFree
            .expect("non-null function pointer")((*nodes).nodeTab as *mut libc::c_void);
        xmlFree.expect("non-null function pointer")(nodes as *mut libc::c_void);
    }
    if !prefixes.is_null() {
<<<<<<< HEAD
        let mut idx: *mut *mut xmlChar = prefixes;
        while !(*idx).is_null() {
            let fresh227 = idx;
=======
        let mut idx: * mut * mut u8 = prefixes;
        while !(*idx).is_null() {
            let mut fresh227 = idx;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
            idx = idx.offset(1);
            xmlFree.expect("non-null function pointer")(*fresh227 as *mut libc::c_void);
        }
        xmlFree.expect("non-null function pointer")(prefixes as *mut libc::c_void);
    }
    len = xmlOutputBufferClose(buf);
    if result < 0 as i32 {
        PyErr_SetString(
            PyExc_Exception,
            b"libxml2 xmlC14NDocSaveTo failure.\0" as *const u8 as *const i8,
        );
        return 0 as *mut PyObject;
    } else {
        return PyLong_FromLong(len as i64)
    };
}
unsafe extern "C" fn libxml_getObjDesc(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut obj: *mut PyObject = 0 as *mut PyObject;
    let mut str: *mut i8 = 0 as *mut i8;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut obj: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut str: * mut i8 = 0 as *mut i8;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:getObjDesc\0" as *const u8 as *const i8 as *mut i8,
        &mut obj as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    str = PyCapsule_GetPointer(obj, PyCapsule_GetName(obj)) as *mut i8;
    return _Py_BuildValue_SizeT(
        b"s\0" as *const u8 as *const i8 as *mut i8,
        str,
    );
}
unsafe extern "C" fn libxml_compareNodesEqual(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_node1: *mut PyObject = 0 as *mut PyObject;
    let mut py_node2: *mut PyObject = 0 as *mut PyObject;
    let mut node1: xmlNodePtr = 0 as *mut xmlNode;
    let mut node2: xmlNodePtr = 0 as *mut xmlNode;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_node1: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut py_node2: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut node1: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
    let mut node2: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"OO:compareNodesEqual\0" as *const u8 as *const i8
            as *mut i8,
        &mut py_node1 as *mut *mut PyObject,
        &mut py_node2 as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    node1 = if py_node1 == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(py_node1 as *mut PyxmlNode_Object)).obj
    };
    node2 = if py_node2 == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(py_node2 as *mut PyxmlNode_Object)).obj
    };
    if node1 == node2 {
        return _Py_BuildValue_SizeT(
            b"i\0" as *const u8 as *const i8 as *mut i8,
            1 as i32,
        )
    } else {
        return _Py_BuildValue_SizeT(
            b"i\0" as *const u8 as *const i8 as *mut i8,
            0 as i32,
        )
    };
}
unsafe extern "C" fn libxml_nodeHash(
<<<<<<< HEAD
    mut self_0: *mut PyObject,
    mut args: *mut PyObject,
) -> *mut PyObject {
    let mut py_node1: *mut PyObject = 0 as *mut PyObject;
    let mut node1: xmlNodePtr = 0 as *mut xmlNode;
=======
    mut self_0: * mut crate::src::python::libxml::_object,
    mut args: * mut crate::src::python::libxml::_object,
) -> * mut crate::src::python::libxml::_object {
    let mut py_node1: * mut crate::src::python::libxml::_object = 0 as *mut PyObject;
    let mut node1: * mut crate::src::python::libxml::_xmlNode = 0 as *mut xmlNode;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    if _PyArg_ParseTuple_SizeT(
        args,
        b"O:nodeHash\0" as *const u8 as *const i8 as *mut i8,
        &mut py_node1 as *mut *mut PyObject,
    ) == 0
    {
        return 0 as *mut PyObject;
    }
    node1 = if py_node1 == &mut _Py_NoneStruct as *mut PyObject {
        0 as xmlNodePtr
    } else {
        (*(py_node1 as *mut PyxmlNode_Object)).obj
    };
    return PyLong_FromVoidPtr(node1 as *mut libc::c_void);
}
#[no_mangle]
pub unsafe extern "C" fn libxml_deprecationWarning(
<<<<<<< HEAD
    mut func: *const i8,
=======
    mut func: * const i8,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
) -> i32 {
    return PyErr_WarnEx(
        PyExc_PendingDeprecationWarning,
        func,
        1 as i32 as Py_ssize_t,
    );
}
<<<<<<< HEAD
static mut libxmlMethods: [PyMethodDef; 926] = unsafe {
=======
static mut libxmlMethods: [crate::src::python::libxml::PyMethodDef; 926] = unsafe {
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    [
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlAutoCloseTag\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlAutoCloseTag
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlAutoCloseTag,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlCreateFileParserCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlCreateFileParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlCreateFileParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlCreateMemoryParserCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlCreateMemoryParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlCreateMemoryParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlCreatePushParser\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlCreatePushParser
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlCreatePushParser,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlCtxtReadDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlCtxtReadDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlCtxtReadDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlCtxtReadFd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlCtxtReadFd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlCtxtReadFd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlCtxtReadFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlCtxtReadFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlCtxtReadFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlCtxtReadMemory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlCtxtReadMemory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlCtxtReadMemory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlCtxtReset\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlCtxtReset
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlCtxtReset,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlCtxtUseOptions\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlCtxtUseOptions
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlCtxtUseOptions,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlDefaultSAXHandlerInit\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlDefaultSAXHandlerInit
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlDefaultSAXHandlerInit,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlDocContentDumpFormatOutput\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlDocContentDumpFormatOutput
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlDocContentDumpFormatOutput,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlDocContentDumpOutput\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlDocContentDumpOutput
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlDocContentDumpOutput,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlDocDump\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlDocDump
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlDocDump,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlFreeParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlFreeParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlFreeParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlGetMetaEncoding\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlGetMetaEncoding
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlGetMetaEncoding,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlHandleOmittedElem\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlHandleOmittedElem
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlHandleOmittedElem,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlInitAutoClose\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlInitAutoClose
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlInitAutoClose,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlIsAutoClosed\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlIsAutoClosed
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlIsAutoClosed,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlIsBooleanAttr\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlIsBooleanAttr
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlIsBooleanAttr,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlIsScriptAttribute\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlIsScriptAttribute
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlIsScriptAttribute,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlNewDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlNewDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlNewDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlNewDocNoDtD\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlNewDocNoDtD
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlNewDocNoDtD,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlNewParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlNewParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlNewParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlNodeDumpFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlNodeDumpFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlNodeDumpFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlNodeDumpFileFormat\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlNodeDumpFileFormat
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlNodeDumpFileFormat,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlNodeDumpFormatOutput\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlNodeDumpFormatOutput
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlNodeDumpFormatOutput,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlNodeDumpOutput\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlNodeDumpOutput
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlNodeDumpOutput,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlParseCharRef\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlParseCharRef
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlParseCharRef,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlParseChunk\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlParseChunk
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlParseChunk,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlParseDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlParseDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlParseDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlParseDocument\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlParseDocument
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlParseDocument,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlParseElement\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlParseElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlParseElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlParseFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlParseFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlParseFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlReadDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlReadDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlReadDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlReadFd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlReadFd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlReadFd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlReadFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlReadFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlReadFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlReadMemory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlReadMemory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlReadMemory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlSAXParseFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlSAXParseFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlSAXParseFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlSaveFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlSaveFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlSaveFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlSaveFileEnc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlSaveFileEnc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlSaveFileEnc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlSaveFileFormat\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlSaveFileFormat
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlSaveFileFormat,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"htmlSetMetaEncoding\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_htmlSetMetaEncoding
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_htmlSetMetaEncoding,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"namePop\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_namePop
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_namePop,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"namePush\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_namePush
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_namePush,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"nodePop\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_nodePop
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_nodePop,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"nodePush\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_nodePush
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_nodePush,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"valuePop\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_valuePop
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_valuePop,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlACatalogAdd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlACatalogAdd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlACatalogAdd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlACatalogDump\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlACatalogDump
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlACatalogDump,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlACatalogRemove\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlACatalogRemove
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlACatalogRemove,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlACatalogResolve\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlACatalogResolve
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlACatalogResolve,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlACatalogResolvePublic\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlACatalogResolvePublic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlACatalogResolvePublic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlACatalogResolveSystem\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlACatalogResolveSystem
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlACatalogResolveSystem,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlACatalogResolveURI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlACatalogResolveURI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlACatalogResolveURI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlAddChild\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlAddChild
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlAddChild,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlAddChildList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlAddChildList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlAddChildList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlAddDocEntity\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlAddDocEntity
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlAddDocEntity,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlAddDtdEntity\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlAddDtdEntity
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlAddDtdEntity,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlAddEncodingAlias\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlAddEncodingAlias
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlAddEncodingAlias,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlAddNextSibling\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlAddNextSibling
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlAddNextSibling,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlAddPrevSibling\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlAddPrevSibling
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlAddPrevSibling,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlAddSibling\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlAddSibling
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlAddSibling,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlBoolToText\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlBoolToText
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlBoolToText,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlBuildQName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlBuildQName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlBuildQName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlBuildRelativeURI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlBuildRelativeURI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlBuildRelativeURI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlBuildURI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlBuildURI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlBuildURI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlByteConsumed\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlByteConsumed
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlByteConsumed,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCanonicPath\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCanonicPath
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCanonicPath,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogAdd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogAdd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogAdd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogCleanup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogCleanup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogCleanup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogConvert\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogConvert
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogConvert,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogDump\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogDump
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogDump,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogGetPublic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogGetPublic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogGetPublic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogGetSystem\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogGetSystem
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogGetSystem,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogIsEmpty\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogIsEmpty
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogIsEmpty,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogRemove\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogRemove
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogRemove,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogResolve\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogResolve
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogResolve,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogResolvePublic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogResolvePublic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogResolvePublic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogResolveSystem\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogResolveSystem
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogResolveSystem,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogResolveURI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogResolveURI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogResolveURI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCatalogSetDebug\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCatalogSetDebug
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCatalogSetDebug,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCharStrdup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCharStrdup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCharStrdup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCharStrndup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCharStrndup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCharStrndup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCheckFilename\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCheckFilename
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCheckFilename,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCheckLanguageID\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCheckLanguageID
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCheckLanguageID,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCheckUTF8\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCheckUTF8
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCheckUTF8,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCheckVersion\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCheckVersion
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCheckVersion,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCleanupCharEncodingHandlers\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCleanupCharEncodingHandlers
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCleanupCharEncodingHandlers,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCleanupEncodingAliases\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCleanupEncodingAliases
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCleanupEncodingAliases,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCleanupGlobals\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCleanupGlobals
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCleanupGlobals,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCleanupInputCallbacks\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCleanupInputCallbacks
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCleanupInputCallbacks,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCleanupOutputCallbacks\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCleanupOutputCallbacks
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCleanupOutputCallbacks,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCleanupPredefinedEntities\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCleanupPredefinedEntities
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCleanupPredefinedEntities,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlClearParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlClearParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlClearParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlConvertSGMLCatalog\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlConvertSGMLCatalog
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlConvertSGMLCatalog,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCopyChar\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCopyChar
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCopyChar,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCopyCharMultiByte\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCopyCharMultiByte
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCopyCharMultiByte,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCopyDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCopyDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCopyDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCopyDtd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCopyDtd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCopyDtd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCopyError\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCopyError
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCopyError,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCopyNamespace\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCopyNamespace
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCopyNamespace,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCopyNamespaceList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCopyNamespaceList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCopyNamespaceList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCopyNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCopyNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCopyNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCopyNodeList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCopyNodeList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCopyNodeList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCopyProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCopyProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCopyProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCopyPropList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCopyPropList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCopyPropList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCreateDocParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreateDocParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreateDocParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCreateEntityParserCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreateEntityParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreateEntityParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCreateFileParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreateFileParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreateFileParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCreateInputBuffer\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreateInputBuffer
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreateInputBuffer,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCreateIntSubset\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreateIntSubset
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreateIntSubset,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCreateMemoryParserCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreateMemoryParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreateMemoryParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCreateOutputBuffer\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreateOutputBuffer
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreateOutputBuffer,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCreatePushParser\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreatePushParser
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreatePushParser,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCreateURI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreateURI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreateURI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCreateURLParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreateURLParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreateURLParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCtxtReadDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCtxtReadDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCtxtReadDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCtxtReadFd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCtxtReadFd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCtxtReadFd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCtxtReadFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCtxtReadFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCtxtReadFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCtxtReadMemory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCtxtReadMemory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCtxtReadMemory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCtxtReset\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCtxtReset
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCtxtReset,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCtxtResetPush\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCtxtResetPush
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCtxtResetPush,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlCtxtUseOptions\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCtxtUseOptions
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCtxtUseOptions,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugCheckDocument\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugCheckDocument
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugCheckDocument,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugDumpAttr\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugDumpAttr
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugDumpAttr,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugDumpAttrList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugDumpAttrList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugDumpAttrList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugDumpDTD\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugDumpDTD
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugDumpDTD,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugDumpDocument\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugDumpDocument
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugDumpDocument,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugDumpDocumentHead\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugDumpDocumentHead
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugDumpDocumentHead,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugDumpEntities\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugDumpEntities
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugDumpEntities,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugDumpNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugDumpNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugDumpNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugDumpNodeList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugDumpNodeList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugDumpNodeList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugDumpOneNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugDumpOneNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugDumpOneNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugDumpString\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugDumpString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugDumpString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDebugMemory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDebugMemory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDebugMemory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDecodeEntities\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDecodeEntities
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDecodeEntities,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDefaultSAXHandlerInit\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDefaultSAXHandlerInit
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDefaultSAXHandlerInit,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDelEncodingAlias\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDelEncodingAlias
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDelEncodingAlias,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDictCleanup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDictCleanup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDictCleanup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDocCopyNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDocCopyNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDocCopyNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDocCopyNodeList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDocCopyNodeList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDocCopyNodeList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDocDump\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDocDump
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDocDump,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDocFormatDump\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDocFormatDump
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDocFormatDump,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDocGetRootElement\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDocGetRootElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDocGetRootElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDocSetRootElement\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDocSetRootElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDocSetRootElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlDumpMemory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlDumpMemory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlDumpMemory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlElemDump\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlElemDump
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlElemDump,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlEncodeEntities\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlEncodeEntities
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlEncodeEntities,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlEncodeEntitiesReentrant\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlEncodeEntitiesReentrant
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlEncodeEntitiesReentrant,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlEncodeSpecialChars\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlEncodeSpecialChars
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlEncodeSpecialChars,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlErrorGetCode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlErrorGetCode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlErrorGetCode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlErrorGetDomain\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlErrorGetDomain
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlErrorGetDomain,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlErrorGetFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlErrorGetFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlErrorGetFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlErrorGetLevel\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlErrorGetLevel
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlErrorGetLevel,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlErrorGetLine\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlErrorGetLine
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlErrorGetLine,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlErrorGetMessage\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlErrorGetMessage
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlErrorGetMessage,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFileMatch\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFileMatch
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFileMatch,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFirstElementChild\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFirstElementChild
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFirstElementChild,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeCatalog\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeCatalog
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeCatalog,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeDtd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeDtd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeDtd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeNodeList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeNodeList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeNodeList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeNs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeNs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeNs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeNsList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeNsList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeNsList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeParserInputBuffer\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeParserInputBuffer
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeParserInputBuffer,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreePropList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreePropList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreePropList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeURI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeURI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeURI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetCompressMode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetCompressMode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetCompressMode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetDocCompressMode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetDocCompressMode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetDocCompressMode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetDocEntity\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetDocEntity
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetDocEntity,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetDtdAttrDesc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetDtdAttrDesc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetDtdAttrDesc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetDtdElementDesc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetDtdElementDesc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetDtdElementDesc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetDtdEntity\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetDtdEntity
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetDtdEntity,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetDtdQAttrDesc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetDtdQAttrDesc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetDtdQAttrDesc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetDtdQElementDesc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetDtdQElementDesc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetDtdQElementDesc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetEncodingAlias\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetEncodingAlias
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetEncodingAlias,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetID\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetID
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetID,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetIntSubset\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetIntSubset
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetIntSubset,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetLastChild\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetLastChild
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetLastChild,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetLastError\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetLastError
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetLastError,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetLineNo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetLineNo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetLineNo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetNoNsProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetNoNsProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetNoNsProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetNodePath\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetNodePath
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetNodePath,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetNsProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetNsProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetNsProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetParameterEntity\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetParameterEntity
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetParameterEntity,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetPredefinedEntity\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetPredefinedEntity
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetPredefinedEntity,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlGetProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlGetProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlGetProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlHandleEntity\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlHandleEntity
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlHandleEntity,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlHasNsProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlHasNsProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlHasNsProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlHasProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlHasProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlHasProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIOFTPMatch\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIOFTPMatch
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIOFTPMatch,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIOHTTPMatch\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIOHTTPMatch
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIOHTTPMatch,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlInitCharEncodingHandlers\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlInitCharEncodingHandlers
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlInitCharEncodingHandlers,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlInitGlobals\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlInitGlobals
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlInitGlobals,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlInitParser\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlInitParser
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlInitParser,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlInitParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlInitParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlInitParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlInitializeCatalog\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlInitializeCatalog
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlInitializeCatalog,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlInitializeDict\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlInitializeDict
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlInitializeDict,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlInitializePredefinedEntities\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlInitializePredefinedEntities
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlInitializePredefinedEntities,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsBaseChar\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsBaseChar
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsBaseChar,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsBlank\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsBlank
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsBlank,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsBlankNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsBlankNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsBlankNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsChar\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsChar
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsChar,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsCombining\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsCombining
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsCombining,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsDigit\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsDigit
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsDigit,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsExtender\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsExtender
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsExtender,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsID\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsID
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsID,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsIdeographic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsIdeographic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsIdeographic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsLetter\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsLetter
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsLetter,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsMixedElement\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsMixedElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsMixedElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsPubidChar\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsPubidChar
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsPubidChar,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsRef\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsRef
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsRef,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlIsXHTML\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlIsXHTML
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlIsXHTML,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlKeepBlanksDefault\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlKeepBlanksDefault
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlKeepBlanksDefault,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlLastElementChild\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlLastElementChild
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlLastElementChild,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlLineNumbersDefault\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlLineNumbersDefault
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlLineNumbersDefault,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlLoadACatalog\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlLoadACatalog
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlLoadACatalog,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlLoadCatalog\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlLoadCatalog
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlLoadCatalog,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlLoadCatalogs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlLoadCatalogs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlLoadCatalogs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlLoadSGMLSuperCatalog\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlLoadSGMLSuperCatalog
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlLoadSGMLSuperCatalog,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlLsCountNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlLsCountNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlLsCountNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlLsOneNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlLsOneNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlLsOneNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlMemoryUsed\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlMemoryUsed
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlMemoryUsed,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNamespaceParseNCName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNamespaceParseNCName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNamespaceParseNCName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNamespaceParseNSDef\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNamespaceParseNSDef
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNamespaceParseNSDef,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNanoFTPCleanup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNanoFTPCleanup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNanoFTPCleanup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNanoFTPInit\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNanoFTPInit
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNanoFTPInit,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNanoFTPProxy\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNanoFTPProxy
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNanoFTPProxy,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNanoFTPScanProxy\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNanoFTPScanProxy
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNanoFTPScanProxy,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNanoHTTPCleanup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNanoHTTPCleanup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNanoHTTPCleanup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNanoHTTPInit\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNanoHTTPInit
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNanoHTTPInit,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNanoHTTPScanProxy\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNanoHTTPScanProxy
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNanoHTTPScanProxy,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewCDataBlock\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewCDataBlock
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewCDataBlock,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewCatalog\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewCatalog
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewCatalog,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewCharRef\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewCharRef
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewCharRef,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewChild\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewChild
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewChild,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewComment\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewComment
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewComment,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewDocComment\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewDocComment
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewDocComment,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewDocFragment\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewDocFragment
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewDocFragment,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewDocNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewDocNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewDocNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewDocNodeEatName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewDocNodeEatName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewDocNodeEatName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewDocPI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewDocPI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewDocPI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewDocProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewDocProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewDocProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewDocRawNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewDocRawNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewDocRawNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewDocText\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewDocText
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewDocText,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewDocTextLen\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewDocTextLen
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewDocTextLen,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewDtd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewDtd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewDtd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewEntity\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewEntity
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewEntity,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewGlobalNs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewGlobalNs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewGlobalNs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewNodeEatName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewNodeEatName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewNodeEatName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewNs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewNs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewNs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewNsProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewNsProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewNsProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewNsPropEatName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewNsPropEatName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewNsPropEatName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewPI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewPI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewPI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewReference\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewReference
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewReference,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewText\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewText
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewText,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewTextChild\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewTextChild
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewTextChild,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewTextLen\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewTextLen
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewTextLen,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewTextReader\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewTextReader
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewTextReader,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewTextReaderFilename\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewTextReaderFilename
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewTextReaderFilename,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewValidCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewValidCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewValidCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNextChar\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNextChar
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNextChar,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNextElementSibling\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNextElementSibling
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNextElementSibling,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeAddContent\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeAddContent
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeAddContent,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeAddContentLen\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeAddContentLen
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeAddContentLen,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeDumpOutput\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeDumpOutput
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeDumpOutput,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeGetBase\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeGetBase
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeGetBase,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeGetContent\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeGetContent
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeGetContent,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeGetLang\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeGetLang
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeGetLang,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeGetNs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeGetNs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeGetNs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeGetNsDefs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeGetNsDefs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeGetNsDefs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeGetSpacePreserve\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeGetSpacePreserve
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeGetSpacePreserve,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeIsText\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeIsText
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeIsText,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeListGetRawString\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeListGetRawString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeListGetRawString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeListGetString\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeListGetString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeListGetString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeSetBase\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeSetBase
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeSetBase,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeSetContent\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeSetContent
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeSetContent,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeSetContentLen\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeSetContentLen
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeSetContentLen,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeSetLang\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeSetLang
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeSetLang,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeSetName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeSetName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeSetName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeSetSpacePreserve\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeSetSpacePreserve
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeSetSpacePreserve,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNormalizeURIPath\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNormalizeURIPath
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNormalizeURIPath,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNormalizeWindowsPath\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNormalizeWindowsPath
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNormalizeWindowsPath,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlOutputBufferGetContent\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlOutputBufferGetContent
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlOutputBufferGetContent,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlOutputBufferWrite\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlOutputBufferWrite
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlOutputBufferWrite,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlOutputBufferWriteString\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlOutputBufferWriteString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlOutputBufferWriteString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseAttValue\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseAttValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseAttValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseAttributeListDecl\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseAttributeListDecl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseAttributeListDecl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseCDSect\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseCDSect
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseCDSect,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseCatalogFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseCatalogFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseCatalogFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseCharData\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseCharData
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseCharData,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseCharRef\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseCharRef
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseCharRef,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseChunk\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseChunk
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseChunk,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseComment\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseComment
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseComment,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseContent\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseContent
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseContent,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseDTD\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseDTD
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseDTD,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseDocTypeDecl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseDocTypeDecl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseDocTypeDecl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseDocument\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseDocument
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseDocument,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseElement\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseElementDecl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseElementDecl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseElementDecl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseEncName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseEncName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseEncName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseEncodingDecl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseEncodingDecl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseEncodingDecl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseEndTag\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseEndTag
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseEndTag,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseEntity\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseEntity
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseEntity,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseEntityDecl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseEntityDecl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseEntityDecl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseEntityRef\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseEntityRef
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseEntityRef,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseExtParsedEnt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseExtParsedEnt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseExtParsedEnt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseExternalSubset\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseExternalSubset
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseExternalSubset,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseMarkupDecl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseMarkupDecl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseMarkupDecl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseMemory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseMemory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseMemory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseMisc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseMisc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseMisc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseNamespace\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseNamespace
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseNamespace,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseNmtoken\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseNmtoken
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseNmtoken,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseNotationDecl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseNotationDecl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseNotationDecl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParsePEReference\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParsePEReference
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParsePEReference,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParsePI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParsePI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParsePI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParsePITarget\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParsePITarget
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParsePITarget,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParsePubidLiteral\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParsePubidLiteral
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParsePubidLiteral,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseQuotedString\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseQuotedString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseQuotedString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseReference\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseReference
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseReference,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseSDDecl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseSDDecl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseSDDecl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseStartTag\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseStartTag
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseStartTag,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseSystemLiteral\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseSystemLiteral
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseSystemLiteral,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseTextDecl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseTextDecl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseTextDecl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseURI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseURI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseURI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseURIRaw\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseURIRaw
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseURIRaw,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseURIReference\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseURIReference
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseURIReference,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseVersionInfo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseVersionInfo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseVersionInfo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseVersionNum\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseVersionNum
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseVersionNum,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParseXMLDecl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParseXMLDecl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParseXMLDecl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserGetDirectory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserGetDirectory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserGetDirectory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserGetDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserGetDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserGetDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserGetIsValid\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserGetIsValid
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserGetIsValid,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserGetWellFormed\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserGetWellFormed
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserGetWellFormed,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserHandlePEReference\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserHandlePEReference
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserHandlePEReference,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserHandleReference\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserHandleReference
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserHandleReference,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserInputBufferGrow\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserInputBufferGrow
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserInputBufferGrow,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserInputBufferPush\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserInputBufferPush
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserInputBufferPush,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserInputBufferRead\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserInputBufferRead
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserInputBufferRead,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserSetLineNumbers\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserSetLineNumbers
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserSetLineNumbers,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserSetLoadSubset\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserSetLoadSubset
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserSetLoadSubset,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserSetPedantic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserSetPedantic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserSetPedantic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserSetReplaceEntities\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserSetReplaceEntities
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserSetReplaceEntities,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserSetValidate\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserSetValidate
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserSetValidate,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlPathToURI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlPathToURI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlPathToURI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlPedanticParserDefault\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlPedanticParserDefault
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlPedanticParserDefault,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlPopInput\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlPopInput
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlPopInput,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlPopOutputCallbacks\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlPopOutputCallbacks
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlPopOutputCallbacks,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlPreviousElementSibling\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlPreviousElementSibling
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlPreviousElementSibling,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlPrintURI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlPrintURI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlPrintURI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlPythonCleanupParser\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlPythonCleanupParser
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlPythonCleanupParser,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReadDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReadDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReadDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReadFd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReadFd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReadFd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReadFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReadFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReadFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReadMemory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReadMemory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReadMemory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReaderForDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReaderForDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReaderForDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReaderForFd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReaderForFd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReaderForFd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReaderForFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReaderForFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReaderForFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReaderForMemory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReaderForMemory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReaderForMemory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReaderNewDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReaderNewDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReaderNewDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReaderNewFd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReaderNewFd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReaderNewFd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReaderNewFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReaderNewFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReaderNewFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReaderNewMemory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReaderNewMemory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReaderNewMemory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReaderNewWalker\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReaderNewWalker
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReaderNewWalker,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReaderWalker\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReaderWalker
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReaderWalker,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReconciliateNs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReconciliateNs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReconciliateNs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRecoverDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRecoverDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRecoverDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRecoverFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRecoverFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRecoverFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRecoverMemory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRecoverMemory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRecoverMemory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRegFreeRegexp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRegFreeRegexp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRegFreeRegexp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRegexpCompile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRegexpCompile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRegexpCompile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRegexpExec\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRegexpExec
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRegexpExec,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRegexpIsDeterminist\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRegexpIsDeterminist
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRegexpIsDeterminist,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRegexpPrint\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRegexpPrint
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRegexpPrint,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRegisterDefaultInputCallbacks\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRegisterDefaultInputCallbacks
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRegisterDefaultInputCallbacks,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRegisterDefaultOutputCallbacks\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRegisterDefaultOutputCallbacks
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRegisterDefaultOutputCallbacks,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRegisterHTTPPostCallbacks\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRegisterHTTPPostCallbacks
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRegisterHTTPPostCallbacks,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRegisterXPathFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRegisterXPathFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRegisterXPathFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGCleanupTypes\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGCleanupTypes
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGCleanupTypes,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGDump\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGDump
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGDump,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGDumpTree\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGDumpTree
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGDumpTree,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGFree\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGFree
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGFree,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGFreeParserCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGFreeParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGFreeParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGInitTypes\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGInitTypes
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGInitTypes,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGNewDocParserCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGNewDocParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGNewDocParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGNewMemParserCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGNewMemParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGNewMemParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGNewParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGNewParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGNewParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGNewValidCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGNewValidCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGNewValidCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGParse\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGParse
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGParse,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGValidateDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGValidateDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGValidateDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGValidateFullElement\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGValidateFullElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGValidateFullElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGValidatePopElement\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGValidatePopElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGValidatePopElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGValidatePushCData\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGValidatePushCData
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGValidatePushCData,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGValidatePushElement\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGValidatePushElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGValidatePushElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxParserSetFlag\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxParserSetFlag
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxParserSetFlag,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRemoveID\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRemoveID
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRemoveID,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRemoveProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRemoveProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRemoveProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRemoveRef\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRemoveRef
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRemoveRef,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlReplaceNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlReplaceNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlReplaceNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlResetError\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlResetError
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlResetError,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlResetLastError\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlResetLastError
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlResetLastError,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSAXDefaultVersion\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSAXDefaultVersion
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSAXDefaultVersion,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSAXParseFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSAXParseFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSAXParseFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSaveFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSaveFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSaveFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSaveFileEnc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSaveFileEnc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSaveFileEnc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSaveFormatFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSaveFormatFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSaveFormatFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSaveFormatFileEnc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSaveFormatFileEnc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSaveFormatFileEnc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSaveUri\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSaveUri
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSaveUri,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlScanName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlScanName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlScanName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaCleanupTypes\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaCleanupTypes
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaCleanupTypes,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaCollapseString\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaCollapseString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaCollapseString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaDump\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaDump
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaDump,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaFree\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaFree
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaFree,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaFreeParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaFreeParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaFreeParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaInitTypes\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaInitTypes
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaInitTypes,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaIsValid\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaIsValid
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaIsValid,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaNewDocParserCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaNewDocParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaNewDocParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaNewMemParserCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaNewMemParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaNewMemParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaNewParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaNewParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaNewParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaNewValidCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaNewValidCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaNewValidCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaParse\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaParse
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaParse,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaSetValidOptions\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaSetValidOptions
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaSetValidOptions,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaValidCtxtGetOptions\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaValidCtxtGetOptions
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaValidCtxtGetOptions,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaValidCtxtGetParserCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaValidCtxtGetParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaValidCtxtGetParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaValidateDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaValidateDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaValidateDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaValidateFile\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaValidateFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaValidateFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaValidateOneElement\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaValidateOneElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaValidateOneElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaValidateSetFilename\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaValidateSetFilename
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaValidateSetFilename,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaWhiteSpaceReplace\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaWhiteSpaceReplace
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaWhiteSpaceReplace,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSearchNs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSearchNs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSearchNs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSearchNsByHref\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSearchNsByHref
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSearchNsByHref,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSetCompressMode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSetCompressMode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSetCompressMode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSetDocCompressMode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSetDocCompressMode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSetDocCompressMode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSetEntityLoader\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSetEntityLoader
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSetEntityLoader,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSetListDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSetListDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSetListDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSetNs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSetNs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSetNs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSetNsProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSetNsProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSetNsProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSetProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSetProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSetProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSetTreeDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSetTreeDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSetTreeDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSetupParserForBuffer\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSetupParserForBuffer
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSetupParserForBuffer,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlShellPrintNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlShellPrintNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlShellPrintNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlShellPrintXPathError\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlShellPrintXPathError
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlShellPrintXPathError,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSkipBlankChars\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSkipBlankChars
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSkipBlankChars,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStopParser\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStopParser
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStopParser,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrEqual\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrEqual
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrEqual,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrQEqual\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrQEqual
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrQEqual,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrcasecmp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrcasecmp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrcasecmp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrcasestr\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrcasestr
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrcasestr,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrcat\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrcat
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrcat,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrchr\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrchr
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrchr,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrcmp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrcmp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrcmp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrdup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrdup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrdup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStringDecodeEntities\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStringDecodeEntities
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStringDecodeEntities,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStringGetNodeList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStringGetNodeList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStringGetNodeList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStringLenDecodeEntities\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStringLenDecodeEntities
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStringLenDecodeEntities,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStringLenGetNodeList\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStringLenGetNodeList
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStringLenGetNodeList,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrlen\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrlen
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrlen,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrncasecmp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrncasecmp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrncasecmp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrncat\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrncat
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrncat,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrncatNew\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrncatNew
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrncatNew,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrncmp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrncmp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrncmp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrndup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrndup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrndup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrstr\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrstr
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrstr,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlStrsub\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlStrsub
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlStrsub,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSubstituteEntitiesDefault\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSubstituteEntitiesDefault
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSubstituteEntitiesDefault,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextConcat\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextConcat
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextConcat,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextMerge\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextMerge
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextMerge,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderAttributeCount\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderAttributeCount
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderAttributeCount,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderByteConsumed\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderByteConsumed
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderByteConsumed,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderClose\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderClose
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderClose,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderConstBaseUri\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderConstBaseUri
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderConstBaseUri,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderConstEncoding\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderConstEncoding
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderConstEncoding,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderConstLocalName\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderConstLocalName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderConstLocalName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderConstName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderConstName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderConstName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderConstNamespaceUri\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderConstNamespaceUri
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderConstNamespaceUri,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderConstPrefix\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderConstPrefix
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderConstPrefix,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderConstString\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderConstString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderConstString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderConstValue\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderConstValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderConstValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderConstXmlLang\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderConstXmlLang
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderConstXmlLang,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderConstXmlVersion\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderConstXmlVersion
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderConstXmlVersion,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderCurrentDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderCurrentDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderCurrentDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderCurrentNode\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderCurrentNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderCurrentNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderDepth\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderDepth
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderDepth,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderExpand\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderExpand
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderExpand,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderGetAttribute\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderGetAttribute
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderGetAttribute,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderGetAttributeNo\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderGetAttributeNo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderGetAttributeNo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderGetAttributeNs\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderGetAttributeNs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderGetAttributeNs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderGetParserColumnNumber\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderGetParserColumnNumber
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderGetParserColumnNumber,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderGetParserLineNumber\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderGetParserLineNumber
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderGetParserLineNumber,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderGetParserProp\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderGetParserProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderGetParserProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderGetRemainder\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderGetRemainder
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderGetRemainder,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderHasAttributes\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderHasAttributes
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderHasAttributes,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderHasValue\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderHasValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderHasValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderIsDefault\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderIsDefault
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderIsDefault,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderIsEmptyElement\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderIsEmptyElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderIsEmptyElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderIsNamespaceDecl\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderIsNamespaceDecl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderIsNamespaceDecl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderIsValid\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderIsValid
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderIsValid,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderLocatorBaseURI\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderLocatorBaseURI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderLocatorBaseURI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderLocatorLineNumber\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderLocatorLineNumber
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderLocatorLineNumber,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderLookupNamespace\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderLookupNamespace
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderLookupNamespace,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderMoveToAttribute\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderMoveToAttribute
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderMoveToAttribute,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderMoveToAttributeNo\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderMoveToAttributeNo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderMoveToAttributeNo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderMoveToAttributeNs\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderMoveToAttributeNs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderMoveToAttributeNs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderMoveToElement\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderMoveToElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderMoveToElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderMoveToFirstAttribute\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderMoveToFirstAttribute
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderMoveToFirstAttribute,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderMoveToNextAttribute\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderMoveToNextAttribute
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderMoveToNextAttribute,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderNext\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderNext
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderNext,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderNextSibling\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderNextSibling
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderNextSibling,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderNodeType\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderNodeType
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderNodeType,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderNormalization\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderNormalization
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderNormalization,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderPreserve\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderPreserve
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderPreserve,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderQuoteChar\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderQuoteChar
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderQuoteChar,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderRead\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderRead
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderRead,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderReadAttributeValue\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderReadAttributeValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderReadAttributeValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderReadInnerXml\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderReadInnerXml
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderReadInnerXml,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderReadOuterXml\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderReadOuterXml
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderReadOuterXml,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderReadState\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderReadState
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderReadState,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderReadString\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderReadString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderReadString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderRelaxNGSetSchema\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderRelaxNGSetSchema
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderRelaxNGSetSchema,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderRelaxNGValidate\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderRelaxNGValidate
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderRelaxNGValidate,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderRelaxNGValidateCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderRelaxNGValidateCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderRelaxNGValidateCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderSchemaValidate\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderSchemaValidate
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderSchemaValidate,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderSchemaValidateCtxt\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderSchemaValidateCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderSchemaValidateCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderSetParserProp\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderSetParserProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderSetParserProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderSetSchema\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderSetSchema
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderSetSchema,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderSetup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderSetup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderSetup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderStandalone\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderStandalone
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderStandalone,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefDefaultBufferSize\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefDefaultBufferSize
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefDefaultBufferSize,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefDoValidityCheckingDefaultValue\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefDoValidityCheckingDefaultValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefDoValidityCheckingDefaultValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefGetWarningsDefaultValue\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefGetWarningsDefaultValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefGetWarningsDefaultValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefIndentTreeOutput\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefIndentTreeOutput
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefIndentTreeOutput,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefKeepBlanksDefaultValue\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefKeepBlanksDefaultValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefKeepBlanksDefaultValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefLineNumbersDefaultValue\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefLineNumbersDefaultValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefLineNumbersDefaultValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefLoadExtDtdDefaultValue\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefLoadExtDtdDefaultValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefLoadExtDtdDefaultValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefParserDebugEntities\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefParserDebugEntities
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefParserDebugEntities,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefPedanticParserDefaultValue\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefPedanticParserDefaultValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefPedanticParserDefaultValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefSaveNoEmptyTags\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefSaveNoEmptyTags
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefSaveNoEmptyTags,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefSubstituteEntitiesDefaultValue\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefSubstituteEntitiesDefaultValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefSubstituteEntitiesDefaultValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlThrDefTreeIndentString\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlThrDefTreeIndentString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlThrDefTreeIndentString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsAegeanNumbers\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsAegeanNumbers
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsAegeanNumbers,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsAlphabeticPresentationForms\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsAlphabeticPresentationForms
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsAlphabeticPresentationForms,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsArabic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsArabic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsArabic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsArabicPresentationFormsA\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsArabicPresentationFormsA
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsArabicPresentationFormsA,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsArabicPresentationFormsB\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsArabicPresentationFormsB
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsArabicPresentationFormsB,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsArmenian\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsArmenian
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsArmenian,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsArrows\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsArrows
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsArrows,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsBasicLatin\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsBasicLatin
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsBasicLatin,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsBengali\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsBengali
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsBengali,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsBlock\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsBlock
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsBlock,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsBlockElements\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsBlockElements
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsBlockElements,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsBopomofo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsBopomofo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsBopomofo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsBopomofoExtended\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsBopomofoExtended
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsBopomofoExtended,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsBoxDrawing\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsBoxDrawing
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsBoxDrawing,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsBraillePatterns\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsBraillePatterns
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsBraillePatterns,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsBuhid\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsBuhid
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsBuhid,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsByzantineMusicalSymbols\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsByzantineMusicalSymbols
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsByzantineMusicalSymbols,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCJKCompatibility\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCJKCompatibility
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCJKCompatibility,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCJKCompatibilityForms\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCJKCompatibilityForms
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCJKCompatibilityForms,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCJKCompatibilityIdeographs\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCJKCompatibilityIdeographs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCJKCompatibilityIdeographs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCJKCompatibilityIdeographsSupplement\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCJKCompatibilityIdeographsSupplement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCJKCompatibilityIdeographsSupplement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCJKRadicalsSupplement\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCJKRadicalsSupplement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCJKRadicalsSupplement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCJKSymbolsandPunctuation\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCJKSymbolsandPunctuation
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCJKSymbolsandPunctuation,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCJKUnifiedIdeographs\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCJKUnifiedIdeographs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCJKUnifiedIdeographs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCJKUnifiedIdeographsExtensionA\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCJKUnifiedIdeographsExtensionA
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCJKUnifiedIdeographsExtensionA,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCJKUnifiedIdeographsExtensionB\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCJKUnifiedIdeographsExtensionB
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCJKUnifiedIdeographsExtensionB,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCat\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCat
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCat,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatC\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatC
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatC,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatCc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatCc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatCc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatCf\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatCf
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatCf,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatCo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatCo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatCo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatCs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatCs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatCs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatL\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatL
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatL,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatLl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatLl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatLl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatLm\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatLm
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatLm,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatLo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatLo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatLo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatLt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatLt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatLt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatLu\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatLu
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatLu,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatM\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatM
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatM,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatMc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatMc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatMc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatMe\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatMe
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatMe,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatMn\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatMn
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatMn,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatN\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatN
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatN,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatNd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatNd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatNd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatNl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatNl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatNl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatNo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatNo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatNo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatP\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatP
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatP,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatPc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatPc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatPc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatPd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatPd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatPd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatPe\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatPe
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatPe,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatPf\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatPf
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatPf,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatPi\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatPi
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatPi,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatPo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatPo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatPo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatPs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatPs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatPs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatS\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatS
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatS,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatSc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatSc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatSc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatSk\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatSk
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatSk,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatSm\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatSm
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatSm,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatSo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatSo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatSo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatZ\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatZ
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatZ,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatZl\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatZl
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatZl,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatZp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatZp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatZp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCatZs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCatZs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCatZs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCherokee\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCherokee
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCherokee,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCombiningDiacriticalMarks\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCombiningDiacriticalMarks
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCombiningDiacriticalMarks,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCombiningDiacriticalMarksforSymbols\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCombiningDiacriticalMarksforSymbols
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCombiningDiacriticalMarksforSymbols,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCombiningHalfMarks\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCombiningHalfMarks
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCombiningHalfMarks,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCombiningMarksforSymbols\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCombiningMarksforSymbols
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCombiningMarksforSymbols,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsControlPictures\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsControlPictures
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsControlPictures,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCurrencySymbols\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCurrencySymbols
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCurrencySymbols,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCypriotSyllabary\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCypriotSyllabary
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCypriotSyllabary,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCyrillic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCyrillic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCyrillic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsCyrillicSupplement\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsCyrillicSupplement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsCyrillicSupplement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsDeseret\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsDeseret
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsDeseret,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsDevanagari\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsDevanagari
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsDevanagari,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsDingbats\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsDingbats
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsDingbats,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsEnclosedAlphanumerics\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsEnclosedAlphanumerics
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsEnclosedAlphanumerics,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsEnclosedCJKLettersandMonths\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsEnclosedCJKLettersandMonths
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsEnclosedCJKLettersandMonths,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsEthiopic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsEthiopic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsEthiopic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsGeneralPunctuation\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsGeneralPunctuation
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsGeneralPunctuation,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsGeometricShapes\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsGeometricShapes
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsGeometricShapes,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsGeorgian\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsGeorgian
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsGeorgian,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsGothic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsGothic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsGothic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsGreek\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsGreek
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsGreek,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsGreekExtended\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsGreekExtended
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsGreekExtended,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsGreekandCoptic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsGreekandCoptic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsGreekandCoptic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsGujarati\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsGujarati
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsGujarati,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsGurmukhi\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsGurmukhi
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsGurmukhi,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsHalfwidthandFullwidthForms\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsHalfwidthandFullwidthForms
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsHalfwidthandFullwidthForms,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsHangulCompatibilityJamo\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsHangulCompatibilityJamo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsHangulCompatibilityJamo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsHangulJamo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsHangulJamo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsHangulJamo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsHangulSyllables\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsHangulSyllables
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsHangulSyllables,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsHanunoo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsHanunoo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsHanunoo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsHebrew\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsHebrew
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsHebrew,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsHighPrivateUseSurrogates\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsHighPrivateUseSurrogates
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsHighPrivateUseSurrogates,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsHighSurrogates\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsHighSurrogates
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsHighSurrogates,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsHiragana\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsHiragana
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsHiragana,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsIPAExtensions\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsIPAExtensions
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsIPAExtensions,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsIdeographicDescriptionCharacters\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsIdeographicDescriptionCharacters
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsIdeographicDescriptionCharacters,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsKanbun\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsKanbun
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsKanbun,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsKangxiRadicals\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsKangxiRadicals
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsKangxiRadicals,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsKannada\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsKannada
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsKannada,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsKatakana\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsKatakana
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsKatakana,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsKatakanaPhoneticExtensions\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsKatakanaPhoneticExtensions
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsKatakanaPhoneticExtensions,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsKhmer\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsKhmer
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsKhmer,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsKhmerSymbols\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsKhmerSymbols
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsKhmerSymbols,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsLao\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsLao
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsLao,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsLatin1Supplement\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsLatin1Supplement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsLatin1Supplement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsLatinExtendedA\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsLatinExtendedA
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsLatinExtendedA,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsLatinExtendedAdditional\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsLatinExtendedAdditional
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsLatinExtendedAdditional,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsLatinExtendedB\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsLatinExtendedB
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsLatinExtendedB,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsLetterlikeSymbols\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsLetterlikeSymbols
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsLetterlikeSymbols,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsLimbu\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsLimbu
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsLimbu,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsLinearBIdeograms\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsLinearBIdeograms
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsLinearBIdeograms,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsLinearBSyllabary\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsLinearBSyllabary
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsLinearBSyllabary,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsLowSurrogates\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsLowSurrogates
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsLowSurrogates,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsMalayalam\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsMalayalam
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsMalayalam,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsMathematicalAlphanumericSymbols\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsMathematicalAlphanumericSymbols
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsMathematicalAlphanumericSymbols,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsMathematicalOperators\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsMathematicalOperators
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsMathematicalOperators,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsMiscellaneousMathematicalSymbolsA\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsMiscellaneousMathematicalSymbolsA
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsMiscellaneousMathematicalSymbolsA,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsMiscellaneousMathematicalSymbolsB\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsMiscellaneousMathematicalSymbolsB
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsMiscellaneousMathematicalSymbolsB,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsMiscellaneousSymbols\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsMiscellaneousSymbols
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsMiscellaneousSymbols,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsMiscellaneousSymbolsandArrows\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsMiscellaneousSymbolsandArrows
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsMiscellaneousSymbolsandArrows,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsMiscellaneousTechnical\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsMiscellaneousTechnical
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsMiscellaneousTechnical,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsMongolian\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsMongolian
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsMongolian,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsMusicalSymbols\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsMusicalSymbols
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsMusicalSymbols,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsMyanmar\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsMyanmar
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsMyanmar,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsNumberForms\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsNumberForms
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsNumberForms,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsOgham\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsOgham
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsOgham,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsOldItalic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsOldItalic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsOldItalic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsOpticalCharacterRecognition\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsOpticalCharacterRecognition
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsOpticalCharacterRecognition,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsOriya\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsOriya
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsOriya,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsOsmanya\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsOsmanya
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsOsmanya,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsPhoneticExtensions\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsPhoneticExtensions
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsPhoneticExtensions,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsPrivateUse\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsPrivateUse
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsPrivateUse,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsPrivateUseArea\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsPrivateUseArea
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsPrivateUseArea,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsRunic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsRunic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsRunic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsShavian\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsShavian
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsShavian,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsSinhala\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsSinhala
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsSinhala,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsSmallFormVariants\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsSmallFormVariants
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsSmallFormVariants,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsSpacingModifierLetters\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsSpacingModifierLetters
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsSpacingModifierLetters,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsSpecials\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsSpecials
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsSpecials,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsSuperscriptsandSubscripts\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsSuperscriptsandSubscripts
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsSuperscriptsandSubscripts,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsSupplementalArrowsA\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsSupplementalArrowsA
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsSupplementalArrowsA,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsSupplementalArrowsB\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsSupplementalArrowsB
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsSupplementalArrowsB,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsSupplementalMathematicalOperators\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsSupplementalMathematicalOperators
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsSupplementalMathematicalOperators,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsSupplementaryPrivateUseAreaA\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsSupplementaryPrivateUseAreaA
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsSupplementaryPrivateUseAreaA,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsSupplementaryPrivateUseAreaB\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsSupplementaryPrivateUseAreaB
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsSupplementaryPrivateUseAreaB,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsSyriac\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsSyriac
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsSyriac,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsTagalog\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsTagalog
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsTagalog,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsTagbanwa\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsTagbanwa
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsTagbanwa,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsTags\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsTags
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsTags,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsTaiLe\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsTaiLe
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsTaiLe,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsTaiXuanJingSymbols\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsTaiXuanJingSymbols
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsTaiXuanJingSymbols,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsTamil\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsTamil
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsTamil,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsTelugu\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsTelugu
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsTelugu,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsThaana\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsThaana
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsThaana,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsThai\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsThai
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsThai,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsTibetan\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsTibetan
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsTibetan,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsUgaritic\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsUgaritic
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsUgaritic,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsUnifiedCanadianAboriginalSyllabics\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsUnifiedCanadianAboriginalSyllabics
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsUnifiedCanadianAboriginalSyllabics,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsVariationSelectors\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsVariationSelectors
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsVariationSelectors,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsVariationSelectorsSupplement\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsVariationSelectorsSupplement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsVariationSelectorsSupplement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsYiRadicals\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsYiRadicals
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsYiRadicals,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsYiSyllables\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsYiSyllables
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsYiSyllables,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUCSIsYijingHexagramSymbols\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUCSIsYijingHexagramSymbols
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUCSIsYijingHexagramSymbols,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIEscape\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIEscape
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIEscape,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIEscapeStr\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIEscapeStr
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIEscapeStr,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIGetAuthority\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIGetAuthority
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIGetAuthority,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIGetFragment\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIGetFragment
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIGetFragment,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIGetOpaque\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIGetOpaque
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIGetOpaque,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIGetPath\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIGetPath
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIGetPath,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIGetPort\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIGetPort
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIGetPort,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIGetQuery\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIGetQuery
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIGetQuery,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIGetQueryRaw\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIGetQueryRaw
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIGetQueryRaw,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIGetScheme\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIGetScheme
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIGetScheme,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIGetServer\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIGetServer
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIGetServer,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIGetUser\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIGetUser
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIGetUser,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURISetAuthority\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURISetAuthority
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURISetAuthority,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURISetFragment\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURISetFragment
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURISetFragment,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURISetOpaque\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURISetOpaque
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURISetOpaque,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURISetPath\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURISetPath
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURISetPath,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURISetPort\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURISetPort
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURISetPort,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURISetQuery\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURISetQuery
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURISetQuery,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURISetQueryRaw\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURISetQueryRaw
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURISetQueryRaw,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURISetScheme\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURISetScheme
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURISetScheme,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURISetServer\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURISetServer
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURISetServer,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURISetUser\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURISetUser
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURISetUser,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlURIUnescapeString\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlURIUnescapeString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlURIUnescapeString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUTF8Charcmp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUTF8Charcmp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUTF8Charcmp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUTF8Size\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUTF8Size
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUTF8Size,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUTF8Strlen\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUTF8Strlen
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUTF8Strlen,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUTF8Strloc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUTF8Strloc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUTF8Strloc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUTF8Strndup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUTF8Strndup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUTF8Strndup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUTF8Strpos\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUTF8Strpos
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUTF8Strpos,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUTF8Strsize\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUTF8Strsize
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUTF8Strsize,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUTF8Strsub\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUTF8Strsub
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUTF8Strsub,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUnlinkNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUnlinkNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUnlinkNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUnsetNsProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUnsetNsProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUnsetNsProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUnsetProp\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUnsetProp
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUnsetProp,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidCtxtNormalizeAttributeValue\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidCtxtNormalizeAttributeValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidCtxtNormalizeAttributeValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidNormalizeAttributeValue\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidNormalizeAttributeValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidNormalizeAttributeValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateDocument\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateDocument
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateDocument,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateDocumentFinal\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateDocumentFinal
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateDocumentFinal,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateDtd\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateDtd
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateDtd,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateDtdFinal\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateDtdFinal
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateDtdFinal,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateElement\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateNCName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateNCName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateNCName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateNMToken\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateNMToken
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateNMToken,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateNameValue\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateNameValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateNameValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateNamesValue\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateNamesValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateNamesValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateNmtokenValue\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateNmtokenValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateNmtokenValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateNmtokensValue\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateNmtokensValue
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateNmtokensValue,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateNotationUse\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateNotationUse
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateNotationUse,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateOneAttribute\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateOneAttribute
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateOneAttribute,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateOneElement\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateOneElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateOneElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateOneNamespace\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateOneNamespace
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateOneNamespace,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidatePopElement\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidatePopElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidatePopElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidatePushCData\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidatePushCData
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidatePushCData,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidatePushElement\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidatePushElement
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidatePushElement,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateQName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateQName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateQName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlValidateRoot\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlValidateRoot
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlValidateRoot,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXIncludeProcess\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXIncludeProcess
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXIncludeProcess,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXIncludeProcessFlags\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXIncludeProcessFlags
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXIncludeProcessFlags,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXIncludeProcessTree\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXIncludeProcessTree
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXIncludeProcessTree,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXIncludeProcessTreeFlags\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXIncludeProcessTreeFlags
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXIncludeProcessTreeFlags,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathAddValues\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathAddValues
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathAddValues,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathBooleanFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathBooleanFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathBooleanFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCastBooleanToNumber\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCastBooleanToNumber
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCastBooleanToNumber,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCastBooleanToString\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCastBooleanToString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCastBooleanToString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCastNodeToNumber\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCastNodeToNumber
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCastNodeToNumber,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCastNodeToString\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCastNodeToString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCastNodeToString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCastNumberToBoolean\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCastNumberToBoolean
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCastNumberToBoolean,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCastNumberToString\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCastNumberToString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCastNumberToString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCastStringToBoolean\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCastStringToBoolean
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCastStringToBoolean,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCastStringToNumber\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCastStringToNumber
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCastStringToNumber,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCeilingFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCeilingFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCeilingFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCmpNodes\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCmpNodes
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCmpNodes,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCompareValues\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCompareValues
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCompareValues,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathConcatFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathConcatFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathConcatFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathContainsFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathContainsFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathContainsFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathContextSetCache\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathContextSetCache
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathContextSetCache,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathCountFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathCountFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathCountFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathDivValues\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathDivValues
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathDivValues,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathEqualValues\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathEqualValues
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathEqualValues,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathErr\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathErr
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathErr,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathEval\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathEval
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathEval,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathEvalExpr\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathEvalExpr
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathEvalExpr,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathEvalExpression\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathEvalExpression
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathEvalExpression,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathFalseFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathFalseFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathFalseFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathFloorFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathFloorFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathFloorFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathFreeContext\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathFreeContext
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathFreeContext,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathFreeParserContext\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathFreeParserContext
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathFreeParserContext,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathGetContextDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathGetContextDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathGetContextDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathGetContextNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathGetContextNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathGetContextNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathGetContextPosition\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathGetContextPosition
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathGetContextPosition,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathGetContextSize\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathGetContextSize
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathGetContextSize,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathGetFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathGetFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathGetFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathGetFunctionURI\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathGetFunctionURI
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathGetFunctionURI,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathIdFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathIdFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathIdFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathInit\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathInit
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathInit,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathIsInf\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathIsInf
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathIsInf,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathIsNaN\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathIsNaN
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathIsNaN,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathIsNodeType\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathIsNodeType
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathIsNodeType,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathLangFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathLangFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathLangFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathLastFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathLastFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathLastFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathLocalNameFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathLocalNameFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathLocalNameFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathModValues\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathModValues
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathModValues,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathMultValues\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathMultValues
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathMultValues,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNamespaceURIFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNamespaceURIFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNamespaceURIFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNewBoolean\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNewBoolean
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNewBoolean,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNewCString\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNewCString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNewCString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNewContext\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNewContext
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNewContext,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNewFloat\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNewFloat
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNewFloat,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNewNodeSet\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNewNodeSet
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNewNodeSet,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNewParserContext\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNewParserContext
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNewParserContext,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNewString\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNewString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNewString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNewValueTree\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNewValueTree
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNewValueTree,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextAncestor\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextAncestor
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextAncestor,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextAncestorOrSelf\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextAncestorOrSelf
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextAncestorOrSelf,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextAttribute\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextAttribute
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextAttribute,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextChild\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextChild
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextChild,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextDescendant\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextDescendant
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextDescendant,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextDescendantOrSelf\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextDescendantOrSelf
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextDescendantOrSelf,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextFollowing\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextFollowing
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextFollowing,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextFollowingSibling\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextFollowingSibling
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextFollowingSibling,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextNamespace\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextNamespace
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextNamespace,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextParent\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextParent
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextParent,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextPreceding\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextPreceding
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextPreceding,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextPrecedingSibling\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextPrecedingSibling
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextPrecedingSibling,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNextSelf\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNextSelf
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNextSelf,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNodeEval\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNodeEval
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNodeEval,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNodeSetFreeNs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNodeSetFreeNs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNodeSetFreeNs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNormalizeFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNormalizeFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNormalizeFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNotEqualValues\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNotEqualValues
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNotEqualValues,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNotFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNotFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNotFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNsLookup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNsLookup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNsLookup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathNumberFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathNumberFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathNumberFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathOrderDocElems\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathOrderDocElems
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathOrderDocElems,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathParseNCName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathParseNCName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathParseNCName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathParseName\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathParseName
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathParseName,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathParserGetContext\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathParserGetContext
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathParserGetContext,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathPopBoolean\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathPopBoolean
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathPopBoolean,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathPopNumber\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathPopNumber
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathPopNumber,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathPopString\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathPopString
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathPopString,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathPositionFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathPositionFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathPositionFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathRegisterAllFunctions\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathRegisterAllFunctions
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathRegisterAllFunctions,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathRegisterNs\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathRegisterNs
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathRegisterNs,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathRegisterVariable\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathRegisterVariable
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathRegisterVariable,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathRegisteredFuncsCleanup\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathRegisteredFuncsCleanup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathRegisteredFuncsCleanup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathRegisteredNsCleanup\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathRegisteredNsCleanup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathRegisteredNsCleanup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathRegisteredVariablesCleanup\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathRegisteredVariablesCleanup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathRegisteredVariablesCleanup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathRoot\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathRoot
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathRoot,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathRoundFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathRoundFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathRoundFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathSetContextDoc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathSetContextDoc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathSetContextDoc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathSetContextNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathSetContextNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathSetContextNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathStartsWithFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathStartsWithFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathStartsWithFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathStringEvalNumber\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathStringEvalNumber
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathStringEvalNumber,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathStringFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathStringFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathStringFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathStringLengthFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathStringLengthFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathStringLengthFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathSubValues\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathSubValues
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathSubValues,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathSubstringAfterFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathSubstringAfterFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathSubstringAfterFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathSubstringBeforeFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathSubstringBeforeFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathSubstringBeforeFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathSubstringFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathSubstringFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathSubstringFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathSumFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathSumFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathSumFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathTranslateFunction\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathTranslateFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathTranslateFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathTrueFunction\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathTrueFunction
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathTrueFunction,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathValueFlipSign\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathValueFlipSign
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathValueFlipSign,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathVariableLookup\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathVariableLookup
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathVariableLookup,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPathVariableLookupNS\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPathVariableLookupNS
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPathVariableLookupNS,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPatherror\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPatherror
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPatherror,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPtrEval\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPtrEval
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPtrEval,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlXPtrNewContext\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlXPtrNewContext
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlXPtrNewContext,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"name\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_name
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_name,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"children\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_children
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_children,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"properties\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_properties
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_properties,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"last\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_last
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_last,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"prev\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_prev
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_prev,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"next\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_next
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_next,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"parent\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_parent
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_parent,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"type\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_type
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_type,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"doc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_doc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_doc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNewNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNewNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNewNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlNodeRemoveNsDef\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlNodeRemoveNsDef
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlNodeRemoveNsDef,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSetValidErrors\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSetValidErrors
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSetValidErrors,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeValidCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeValidCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeValidCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"serializeNode\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_serializeNode
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_serializeNode,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"saveNodeTo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_saveNodeTo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_saveNodeTo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"outputBufferCreate\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreateOutputBuffer
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreateOutputBuffer,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"outputBufferGetPythonFile\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_outputBufferGetPythonFile
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_outputBufferGetPythonFile,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlOutputBufferClose\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlOutputBufferClose
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlOutputBufferClose,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlOutputBufferFlush\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlOutputBufferFlush
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlOutputBufferFlush,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSaveFileTo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSaveFileTo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSaveFileTo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSaveFormatFileTo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSaveFormatFileTo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSaveFormatFileTo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"inputBufferCreate\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlCreateInputBuffer
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlCreateInputBuffer,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"setEntityLoader\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSetEntityLoader
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSetEntityLoader,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRegisterErrorHandler\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRegisterErrorHandler
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRegisterErrorHandler,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserCtxtSetErrorHandler\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserCtxtSetErrorHandler
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserCtxtSetErrorHandler,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlParserCtxtGetErrorHandler\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlParserCtxtGetErrorHandler
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlParserCtxtGetErrorHandler,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeParserCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeParserCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeParserCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderSetErrorHandler\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderSetErrorHandler
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderSetErrorHandler,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlTextReaderGetErrorHandler\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlTextReaderGetErrorHandler
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlTextReaderGetErrorHandler,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlFreeTextReader\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlFreeTextReader
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlFreeTextReader,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"addLocalCatalog\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_addLocalCatalog
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_addLocalCatalog,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGSetValidErrors\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGSetValidErrors
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGSetValidErrors,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRelaxNGFreeValidCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRelaxNGFreeValidCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRelaxNGFreeValidCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaSetValidErrors\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaSetValidErrors
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaSetValidErrors,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlSchemaFreeValidCtxt\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlSchemaFreeValidCtxt
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlSchemaFreeValidCtxt,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlC14NDocDumpMemory\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_C14NDocDumpMemory
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_C14NDocDumpMemory,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlC14NDocSaveTo\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_C14NDocSaveTo
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_C14NDocSaveTo,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"getObjDesc\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_getObjDesc
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_getObjDesc,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"compareNodesEqual\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_compareNodesEqual
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_compareNodesEqual,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"nodeHash\0" as *const u8 as *const i8
                    as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_nodeHash
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_nodeHash,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlRegisterInputCallback\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlRegisterInputCallback
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlRegisterInputCallback,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: b"xmlUnregisterInputCallback\0" as *const u8
                    as *const i8 as *mut i8,
                ml_meth: Some(
<<<<<<< HEAD
                    libxml_xmlUnregisterInputCallback
                        as unsafe extern "C" fn(
                            *mut PyObject,
                            *mut PyObject,
                        ) -> *mut PyObject,
=======
                    libxml_xmlUnregisterInputCallback,
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
                ),
                ml_flags: 0x1 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
        {
            let mut init = PyMethodDef {
                ml_name: 0 as *const i8,
                ml_meth: None,
                ml_flags: 0 as i32,
                ml_doc: 0 as *const i8,
            };
            init
        },
    ]
};
#[no_mangle]
pub unsafe extern "C" fn initlibxml2mod() {
<<<<<<< HEAD
    let mut module: *mut PyObject = 0 as *mut PyObject;
=======
    let mut module: * mut crate::src::python::libxml::_object = (0 as * mut crate::src::python::libxml::_object);
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
    module = Py_InitModule4_64(
        b"libxml2mod\0" as *const u8 as *const i8 as *mut i8,
        libxmlMethods.as_mut_ptr(),
        0 as *mut libc::c_void as *mut i8,
        0 as *mut libc::c_void as *mut PyObject,
        1013 as i32,
    );
    if module.is_null() {
        return;
    }
    xmlInitParser();
    libxml_xmlErrorInitialize();
}
<<<<<<< HEAD
=======
use crate::laertes_rt::*;
>>>>>>> bbfa64d0f7db1b5e94d853ac3a3845e65fc050fe
