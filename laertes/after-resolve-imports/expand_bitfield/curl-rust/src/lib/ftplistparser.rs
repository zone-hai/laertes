use ::libc;
use ::c2rust_bitfields;
extern "C" {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    fn strtol(
        _: *const i8,
        _: *mut *mut i8,
        _: i32,
    ) -> i64;
    fn strcmp(_: *const i8, _: *const i8) -> i32;
    fn strncmp(
        _: *const i8,
        _: *const i8,
        _: u64,
    ) -> i32;
    fn strchr(_: *const i8, _: i32) -> *mut i8;
    fn strstr(_: *const i8, _: *const i8) -> *mut i8;
    
    
    
    
    
    
    
    
    
    
}
pub use crate::src::lib::curl_ctype::Curl_isalnum;
pub use crate::src::lib::curl_ctype::Curl_isdigit;
pub use crate::src::lib::curl_ctype::Curl_isspace;
pub use crate::src::lib::curl_fnmatch::Curl_fnmatch;
pub use crate::src::lib::fileinfo::Curl_fileinfo_alloc;
pub use crate::src::lib::fileinfo::Curl_fileinfo_cleanup;
pub use crate::src::lib::llist::Curl_llist_insert_next;
pub use crate::src::lib::multi::Curl_set_in_callback;
pub use crate::src::lib::strtoofft::curlx_strtoofft;
pub use crate::src::lib::altsvc::altsvcinfo;
pub use crate::src::lib::asyn_thread::Curl_share;
pub use crate::src::lib::asyn_thread::thread_data;
pub use crate::src::lib::content_encoding::contenc_writer;
pub use crate::src::lib::easy::hsts;
pub use crate::src::lib::ftp::http_connect_state;
pub use crate::src::lib::http2::curl_pushheaders;
pub use crate::src::lib::conncache::Gsasl_session;
pub use crate::src::lib::easy::Curl_ccalloc;
pub use crate::src::lib::easy::Curl_cfree;
pub use crate::src::lib::easy::Curl_cmalloc;
pub use crate::src::lib::easy::Curl_crealloc;
pub use crate::src::lib::escape::Gsasl;
pub use crate::src::lib::mqtt::_IO_codecvt;
pub use crate::src::lib::speedcheck::nghttp2_session;
pub use crate::src::lib::urlapi::psl_ctx_st;
pub use crate::src::src::tool_cb_rea::_IO_wide_data;
pub use crate::src::src::tool_msgs::_IO_marker;
pub use crate::src::lib::openldap::ldapconninfo;
pub use crate::src::lib::openldap::ldapreqinfo;
pub use crate::src::lib::smb::smb_request;
pub use crate::src::lib::telnet::TELNET;
pub use crate::src::lib::tftp::tftp_state_data;
pub use crate::src::lib::urlapi::Curl_URL;
pub use crate::src::lib::vtls::openssl::ssl_backend_data;
pub type __uint8_t = crate::src::lib::http2::__uint8_t;
pub type __int32_t = crate::src::lib::http2::__int32_t;
pub type __uint32_t = crate::src::lib::http2::__uint32_t;
pub type __off_t = crate::src::lib::http2::__off_t;
pub type __off64_t = crate::src::lib::http2::__off64_t;
pub type __pid_t = crate::src::lib::http2::__pid_t;
pub type __time_t = crate::src::lib::http2::__time_t;
pub type __ssize_t = crate::src::lib::http2::__ssize_t;
pub type __socklen_t = crate::src::lib::http2::__socklen_t;
pub type pid_t = crate::src::lib::http2::pid_t;
pub type ssize_t = crate::src::lib::http2::ssize_t;
pub type time_t = crate::src::lib::http2::time_t;
pub type size_t = crate::src::lib::http2::size_t;
pub type int32_t = crate::src::lib::http2::int32_t;
pub type socklen_t = crate::src::lib::http2::socklen_t;
pub type sa_family_t = crate::src::lib::http2::sa_family_t;
// #[derive(Copy, Clone)]

pub type sockaddr = crate::src::lib::http2::sockaddr;
pub type curl_socklen_t = crate::src::lib::http2::curl_socklen_t;
pub type curl_off_t = crate::src::lib::http2::curl_off_t;
// #[derive(Copy, Clone)]

pub type _IO_FILE = crate::src::lib::http2::_IO_FILE;
pub type _IO_lock_t = crate::src::lib::http2::_IO_lock_t;
pub type FILE = crate::src::lib::http2::FILE;
// #[derive(Copy, Clone)]

pub type Curl_easy = crate::src::lib::http2::Curl_easy;
// #[derive(Copy, Clone)]

pub type curl_tlssessioninfo = crate::src::lib::http2::curl_tlssessioninfo;
pub type curl_sslbackend = crate::src::lib::http2::curl_sslbackend;
pub const CURLSSLBACKEND_RUSTLS: curl_sslbackend = 14;
pub const CURLSSLBACKEND_BEARSSL: curl_sslbackend = 13;
pub const CURLSSLBACKEND_MESALINK: curl_sslbackend = 12;
pub const CURLSSLBACKEND_MBEDTLS: curl_sslbackend = 11;
pub const CURLSSLBACKEND_AXTLS: curl_sslbackend = 10;
pub const CURLSSLBACKEND_SECURETRANSPORT: curl_sslbackend = 9;
pub const CURLSSLBACKEND_SCHANNEL: curl_sslbackend = 8;
pub const CURLSSLBACKEND_WOLFSSL: curl_sslbackend = 7;
pub const CURLSSLBACKEND_POLARSSL: curl_sslbackend = 6;
pub const CURLSSLBACKEND_GSKIT: curl_sslbackend = 5;
pub const CURLSSLBACKEND_OBSOLETE4: curl_sslbackend = 4;
pub const CURLSSLBACKEND_NSS: curl_sslbackend = 3;
pub const CURLSSLBACKEND_GNUTLS: curl_sslbackend = 2;
pub const CURLSSLBACKEND_OPENSSL: curl_sslbackend = 1;
pub const CURLSSLBACKEND_NONE: curl_sslbackend = 0;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type PureInfo = crate::src::lib::http2::PureInfo;
pub type bit = crate::src::lib::http2::bit;
pub type CURLproxycode = crate::src::lib::http2::CURLproxycode;
pub const CURLPX_LAST: CURLproxycode = 34;
pub const CURLPX_USER_REJECTED: CURLproxycode = 33;
pub const CURLPX_UNKNOWN_MODE: CURLproxycode = 32;
pub const CURLPX_UNKNOWN_FAIL: CURLproxycode = 31;
pub const CURLPX_SEND_REQUEST: CURLproxycode = 30;
pub const CURLPX_SEND_CONNECT: CURLproxycode = 29;
pub const CURLPX_SEND_AUTH: CURLproxycode = 28;
pub const CURLPX_RESOLVE_HOST: CURLproxycode = 27;
pub const CURLPX_REQUEST_FAILED: CURLproxycode = 26;
pub const CURLPX_REPLY_UNASSIGNED: CURLproxycode = 25;
pub const CURLPX_REPLY_TTL_EXPIRED: CURLproxycode = 24;
pub const CURLPX_REPLY_NOT_ALLOWED: CURLproxycode = 23;
pub const CURLPX_REPLY_NETWORK_UNREACHABLE: CURLproxycode = 22;
pub const CURLPX_REPLY_HOST_UNREACHABLE: CURLproxycode = 21;
pub const CURLPX_REPLY_GENERAL_SERVER_FAILURE: CURLproxycode = 20;
pub const CURLPX_REPLY_CONNECTION_REFUSED: CURLproxycode = 19;
pub const CURLPX_REPLY_COMMAND_NOT_SUPPORTED: CURLproxycode = 18;
pub const CURLPX_REPLY_ADDRESS_TYPE_NOT_SUPPORTED: CURLproxycode = 17;
pub const CURLPX_RECV_REQACK: CURLproxycode = 16;
pub const CURLPX_RECV_CONNECT: CURLproxycode = 15;
pub const CURLPX_RECV_AUTH: CURLproxycode = 14;
pub const CURLPX_RECV_ADDRESS: CURLproxycode = 13;
pub const CURLPX_NO_AUTH: CURLproxycode = 12;
pub const CURLPX_LONG_USER: CURLproxycode = 11;
pub const CURLPX_LONG_PASSWD: CURLproxycode = 10;
pub const CURLPX_LONG_HOSTNAME: CURLproxycode = 9;
pub const CURLPX_IDENTD_DIFFER: CURLproxycode = 8;
pub const CURLPX_IDENTD: CURLproxycode = 7;
pub const CURLPX_GSSAPI_PROTECTION: CURLproxycode = 6;
pub const CURLPX_GSSAPI_PERMSG: CURLproxycode = 5;
pub const CURLPX_GSSAPI: CURLproxycode = 4;
pub const CURLPX_CLOSED: CURLproxycode = 3;
pub const CURLPX_BAD_VERSION: CURLproxycode = 2;
pub const CURLPX_BAD_ADDRESS_TYPE: CURLproxycode = 1;
pub const CURLPX_OK: CURLproxycode = 0;
// #[derive(Copy, Clone)]

pub type curl_certinfo = crate::src::lib::http2::curl_certinfo;
// #[derive(Copy, Clone)]

pub type curl_slist = crate::src::lib::http2::curl_slist;
// #[derive(Copy, Clone)]

pub type WildcardData = crate::src::lib::http2::WildcardData;
pub type wildcard_dtor = crate::src::lib::http2::wildcard_dtor;
// #[derive(Copy, Clone)]

pub type Curl_llist = crate::src::lib::http2::Curl_llist;
pub type Curl_llist_dtor = crate::src::lib::http2::Curl_llist_dtor;
// #[derive(Copy, Clone)]

pub type Curl_llist_element = crate::src::lib::http2::Curl_llist_element;
pub type wildcard_states = crate::src::lib::http2::wildcard_states;
pub const CURLWC_DONE: wildcard_states = 7;
pub const CURLWC_ERROR: wildcard_states = 6;
pub const CURLWC_SKIP: wildcard_states = 5;
pub const CURLWC_CLEAN: wildcard_states = 4;
pub const CURLWC_DOWNLOADING: wildcard_states = 3;
pub const CURLWC_MATCHING: wildcard_states = 2;
pub const CURLWC_INIT: wildcard_states = 1;
pub const CURLWC_CLEAR: wildcard_states = 0;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type UrlState = crate::src::lib::http2::UrlState;
// #[derive(Copy, Clone)]

pub type dynamically_allocated_data = crate::src::lib::http2::dynamically_allocated_data;
pub type trailers_state = crate::src::lib::http2::trailers_state;
pub const TRAILERS_DONE: trailers_state = 3;
pub const TRAILERS_SENDING: trailers_state = 2;
pub const TRAILERS_INITIALIZED: trailers_state = 1;
pub const TRAILERS_NONE: trailers_state = 0;
// #[derive(Copy, Clone)]

pub type dynbuf = crate::src::lib::http2::dynbuf;
pub type Curl_HttpReq = crate::src::lib::http2::Curl_HttpReq;
pub const HTTPREQ_HEAD: Curl_HttpReq = 5;
pub const HTTPREQ_PUT: Curl_HttpReq = 4;
pub const HTTPREQ_POST_MIME: Curl_HttpReq = 3;
pub const HTTPREQ_POST_FORM: Curl_HttpReq = 2;
pub const HTTPREQ_POST: Curl_HttpReq = 1;
pub const HTTPREQ_GET: Curl_HttpReq = 0;
// #[derive(Copy, Clone)]

pub type urlpieces = crate::src::lib::http2::urlpieces;
pub type CURLU = crate::src::lib::http2::CURLU;
pub type curl_read_callback = crate::src::lib::http2::curl_read_callback;
// #[derive(Copy, Clone)]

pub type time_node = crate::src::lib::http2::time_node;
pub type expire_id = crate::src::lib::http2::expire_id;
pub const EXPIRE_LAST: expire_id = 13;
pub const EXPIRE_QUIC: expire_id = 12;
pub const EXPIRE_TOOFAST: expire_id = 11;
pub const EXPIRE_TIMEOUT: expire_id = 10;
pub const EXPIRE_SPEEDCHECK: expire_id = 9;
pub const EXPIRE_RUN_NOW: expire_id = 8;
pub const EXPIRE_MULTI_PENDING: expire_id = 7;
pub const EXPIRE_HAPPY_EYEBALLS: expire_id = 6;
pub const EXPIRE_HAPPY_EYEBALLS_DNS: expire_id = 5;
pub const EXPIRE_DNS_PER_NAME2: expire_id = 4;
pub const EXPIRE_DNS_PER_NAME: expire_id = 3;
pub const EXPIRE_CONNECTTIMEOUT: expire_id = 2;
pub const EXPIRE_ASYNC_NAME: expire_id = 1;
pub const EXPIRE_100_TIMEOUT: expire_id = 0;
// #[derive(Copy, Clone)]

pub type curltime = crate::src::lib::http2::curltime;
// #[derive(Copy, Clone)]

pub type Curl_tree = crate::src::lib::http2::Curl_tree;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type Curl_async = crate::src::lib::http2::Curl_async;
// #[derive(Copy, Clone)]

pub type Curl_dns_entry = crate::src::lib::http2::Curl_dns_entry;
// #[derive(Copy, Clone)]

pub type Curl_addrinfo = crate::src::lib::http2::Curl_addrinfo;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type auth = crate::src::lib::http2::auth;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type digestdata = crate::src::lib::http2::digestdata;
// #[derive(Copy, Clone)]

pub type tempbuf = crate::src::lib::http2::tempbuf;
// #[derive(Copy, Clone)]

pub type Curl_ssl_session = crate::src::lib::http2::Curl_ssl_session;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type ssl_primary_config = crate::src::lib::http2::ssl_primary_config;
// #[derive(Copy, Clone)]

pub type curl_blob = crate::src::lib::http2::curl_blob;
// #[derive(Copy, Clone)]

pub type conncache = crate::src::lib::http2::conncache;
// #[derive(Copy, Clone)]

pub type Curl_hash = crate::src::lib::http2::Curl_hash;
pub type Curl_hash_dtor = crate::src::lib::http2::Curl_hash_dtor;
pub type comp_function = crate::src::lib::http2::comp_function;
pub type hash_function = crate::src::lib::http2::hash_function;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type Progress = crate::src::lib::http2::Progress;
pub type timediff_t = crate::src::lib::http2::timediff_t;
// #[derive(Copy, Clone)]

pub type CookieInfo = crate::src::lib::http2::CookieInfo;
// #[derive(Copy, Clone)]

pub type Cookie = crate::src::lib::http2::Cookie;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type UserDefined = crate::src::lib::http2::UserDefined;
pub type curl_trailer_callback = crate::src::lib::http2::curl_trailer_callback;
pub type multidone_func = crate::src::lib::http2::multidone_func;
pub type CURLcode = crate::src::lib::http2::CURLcode;
pub const CURL_LAST: CURLcode = 99;
pub const CURLE_SSL_CLIENTCERT: CURLcode = 98;
pub const CURLE_PROXY: CURLcode = 97;
pub const CURLE_QUIC_CONNECT_ERROR: CURLcode = 96;
pub const CURLE_HTTP3: CURLcode = 95;
pub const CURLE_AUTH_ERROR: CURLcode = 94;
pub const CURLE_RECURSIVE_API_CALL: CURLcode = 93;
pub const CURLE_HTTP2_STREAM: CURLcode = 92;
pub const CURLE_SSL_INVALIDCERTSTATUS: CURLcode = 91;
pub const CURLE_SSL_PINNEDPUBKEYNOTMATCH: CURLcode = 90;
pub const CURLE_NO_CONNECTION_AVAILABLE: CURLcode = 89;
pub const CURLE_CHUNK_FAILED: CURLcode = 88;
pub const CURLE_FTP_BAD_FILE_LIST: CURLcode = 87;
pub const CURLE_RTSP_SESSION_ERROR: CURLcode = 86;
pub const CURLE_RTSP_CSEQ_ERROR: CURLcode = 85;
pub const CURLE_FTP_PRET_FAILED: CURLcode = 84;
pub const CURLE_SSL_ISSUER_ERROR: CURLcode = 83;
pub const CURLE_SSL_CRL_BADFILE: CURLcode = 82;
pub const CURLE_AGAIN: CURLcode = 81;
pub const CURLE_SSL_SHUTDOWN_FAILED: CURLcode = 80;
pub const CURLE_SSH: CURLcode = 79;
pub const CURLE_REMOTE_FILE_NOT_FOUND: CURLcode = 78;
pub const CURLE_SSL_CACERT_BADFILE: CURLcode = 77;
pub const CURLE_CONV_REQD: CURLcode = 76;
pub const CURLE_CONV_FAILED: CURLcode = 75;
pub const CURLE_TFTP_NOSUCHUSER: CURLcode = 74;
pub const CURLE_REMOTE_FILE_EXISTS: CURLcode = 73;
pub const CURLE_TFTP_UNKNOWNID: CURLcode = 72;
pub const CURLE_TFTP_ILLEGAL: CURLcode = 71;
pub const CURLE_REMOTE_DISK_FULL: CURLcode = 70;
pub const CURLE_TFTP_PERM: CURLcode = 69;
pub const CURLE_TFTP_NOTFOUND: CURLcode = 68;
pub const CURLE_LOGIN_DENIED: CURLcode = 67;
pub const CURLE_SSL_ENGINE_INITFAILED: CURLcode = 66;
pub const CURLE_SEND_FAIL_REWIND: CURLcode = 65;
pub const CURLE_USE_SSL_FAILED: CURLcode = 64;
pub const CURLE_FILESIZE_EXCEEDED: CURLcode = 63;
pub const CURLE_LDAP_INVALID_URL: CURLcode = 62;
pub const CURLE_BAD_CONTENT_ENCODING: CURLcode = 61;
pub const CURLE_PEER_FAILED_VERIFICATION: CURLcode = 60;
pub const CURLE_SSL_CIPHER: CURLcode = 59;
pub const CURLE_SSL_CERTPROBLEM: CURLcode = 58;
pub const CURLE_OBSOLETE57: CURLcode = 57;
pub const CURLE_RECV_ERROR: CURLcode = 56;
pub const CURLE_SEND_ERROR: CURLcode = 55;
pub const CURLE_SSL_ENGINE_SETFAILED: CURLcode = 54;
pub const CURLE_SSL_ENGINE_NOTFOUND: CURLcode = 53;
pub const CURLE_GOT_NOTHING: CURLcode = 52;
pub const CURLE_OBSOLETE51: CURLcode = 51;
pub const CURLE_OBSOLETE50: CURLcode = 50;
pub const CURLE_SETOPT_OPTION_SYNTAX: CURLcode = 49;
pub const CURLE_UNKNOWN_OPTION: CURLcode = 48;
pub const CURLE_TOO_MANY_REDIRECTS: CURLcode = 47;
pub const CURLE_OBSOLETE46: CURLcode = 46;
pub const CURLE_INTERFACE_FAILED: CURLcode = 45;
pub const CURLE_OBSOLETE44: CURLcode = 44;
pub const CURLE_BAD_FUNCTION_ARGUMENT: CURLcode = 43;
pub const CURLE_ABORTED_BY_CALLBACK: CURLcode = 42;
pub const CURLE_FUNCTION_NOT_FOUND: CURLcode = 41;
pub const CURLE_OBSOLETE40: CURLcode = 40;
pub const CURLE_LDAP_SEARCH_FAILED: CURLcode = 39;
pub const CURLE_LDAP_CANNOT_BIND: CURLcode = 38;
pub const CURLE_FILE_COULDNT_READ_FILE: CURLcode = 37;
pub const CURLE_BAD_DOWNLOAD_RESUME: CURLcode = 36;
pub const CURLE_SSL_CONNECT_ERROR: CURLcode = 35;
pub const CURLE_HTTP_POST_ERROR: CURLcode = 34;
pub const CURLE_RANGE_ERROR: CURLcode = 33;
pub const CURLE_OBSOLETE32: CURLcode = 32;
pub const CURLE_FTP_COULDNT_USE_REST: CURLcode = 31;
pub const CURLE_FTP_PORT_FAILED: CURLcode = 30;
pub const CURLE_OBSOLETE29: CURLcode = 29;
pub const CURLE_OPERATION_TIMEDOUT: CURLcode = 28;
pub const CURLE_OUT_OF_MEMORY: CURLcode = 27;
pub const CURLE_READ_ERROR: CURLcode = 26;
pub const CURLE_UPLOAD_FAILED: CURLcode = 25;
pub const CURLE_OBSOLETE24: CURLcode = 24;
pub const CURLE_WRITE_ERROR: CURLcode = 23;
pub const CURLE_HTTP_RETURNED_ERROR: CURLcode = 22;
pub const CURLE_QUOTE_ERROR: CURLcode = 21;
pub const CURLE_OBSOLETE20: CURLcode = 20;
pub const CURLE_FTP_COULDNT_RETR_FILE: CURLcode = 19;
pub const CURLE_PARTIAL_FILE: CURLcode = 18;
pub const CURLE_FTP_COULDNT_SET_TYPE: CURLcode = 17;
pub const CURLE_HTTP2: CURLcode = 16;
pub const CURLE_FTP_CANT_GET_HOST: CURLcode = 15;
pub const CURLE_FTP_WEIRD_227_FORMAT: CURLcode = 14;
pub const CURLE_FTP_WEIRD_PASV_REPLY: CURLcode = 13;
pub const CURLE_FTP_ACCEPT_TIMEOUT: CURLcode = 12;
pub const CURLE_FTP_WEIRD_PASS_REPLY: CURLcode = 11;
pub const CURLE_FTP_ACCEPT_FAILED: CURLcode = 10;
pub const CURLE_REMOTE_ACCESS_DENIED: CURLcode = 9;
pub const CURLE_WEIRD_SERVER_REPLY: CURLcode = 8;
pub const CURLE_COULDNT_CONNECT: CURLcode = 7;
pub const CURLE_COULDNT_RESOLVE_HOST: CURLcode = 6;
pub const CURLE_COULDNT_RESOLVE_PROXY: CURLcode = 5;
pub const CURLE_NOT_BUILT_IN: CURLcode = 4;
pub const CURLE_URL_MALFORMAT: CURLcode = 3;
pub const CURLE_FAILED_INIT: CURLcode = 2;
pub const CURLE_UNSUPPORTED_PROTOCOL: CURLcode = 1;
pub const CURLE_OK: CURLcode = 0;
pub type curl_resolver_start_callback = crate::src::lib::http2::curl_resolver_start_callback;
// #[derive(Copy, Clone)]

pub type Curl_http2_dep = crate::src::lib::http2::Curl_http2_dep;
pub type curl_fnmatch_callback = crate::src::lib::http2::curl_fnmatch_callback;
pub type curl_chunk_end_callback = crate::src::lib::http2::curl_chunk_end_callback;
pub type curl_chunk_bgn_callback = crate::src::lib::http2::curl_chunk_bgn_callback;
pub type Curl_RtspReq = crate::src::lib::http2::Curl_RtspReq;
pub const RTSPREQ_LAST: Curl_RtspReq = 12;
pub const RTSPREQ_RECEIVE: Curl_RtspReq = 11;
pub const RTSPREQ_RECORD: Curl_RtspReq = 10;
pub const RTSPREQ_SET_PARAMETER: Curl_RtspReq = 9;
pub const RTSPREQ_GET_PARAMETER: Curl_RtspReq = 8;
pub const RTSPREQ_TEARDOWN: Curl_RtspReq = 7;
pub const RTSPREQ_PAUSE: Curl_RtspReq = 6;
pub const RTSPREQ_PLAY: Curl_RtspReq = 5;
pub const RTSPREQ_SETUP: Curl_RtspReq = 4;
pub const RTSPREQ_ANNOUNCE: Curl_RtspReq = 3;
pub const RTSPREQ_DESCRIBE: Curl_RtspReq = 2;
pub const RTSPREQ_OPTIONS: Curl_RtspReq = 1;
pub const RTSPREQ_NONE: Curl_RtspReq = 0;
pub type curl_usessl = crate::src::lib::http2::curl_usessl;
pub const CURLUSESSL_LAST: curl_usessl = 4;
pub const CURLUSESSL_ALL: curl_usessl = 3;
pub const CURLUSESSL_CONTROL: curl_usessl = 2;
pub const CURLUSESSL_TRY: curl_usessl = 1;
pub const CURLUSESSL_NONE: curl_usessl = 0;
pub type CURL_NETRC_OPTION = crate::src::lib::http2::CURL_NETRC_OPTION;
pub const CURL_NETRC_LAST: CURL_NETRC_OPTION = 3;
pub const CURL_NETRC_REQUIRED: CURL_NETRC_OPTION = 2;
pub const CURL_NETRC_OPTIONAL: CURL_NETRC_OPTION = 1;
pub const CURL_NETRC_IGNORED: CURL_NETRC_OPTION = 0;
pub type curl_sshkeycallback = crate::src::lib::http2::curl_sshkeycallback;
pub type curl_khmatch = crate::src::lib::http2::curl_khmatch;
pub const CURLKHMATCH_LAST: curl_khmatch = 3;
pub const CURLKHMATCH_MISSING: curl_khmatch = 2;
pub const CURLKHMATCH_MISMATCH: curl_khmatch = 1;
pub const CURLKHMATCH_OK: curl_khmatch = 0;
// #[derive(Copy, Clone)]

pub type curl_khkey = crate::src::lib::http2::curl_khkey;
pub type curl_khtype = crate::src::lib::http2::curl_khtype;
pub const CURLKHTYPE_ED25519: curl_khtype = 5;
pub const CURLKHTYPE_ECDSA: curl_khtype = 4;
pub const CURLKHTYPE_DSS: curl_khtype = 3;
pub const CURLKHTYPE_RSA: curl_khtype = 2;
pub const CURLKHTYPE_RSA1: curl_khtype = 1;
pub const CURLKHTYPE_UNKNOWN: curl_khtype = 0;
pub type CURL = crate::src::lib::http2::CURL;
pub type curl_ftpccc = crate::src::lib::http2::curl_ftpccc;
pub const CURLFTPSSL_CCC_LAST: curl_ftpccc = 3;
pub const CURLFTPSSL_CCC_ACTIVE: curl_ftpccc = 2;
pub const CURLFTPSSL_CCC_PASSIVE: curl_ftpccc = 1;
pub const CURLFTPSSL_CCC_NONE: curl_ftpccc = 0;
pub type curl_ftpauth = crate::src::lib::http2::curl_ftpauth;
pub const CURLFTPAUTH_LAST: curl_ftpauth = 3;
pub const CURLFTPAUTH_TLS: curl_ftpauth = 2;
pub const CURLFTPAUTH_SSL: curl_ftpauth = 1;
pub const CURLFTPAUTH_DEFAULT: curl_ftpauth = 0;
pub type curl_ftpfile = crate::src::lib::http2::curl_ftpfile;
pub const FTPFILE_SINGLECWD: curl_ftpfile = 3;
pub const FTPFILE_NOCWD: curl_ftpfile = 2;
pub const FTPFILE_MULTICWD: curl_ftpfile = 1;
// #[derive(Copy, Clone)]

pub type ssl_general_config = crate::src::lib::http2::ssl_general_config;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type ssl_config_data = crate::src::lib::http2::ssl_config_data;
pub type CURL_TLSAUTH = crate::src::lib::http2::CURL_TLSAUTH;
pub const CURL_TLSAUTH_LAST: CURL_TLSAUTH = 2;
pub const CURL_TLSAUTH_SRP: CURL_TLSAUTH = 1;
pub const CURL_TLSAUTH_NONE: CURL_TLSAUTH = 0;
pub type curl_ssl_ctx_callback = crate::src::lib::http2::curl_ssl_ctx_callback;
pub type curl_proxytype = crate::src::lib::http2::curl_proxytype;
pub const CURLPROXY_SOCKS5_HOSTNAME: curl_proxytype = 7;
pub const CURLPROXY_SOCKS4A: curl_proxytype = 6;
pub const CURLPROXY_SOCKS5: curl_proxytype = 5;
pub const CURLPROXY_SOCKS4: curl_proxytype = 4;
pub const CURLPROXY_HTTPS: curl_proxytype = 2;
pub const CURLPROXY_HTTP_1_0: curl_proxytype = 1;
pub const CURLPROXY_HTTP: curl_proxytype = 0;
pub type curl_TimeCond = crate::src::lib::http2::curl_TimeCond;
pub const CURL_TIMECOND_LAST: curl_TimeCond = 4;
pub const CURL_TIMECOND_LASTMOD: curl_TimeCond = 3;
pub const CURL_TIMECOND_IFUNMODSINCE: curl_TimeCond = 2;
pub const CURL_TIMECOND_IFMODSINCE: curl_TimeCond = 1;
pub const CURL_TIMECOND_NONE: curl_TimeCond = 0;
// #[derive(Copy, Clone)]

pub type curl_mimepart = crate::src::lib::http2::curl_mimepart;
// #[derive(Copy, Clone)]

pub type mime_encoder_state = crate::src::lib::http2::mime_encoder_state;
// #[derive(Copy, Clone)]

pub type mime_encoder = crate::src::lib::http2::mime_encoder;
// #[derive(Copy, Clone)]

pub type mime_state = crate::src::lib::http2::mime_state;
pub type mimestate = crate::src::lib::http2::mimestate;
pub const MIMESTATE_LAST: mimestate = 9;
pub const MIMESTATE_END: mimestate = 8;
pub const MIMESTATE_CONTENT: mimestate = 7;
pub const MIMESTATE_BOUNDARY2: mimestate = 6;
pub const MIMESTATE_BOUNDARY1: mimestate = 5;
pub const MIMESTATE_BODY: mimestate = 4;
pub const MIMESTATE_EOH: mimestate = 3;
pub const MIMESTATE_USERHEADERS: mimestate = 2;
pub const MIMESTATE_CURLHEADERS: mimestate = 1;
pub const MIMESTATE_BEGIN: mimestate = 0;
pub type curl_free_callback = crate::src::lib::http2::curl_free_callback;
pub type curl_seek_callback = crate::src::lib::http2::curl_seek_callback;
pub type mimekind = crate::src::lib::http2::mimekind;
pub const MIMEKIND_LAST: mimekind = 5;
pub const MIMEKIND_MULTIPART: mimekind = 4;
pub const MIMEKIND_CALLBACK: mimekind = 3;
pub const MIMEKIND_FILE: mimekind = 2;
pub const MIMEKIND_DATA: mimekind = 1;
pub const MIMEKIND_NONE: mimekind = 0;
// #[derive(Copy, Clone)]

pub type curl_mime = crate::src::lib::http2::curl_mime;
// #[derive(Copy, Clone)]

pub type curl_httppost = crate::src::lib::http2::curl_httppost;
pub type curl_hstswrite_callback = crate::src::lib::http2::curl_hstswrite_callback;
// #[derive(Copy, Clone)]

pub type curl_index = crate::src::lib::http2::curl_index;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type curl_hstsentry = crate::src::lib::http2::curl_hstsentry;
pub type CURLSTScode = crate::src::lib::http2::CURLSTScode;
pub const CURLSTS_FAIL: CURLSTScode = 2;
pub const CURLSTS_DONE: CURLSTScode = 1;
pub const CURLSTS_OK: CURLSTScode = 0;
pub type curl_hstsread_callback = crate::src::lib::http2::curl_hstsread_callback;
pub type curl_conv_callback = crate::src::lib::http2::curl_conv_callback;
pub type curl_closesocket_callback = crate::src::lib::http2::curl_closesocket_callback;
pub type curl_socket_t = crate::src::lib::http2::curl_socket_t;
pub type curl_opensocket_callback = crate::src::lib::http2::curl_opensocket_callback;
// #[derive(Copy, Clone)]

pub type curl_sockaddr = crate::src::lib::http2::curl_sockaddr;
pub type curlsocktype = crate::src::lib::http2::curlsocktype;
pub const CURLSOCKTYPE_LAST: curlsocktype = 2;
pub const CURLSOCKTYPE_ACCEPT: curlsocktype = 1;
pub const CURLSOCKTYPE_IPCXN: curlsocktype = 0;
pub type curl_sockopt_callback = crate::src::lib::http2::curl_sockopt_callback;
pub type curl_ioctl_callback = crate::src::lib::http2::curl_ioctl_callback;
pub type curlioerr = crate::src::lib::http2::curlioerr;
pub const CURLIOE_LAST: curlioerr = 3;
pub const CURLIOE_FAILRESTART: curlioerr = 2;
pub const CURLIOE_UNKNOWNCMD: curlioerr = 1;
pub const CURLIOE_OK: curlioerr = 0;
pub type curl_debug_callback = crate::src::lib::http2::curl_debug_callback;
pub type curl_infotype = crate::src::lib::http2::curl_infotype;
pub const CURLINFO_END: curl_infotype = 7;
pub const CURLINFO_SSL_DATA_OUT: curl_infotype = 6;
pub const CURLINFO_SSL_DATA_IN: curl_infotype = 5;
pub const CURLINFO_DATA_OUT: curl_infotype = 4;
pub const CURLINFO_DATA_IN: curl_infotype = 3;
pub const CURLINFO_HEADER_OUT: curl_infotype = 2;
pub const CURLINFO_HEADER_IN: curl_infotype = 1;
pub const CURLINFO_TEXT: curl_infotype = 0;
pub type curl_xferinfo_callback = crate::src::lib::http2::curl_xferinfo_callback;
pub type curl_progress_callback = crate::src::lib::http2::curl_progress_callback;
pub type curl_write_callback = crate::src::lib::http2::curl_write_callback;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type SingleRequest = crate::src::lib::http2::SingleRequest;
// #[derive(Copy, Clone)]

pub type dohdata = crate::src::lib::http2::dohdata;
// #[derive(Copy, Clone)]

pub type dnsprobe = crate::src::lib::http2::dnsprobe;
// #[derive(Copy, Clone)]

pub type C2RustUnnamed = crate::src::lib::http2::C2RustUnnamed;
// #[derive(Copy, Clone)]

pub type SSHPROTO = crate::src::lib::http2::SSHPROTO;
// #[derive(Copy, Clone)]

pub type SMTP = crate::src::lib::http2::SMTP;
pub type curl_pp_transfer = crate::src::lib::http2::curl_pp_transfer;
pub const PPTRANSFER_NONE: curl_pp_transfer = 2;
pub const PPTRANSFER_INFO: curl_pp_transfer = 1;
pub const PPTRANSFER_BODY: curl_pp_transfer = 0;
// #[derive(Copy, Clone)]

pub type RTSP = crate::src::lib::http2::RTSP;
// #[derive(Copy, Clone)]

pub type HTTP = crate::src::lib::http2::HTTP;
pub type uint8_t = crate::src::lib::http2::uint8_t;
pub type uint32_t = crate::src::lib::http2::uint32_t;
pub type C2RustUnnamed_0 = u32;
pub const HTTPSEND_BODY: C2RustUnnamed_0 = 2;
pub const HTTPSEND_REQUEST: C2RustUnnamed_0 = 1;
pub const HTTPSEND_NADA: C2RustUnnamed_0 = 0;
// #[derive(Copy, Clone)]

pub type back = crate::src::lib::http2::back;
// #[derive(Copy, Clone)]

pub type POP3 = crate::src::lib::http2::POP3;
// #[derive(Copy, Clone)]

pub type MQTT = crate::src::lib::http2::MQTT;
// #[derive(Copy, Clone)]

pub type IMAP = crate::src::lib::http2::IMAP;
// #[derive(Copy, Clone)]

pub type FTP = crate::src::lib::http2::FTP;
// #[derive(Copy, Clone)]

pub type FILEPROTO = crate::src::lib::http2::FILEPROTO;
pub type upgrade101 = crate::src::lib::http2::upgrade101;
pub const UPGR101_WORKING: upgrade101 = 3;
pub const UPGR101_RECEIVED: upgrade101 = 2;
pub const UPGR101_REQUESTED: upgrade101 = 1;
pub const UPGR101_INIT: upgrade101 = 0;
pub type expect100 = crate::src::lib::http2::expect100;
pub const EXP100_FAILED: expect100 = 3;
pub const EXP100_SENDING_REQUEST: expect100 = 2;
pub const EXP100_AWAITING_CONTINUE: expect100 = 1;
pub const EXP100_SEND_DATA: expect100 = 0;
pub type C2RustUnnamed_1 = u32;
pub const HEADER_ALLBAD: C2RustUnnamed_1 = 2;
pub const HEADER_PARTHEADER: C2RustUnnamed_1 = 1;
pub const HEADER_NORMAL: C2RustUnnamed_1 = 0;
// #[derive(Copy, Clone)]

pub type PslCache = crate::src::lib::http2::PslCache;
pub type psl_ctx_t = crate::src::lib::http2::psl_ctx_t;
// #[derive(Copy, Clone)]

pub type Curl_multi = crate::src::lib::http2::Curl_multi;
pub type curl_multi_timer_callback = crate::src::lib::http2::curl_multi_timer_callback;
pub type CURLM = crate::src::lib::http2::CURLM;
pub type curl_push_callback = crate::src::lib::http2::curl_push_callback;
pub type curl_socket_callback = crate::src::lib::http2::curl_socket_callback;
// #[derive(Copy, Clone)]

pub type Names = crate::src::lib::http2::Names;
pub type C2RustUnnamed_2 = u32;
pub const HCACHE_SHARED: C2RustUnnamed_2 = 2;
pub const HCACHE_MULTI: C2RustUnnamed_2 = 1;
pub const HCACHE_NONE: C2RustUnnamed_2 = 0;
// #[derive(Copy, Clone)]

pub type Curl_message = crate::src::lib::http2::Curl_message;
// #[derive(Copy, Clone)]

pub type CURLMsg = crate::src::lib::http2::CURLMsg;
// #[derive(Copy, Clone)]

pub type C2RustUnnamed_3 = crate::src::lib::http2::C2RustUnnamed_3;
pub type CURLMSG = crate::src::lib::http2::CURLMSG;
pub const CURLMSG_LAST: CURLMSG = 2;
pub const CURLMSG_DONE: CURLMSG = 1;
pub const CURLMSG_NONE: CURLMSG = 0;
pub type CURLMstate = crate::src::lib::http2::CURLMstate;
pub const MSTATE_LAST: CURLMstate = 17;
pub const MSTATE_MSGSENT: CURLMstate = 16;
pub const MSTATE_COMPLETED: CURLMstate = 15;
pub const MSTATE_DONE: CURLMstate = 14;
pub const MSTATE_RATELIMITING: CURLMstate = 13;
pub const MSTATE_PERFORMING: CURLMstate = 12;
pub const MSTATE_DID: CURLMstate = 11;
pub const MSTATE_DOING_MORE: CURLMstate = 10;
pub const MSTATE_DOING: CURLMstate = 9;
pub const MSTATE_DO: CURLMstate = 8;
pub const MSTATE_PROTOCONNECTING: CURLMstate = 7;
pub const MSTATE_PROTOCONNECT: CURLMstate = 6;
pub const MSTATE_TUNNELING: CURLMstate = 5;
pub const MSTATE_CONNECTING: CURLMstate = 4;
pub const MSTATE_RESOLVING: CURLMstate = 3;
pub const MSTATE_CONNECT: CURLMstate = 2;
pub const MSTATE_PENDING: CURLMstate = 1;
pub const MSTATE_INIT: CURLMstate = 0;
// #[derive(Copy, Clone)]

pub type connectdata = crate::src::lib::http2::connectdata;
// #[derive(Copy, Clone)]

pub type connectbundle = crate::src::lib::http2::connectbundle;
// #[derive(Copy, Clone)]

pub type C2RustUnnamed_4 = crate::src::lib::http2::C2RustUnnamed_4;
// #[derive(Copy, Clone)]

pub type mqtt_conn = crate::src::lib::http2::mqtt_conn;
pub type mqttstate = crate::src::lib::http2::mqttstate;
pub const MQTT_NOSTATE: mqttstate = 7;
pub const MQTT_PUB_REMAIN: mqttstate = 6;
pub const MQTT_PUBWAIT: mqttstate = 5;
pub const MQTT_SUBACK_COMING: mqttstate = 4;
pub const MQTT_SUBACK: mqttstate = 3;
pub const MQTT_CONNACK: mqttstate = 2;
pub const MQTT_REMAINING_LENGTH: mqttstate = 1;
pub const MQTT_FIRST: mqttstate = 0;
// #[derive(Copy, Clone)]

pub type smb_conn = crate::src::lib::http2::smb_conn;
pub type smb_conn_state = crate::src::lib::http2::smb_conn_state;
pub const SMB_CONNECTED: smb_conn_state = 4;
pub const SMB_SETUP: smb_conn_state = 3;
pub const SMB_NEGOTIATE: smb_conn_state = 2;
pub const SMB_CONNECTING: smb_conn_state = 1;
pub const SMB_NOT_CONNECTED: smb_conn_state = 0;
// #[derive(Copy, Clone)]

pub type rtsp_conn = crate::src::lib::http2::rtsp_conn;
// #[derive(Copy, Clone)]

pub type smtp_conn = crate::src::lib::http2::smtp_conn;
// #[derive(Copy, Clone)]

pub type SASL = crate::src::lib::http2::SASL;
pub type saslstate = crate::src::lib::http2::saslstate;
pub const SASL_FINAL: saslstate = 17;
pub const SASL_CANCEL: saslstate = 16;
pub const SASL_GSASL: saslstate = 15;
pub const SASL_OAUTH2_RESP: saslstate = 14;
pub const SASL_OAUTH2: saslstate = 13;
pub const SASL_GSSAPI_NO_DATA: saslstate = 12;
pub const SASL_GSSAPI_TOKEN: saslstate = 11;
pub const SASL_GSSAPI: saslstate = 10;
pub const SASL_NTLM_TYPE2MSG: saslstate = 9;
pub const SASL_NTLM: saslstate = 8;
pub const SASL_DIGESTMD5_RESP: saslstate = 7;
pub const SASL_DIGESTMD5: saslstate = 6;
pub const SASL_CRAMMD5: saslstate = 5;
pub const SASL_EXTERNAL: saslstate = 4;
pub const SASL_LOGIN_PASSWD: saslstate = 3;
pub const SASL_LOGIN: saslstate = 2;
pub const SASL_PLAIN: saslstate = 1;
pub const SASL_STOP: saslstate = 0;
// #[derive(Copy, Clone)]

pub type SASLproto = crate::src::lib::http2::SASLproto;
pub type smtpstate = crate::src::lib::http2::smtpstate;
pub const SMTP_LAST: smtpstate = 13;
pub const SMTP_QUIT: smtpstate = 12;
pub const SMTP_POSTDATA: smtpstate = 11;
pub const SMTP_DATA: smtpstate = 10;
pub const SMTP_RCPT: smtpstate = 9;
pub const SMTP_MAIL: smtpstate = 8;
pub const SMTP_COMMAND: smtpstate = 7;
pub const SMTP_AUTH: smtpstate = 6;
pub const SMTP_UPGRADETLS: smtpstate = 5;
pub const SMTP_STARTTLS: smtpstate = 4;
pub const SMTP_HELO: smtpstate = 3;
pub const SMTP_EHLO: smtpstate = 2;
pub const SMTP_SERVERGREET: smtpstate = 1;
pub const SMTP_STOP: smtpstate = 0;
// #[derive(Copy, Clone)]

pub type pingpong = crate::src::lib::http2::pingpong;
// #[derive(Copy, Clone)]

pub type pop3_conn = crate::src::lib::http2::pop3_conn;
pub type pop3state = crate::src::lib::http2::pop3state;
pub const POP3_LAST: pop3state = 11;
pub const POP3_QUIT: pop3state = 10;
pub const POP3_COMMAND: pop3state = 9;
pub const POP3_PASS: pop3state = 8;
pub const POP3_USER: pop3state = 7;
pub const POP3_APOP: pop3state = 6;
pub const POP3_AUTH: pop3state = 5;
pub const POP3_UPGRADETLS: pop3state = 4;
pub const POP3_STARTTLS: pop3state = 3;
pub const POP3_CAPA: pop3state = 2;
pub const POP3_SERVERGREET: pop3state = 1;
pub const POP3_STOP: pop3state = 0;
// #[derive(Copy, Clone)]

pub type imap_conn = crate::src::lib::http2::imap_conn;
pub type imapstate = crate::src::lib::http2::imapstate;
pub const IMAP_LAST: imapstate = 15;
pub const IMAP_LOGOUT: imapstate = 14;
pub const IMAP_SEARCH: imapstate = 13;
pub const IMAP_APPEND_FINAL: imapstate = 12;
pub const IMAP_APPEND: imapstate = 11;
pub const IMAP_FETCH_FINAL: imapstate = 10;
pub const IMAP_FETCH: imapstate = 9;
pub const IMAP_SELECT: imapstate = 8;
pub const IMAP_LIST: imapstate = 7;
pub const IMAP_LOGIN: imapstate = 6;
pub const IMAP_AUTHENTICATE: imapstate = 5;
pub const IMAP_UPGRADETLS: imapstate = 4;
pub const IMAP_STARTTLS: imapstate = 3;
pub const IMAP_CAPABILITY: imapstate = 2;
pub const IMAP_SERVERGREET: imapstate = 1;
pub const IMAP_STOP: imapstate = 0;
// #[derive(Copy, Clone)]

pub type ssh_conn = crate::src::lib::http2::ssh_conn;
pub type sshstate = crate::src::lib::http2::sshstate;
pub const SSH_LAST: sshstate = 60;
pub const SSH_QUIT: sshstate = 59;
pub const SSH_SESSION_FREE: sshstate = 58;
pub const SSH_SESSION_DISCONNECT: sshstate = 57;
pub const SSH_SCP_CHANNEL_FREE: sshstate = 56;
pub const SSH_SCP_WAIT_CLOSE: sshstate = 55;
pub const SSH_SCP_WAIT_EOF: sshstate = 54;
pub const SSH_SCP_SEND_EOF: sshstate = 53;
pub const SSH_SCP_DONE: sshstate = 52;
pub const SSH_SCP_DOWNLOAD: sshstate = 51;
pub const SSH_SCP_DOWNLOAD_INIT: sshstate = 50;
pub const SSH_SCP_UPLOAD_INIT: sshstate = 49;
pub const SSH_SCP_TRANS_INIT: sshstate = 48;
pub const SSH_SFTP_SHUTDOWN: sshstate = 47;
pub const SSH_SFTP_CLOSE: sshstate = 46;
pub const SSH_SFTP_DOWNLOAD_STAT: sshstate = 45;
pub const SSH_SFTP_DOWNLOAD_INIT: sshstate = 44;
pub const SSH_SFTP_READDIR_DONE: sshstate = 43;
pub const SSH_SFTP_READDIR_BOTTOM: sshstate = 42;
pub const SSH_SFTP_READDIR_LINK: sshstate = 41;
pub const SSH_SFTP_READDIR: sshstate = 40;
pub const SSH_SFTP_READDIR_INIT: sshstate = 39;
pub const SSH_SFTP_CREATE_DIRS_MKDIR: sshstate = 38;
pub const SSH_SFTP_CREATE_DIRS: sshstate = 37;
pub const SSH_SFTP_CREATE_DIRS_INIT: sshstate = 36;
pub const SSH_SFTP_UPLOAD_INIT: sshstate = 35;
pub const SSH_SFTP_TRANS_INIT: sshstate = 34;
pub const SSH_SFTP_FILETIME: sshstate = 33;
pub const SSH_SFTP_GETINFO: sshstate = 32;
pub const SSH_SFTP_QUOTE_STATVFS: sshstate = 31;
pub const SSH_SFTP_QUOTE_UNLINK: sshstate = 30;
pub const SSH_SFTP_QUOTE_RMDIR: sshstate = 29;
pub const SSH_SFTP_QUOTE_RENAME: sshstate = 28;
pub const SSH_SFTP_QUOTE_MKDIR: sshstate = 27;
pub const SSH_SFTP_QUOTE_SYMLINK: sshstate = 26;
pub const SSH_SFTP_QUOTE_SETSTAT: sshstate = 25;
pub const SSH_SFTP_QUOTE_STAT: sshstate = 24;
pub const SSH_SFTP_NEXT_QUOTE: sshstate = 23;
pub const SSH_SFTP_QUOTE: sshstate = 22;
pub const SSH_SFTP_POSTQUOTE_INIT: sshstate = 21;
pub const SSH_SFTP_QUOTE_INIT: sshstate = 20;
pub const SSH_SFTP_REALPATH: sshstate = 19;
pub const SSH_SFTP_INIT: sshstate = 18;
pub const SSH_AUTH_DONE: sshstate = 17;
pub const SSH_AUTH_GSSAPI: sshstate = 16;
pub const SSH_AUTH_KEY: sshstate = 15;
pub const SSH_AUTH_KEY_INIT: sshstate = 14;
pub const SSH_AUTH_HOST: sshstate = 13;
pub const SSH_AUTH_HOST_INIT: sshstate = 12;
pub const SSH_AUTH_AGENT: sshstate = 11;
pub const SSH_AUTH_AGENT_LIST: sshstate = 10;
pub const SSH_AUTH_AGENT_INIT: sshstate = 9;
pub const SSH_AUTH_PASS: sshstate = 8;
pub const SSH_AUTH_PASS_INIT: sshstate = 7;
pub const SSH_AUTH_PKEY: sshstate = 6;
pub const SSH_AUTH_PKEY_INIT: sshstate = 5;
pub const SSH_AUTHLIST: sshstate = 4;
pub const SSH_HOSTKEY: sshstate = 3;
pub const SSH_S_STARTUP: sshstate = 2;
pub const SSH_INIT: sshstate = 1;
pub const SSH_STOP: sshstate = 0;
pub const SSH_NO_STATE: sshstate = -1;
// #[derive(Copy, Clone)]

pub type http_conn = crate::src::lib::http2::http_conn;
// #[derive(Copy, Clone)]

pub type nghttp2_settings_entry = crate::src::lib::http2::nghttp2_settings_entry;
// #[derive(Copy, Clone)]

pub type h2settings = crate::src::lib::http2::h2settings;
pub type Curl_recv = crate::src::lib::http2::Curl_recv;
pub type Curl_send = crate::src::lib::http2::Curl_send;
// #[derive(Copy, Clone)]

pub type ftp_conn = crate::src::lib::http2::ftp_conn;
pub type ftpstate = crate::src::lib::http2::ftpstate;
pub const FTP_LAST: ftpstate = 35;
pub const FTP_QUIT: ftpstate = 34;
pub const FTP_STOR: ftpstate = 33;
pub const FTP_RETR: ftpstate = 32;
pub const FTP_LIST: ftpstate = 31;
pub const FTP_PASV: ftpstate = 30;
pub const FTP_PRET: ftpstate = 29;
pub const FTP_PORT: ftpstate = 28;
pub const FTP_RETR_REST: ftpstate = 27;
pub const FTP_REST: ftpstate = 26;
pub const FTP_STOR_SIZE: ftpstate = 25;
pub const FTP_RETR_SIZE: ftpstate = 24;
pub const FTP_SIZE: ftpstate = 23;
pub const FTP_STOR_TYPE: ftpstate = 22;
pub const FTP_RETR_TYPE: ftpstate = 21;
pub const FTP_LIST_TYPE: ftpstate = 20;
pub const FTP_TYPE: ftpstate = 19;
pub const FTP_MDTM: ftpstate = 18;
pub const FTP_MKD: ftpstate = 17;
pub const FTP_CWD: ftpstate = 16;
pub const FTP_POSTQUOTE: ftpstate = 15;
pub const FTP_STOR_PREQUOTE: ftpstate = 14;
pub const FTP_RETR_PREQUOTE: ftpstate = 13;
pub const FTP_QUOTE: ftpstate = 12;
pub const FTP_NAMEFMT: ftpstate = 11;
pub const FTP_SYST: ftpstate = 10;
pub const FTP_PWD: ftpstate = 9;
pub const FTP_CCC: ftpstate = 8;
pub const FTP_PROT: ftpstate = 7;
pub const FTP_PBSZ: ftpstate = 6;
pub const FTP_ACCT: ftpstate = 5;
pub const FTP_PASS: ftpstate = 4;
pub const FTP_USER: ftpstate = 3;
pub const FTP_AUTH: ftpstate = 2;
pub const FTP_WAIT220: ftpstate = 1;
pub const FTP_STOP: ftpstate = 0;
// #[derive(Copy, Clone)]

pub type ntlmdata = crate::src::lib::http2::ntlmdata;
pub type curlntlm = crate::src::lib::http2::curlntlm;
pub const NTLMSTATE_LAST: curlntlm = 4;
pub const NTLMSTATE_TYPE3: curlntlm = 3;
pub const NTLMSTATE_TYPE2: curlntlm = 2;
pub const NTLMSTATE_TYPE1: curlntlm = 1;
pub const NTLMSTATE_NONE: curlntlm = 0;
// #[derive(Copy, Clone)]

pub type gsasldata = crate::src::lib::http2::gsasldata;
// #[derive(Copy, Clone)]

pub type Curl_handler = crate::src::lib::http2::Curl_handler;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type ConnectBits = crate::src::lib::http2::ConnectBits;
// #[derive(Copy, Clone, BitfieldStruct)]

pub type ssl_connect_data = crate::src::lib::http2::ssl_connect_data;
pub type ssl_connect_state = crate::src::lib::http2::ssl_connect_state;
pub const ssl_connect_done: ssl_connect_state = 5;
pub const ssl_connect_3: ssl_connect_state = 4;
pub const ssl_connect_2_writing: ssl_connect_state = 3;
pub const ssl_connect_2_reading: ssl_connect_state = 2;
pub const ssl_connect_2: ssl_connect_state = 1;
pub const ssl_connect_1: ssl_connect_state = 0;
pub type ssl_connection_state = crate::src::lib::http2::ssl_connection_state;
pub const ssl_connection_complete: ssl_connection_state = 2;
pub const ssl_connection_negotiating: ssl_connection_state = 1;
pub const ssl_connection_none: ssl_connection_state = 0;
// #[derive(Copy, Clone)]

pub type proxy_info = crate::src::lib::http2::proxy_info;
// #[derive(Copy, Clone)]

pub type hostname = crate::src::lib::http2::hostname;
pub type C2RustUnnamed_5 = u32;
pub const TRNSPRT_QUIC: C2RustUnnamed_5 = 5;
pub const TRNSPRT_UDP: C2RustUnnamed_5 = 4;
pub const TRNSPRT_TCP: C2RustUnnamed_5 = 3;
// #[derive(Copy, Clone)]

pub type Curl_chunker = crate::src::lib::http2::Curl_chunker;
pub type ChunkyState = crate::src::lib::http2::ChunkyState;
pub const CHUNK_TRAILER_POSTCR: ChunkyState = 7;
pub const CHUNK_TRAILER_CR: ChunkyState = 6;
pub const CHUNK_TRAILER: ChunkyState = 5;
pub const CHUNK_STOP: ChunkyState = 4;
pub const CHUNK_POSTLF: ChunkyState = 3;
pub const CHUNK_DATA: ChunkyState = 2;
pub const CHUNK_LF: ChunkyState = 1;
pub const CHUNK_HEX: ChunkyState = 0;
// #[derive(Copy, Clone)]

pub type connstate = crate::src::lib::http2::connstate;
pub type connect_t = crate::src::lib::http2::connect_t;
pub const CONNECT_DONE: connect_t = 17;
pub const CONNECT_REQ_READ_MORE: connect_t = 16;
pub const CONNECT_REQ_READ: connect_t = 15;
pub const CONNECT_REQ_SENDING: connect_t = 14;
pub const CONNECT_REQ_SEND: connect_t = 13;
pub const CONNECT_RESOLVE_REMOTE: connect_t = 12;
pub const CONNECT_RESOLVED: connect_t = 11;
pub const CONNECT_RESOLVING: connect_t = 10;
pub const CONNECT_REQ_INIT: connect_t = 9;
pub const CONNECT_AUTH_READ: connect_t = 8;
pub const CONNECT_AUTH_SEND: connect_t = 7;
pub const CONNECT_AUTH_INIT: connect_t = 6;
pub const CONNECT_GSSAPI_INIT: connect_t = 5;
pub const CONNECT_SOCKS_READ: connect_t = 4;
pub const CONNECT_SOCKS_READ_INIT: connect_t = 3;
pub const CONNECT_SOCKS_SEND: connect_t = 2;
pub const CONNECT_SOCKS_INIT: connect_t = 1;
pub const CONNECT_INIT: connect_t = 0;
pub type curlfiletype = crate::src::lib::fileinfo::curlfiletype;
pub const CURLFILETYPE_UNKNOWN: curlfiletype = 8;
pub const CURLFILETYPE_DOOR: curlfiletype = 7;
pub const CURLFILETYPE_SOCKET: curlfiletype = 6;
pub const CURLFILETYPE_NAMEDPIPE: curlfiletype = 5;
pub const CURLFILETYPE_DEVICE_CHAR: curlfiletype = 4;
pub const CURLFILETYPE_DEVICE_BLOCK: curlfiletype = 3;
pub const CURLFILETYPE_SYMLINK: curlfiletype = 2;
pub const CURLFILETYPE_DIRECTORY: curlfiletype = 1;
pub const CURLFILETYPE_FILE: curlfiletype = 0;
// #[derive(Copy, Clone)]

pub type curl_fileinfo = crate::src::lib::fileinfo::curl_fileinfo;
// #[derive(Copy, Clone)]

pub type C2RustUnnamed_6 = crate::src::lib::fileinfo::C2RustUnnamed;
pub type curl_malloc_callback = crate::src::lib::http2::curl_malloc_callback;
pub type curl_realloc_callback = crate::src::lib::dynbuf::curl_realloc_callback;
pub type curl_calloc_callback = crate::src::lib::http2::curl_calloc_callback;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ftp_parselist_data {
    pub os_type: C2RustUnnamed_22,
    pub state: C2RustUnnamed_8,
    pub error: CURLcode,
    pub file_data: *mut fileinfo,
    pub item_length: u32,
    pub item_offset: size_t,
    pub offsets: C2RustUnnamed_7,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub filename: size_t,
    pub user: size_t,
    pub group: size_t,
    pub time: size_t,
    pub perm: size_t,
    pub symlink_target: size_t,
}
// #[derive(Copy, Clone)]

pub type fileinfo = crate::src::lib::fileinfo::fileinfo;
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_8 {
    pub UNIX: C2RustUnnamed_13,
    pub NT: C2RustUnnamed_9,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_9 {
    pub main: pl_winNT_mainstate,
    pub sub: pl_winNT_substate,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union pl_winNT_substate {
    pub time: C2RustUnnamed_12,
    pub dirorsize: C2RustUnnamed_11,
    pub filename: C2RustUnnamed_10,
}
pub type C2RustUnnamed_10 = u32;
pub const PL_WINNT_FILENAME_WINEOL: C2RustUnnamed_10 = 2;
pub const PL_WINNT_FILENAME_CONTENT: C2RustUnnamed_10 = 1;
pub const PL_WINNT_FILENAME_PRESPACE: C2RustUnnamed_10 = 0;
pub type C2RustUnnamed_11 = u32;
pub const PL_WINNT_DIRORSIZE_CONTENT: C2RustUnnamed_11 = 1;
pub const PL_WINNT_DIRORSIZE_PRESPACE: C2RustUnnamed_11 = 0;
pub type C2RustUnnamed_12 = u32;
pub const PL_WINNT_TIME_TIME: C2RustUnnamed_12 = 1;
pub const PL_WINNT_TIME_PRESPACE: C2RustUnnamed_12 = 0;
pub type pl_winNT_mainstate = u32;
pub const PL_WINNT_FILENAME: pl_winNT_mainstate = 3;
pub const PL_WINNT_DIRORSIZE: pl_winNT_mainstate = 2;
pub const PL_WINNT_TIME: pl_winNT_mainstate = 1;
pub const PL_WINNT_DATE: pl_winNT_mainstate = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_13 {
    pub main: pl_unix_mainstate,
    pub sub: pl_unix_substate,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union pl_unix_substate {
    pub total_dirsize: C2RustUnnamed_21,
    pub hlinks: C2RustUnnamed_20,
    pub user: C2RustUnnamed_19,
    pub group: C2RustUnnamed_18,
    pub size: C2RustUnnamed_17,
    pub time: C2RustUnnamed_16,
    pub filename: C2RustUnnamed_15,
    pub symlink: C2RustUnnamed_14,
}
pub type C2RustUnnamed_14 = u32;
pub const PL_UNIX_SYMLINK_WINDOWSEOL: C2RustUnnamed_14 = 7;
pub const PL_UNIX_SYMLINK_TARGET: C2RustUnnamed_14 = 6;
pub const PL_UNIX_SYMLINK_PRETARGET4: C2RustUnnamed_14 = 5;
pub const PL_UNIX_SYMLINK_PRETARGET3: C2RustUnnamed_14 = 4;
pub const PL_UNIX_SYMLINK_PRETARGET2: C2RustUnnamed_14 = 3;
pub const PL_UNIX_SYMLINK_PRETARGET1: C2RustUnnamed_14 = 2;
pub const PL_UNIX_SYMLINK_NAME: C2RustUnnamed_14 = 1;
pub const PL_UNIX_SYMLINK_PRESPACE: C2RustUnnamed_14 = 0;
pub type C2RustUnnamed_15 = u32;
pub const PL_UNIX_FILENAME_WINDOWSEOL: C2RustUnnamed_15 = 2;
pub const PL_UNIX_FILENAME_NAME: C2RustUnnamed_15 = 1;
pub const PL_UNIX_FILENAME_PRESPACE: C2RustUnnamed_15 = 0;
pub type C2RustUnnamed_16 = u32;
pub const PL_UNIX_TIME_PART3: C2RustUnnamed_16 = 5;
pub const PL_UNIX_TIME_PREPART3: C2RustUnnamed_16 = 4;
pub const PL_UNIX_TIME_PART2: C2RustUnnamed_16 = 3;
pub const PL_UNIX_TIME_PREPART2: C2RustUnnamed_16 = 2;
pub const PL_UNIX_TIME_PART1: C2RustUnnamed_16 = 1;
pub const PL_UNIX_TIME_PREPART1: C2RustUnnamed_16 = 0;
pub type C2RustUnnamed_17 = u32;
pub const PL_UNIX_SIZE_NUMBER: C2RustUnnamed_17 = 1;
pub const PL_UNIX_SIZE_PRESPACE: C2RustUnnamed_17 = 0;
pub type C2RustUnnamed_18 = u32;
pub const PL_UNIX_GROUP_NAME: C2RustUnnamed_18 = 1;
pub const PL_UNIX_GROUP_PRESPACE: C2RustUnnamed_18 = 0;
pub type C2RustUnnamed_19 = u32;
pub const PL_UNIX_USER_PARSING: C2RustUnnamed_19 = 1;
pub const PL_UNIX_USER_PRESPACE: C2RustUnnamed_19 = 0;
pub type C2RustUnnamed_20 = u32;
pub const PL_UNIX_HLINKS_NUMBER: C2RustUnnamed_20 = 1;
pub const PL_UNIX_HLINKS_PRESPACE: C2RustUnnamed_20 = 0;
pub type C2RustUnnamed_21 = u32;
pub const PL_UNIX_TOTALSIZE_READING: C2RustUnnamed_21 = 1;
pub const PL_UNIX_TOTALSIZE_INIT: C2RustUnnamed_21 = 0;
pub type pl_unix_mainstate = u32;
pub const PL_UNIX_SYMLINK: pl_unix_mainstate = 9;
pub const PL_UNIX_FILENAME: pl_unix_mainstate = 8;
pub const PL_UNIX_TIME: pl_unix_mainstate = 7;
pub const PL_UNIX_SIZE: pl_unix_mainstate = 6;
pub const PL_UNIX_GROUP: pl_unix_mainstate = 5;
pub const PL_UNIX_USER: pl_unix_mainstate = 4;
pub const PL_UNIX_HLINKS: pl_unix_mainstate = 3;
pub const PL_UNIX_PERMISSION: pl_unix_mainstate = 2;
pub const PL_UNIX_FILETYPE: pl_unix_mainstate = 1;
pub const PL_UNIX_TOTALSIZE: pl_unix_mainstate = 0;
pub type C2RustUnnamed_22 = u32;
pub const OS_TYPE_WIN_NT: C2RustUnnamed_22 = 2;
pub const OS_TYPE_UNIX: C2RustUnnamed_22 = 1;
pub const OS_TYPE_UNKNOWN: C2RustUnnamed_22 = 0;
// #[derive(Copy, Clone)]

pub type ftp_wc = crate::src::lib::ftp::ftp_wc;
// #[derive(Copy, Clone)]

pub type C2RustUnnamed_23 = crate::src::lib::ftp::C2RustUnnamed_11;
pub type CURLofft = crate::src::lib::cookie::CURLofft;
pub const CURL_OFFT_INVAL: CURLofft = 2;
pub const CURL_OFFT_FLOW: CURLofft = 1;
pub const CURL_OFFT_OK: CURLofft = 0;
#[no_mangle]
pub unsafe extern "C" fn Curl_ftp_parselist_data_alloc() -> *mut ftp_parselist_data {
    return Curl_ccalloc
        .expect(
            "non-null function pointer",
        )(
        1 as i32 as size_t,
        ::std::mem::size_of::<ftp_parselist_data>() as u64,
    ) as *mut ftp_parselist_data;
}
#[no_mangle]
pub unsafe extern "C" fn Curl_ftp_parselist_data_free(
    mut parserp: *mut *mut ftp_parselist_data,
) {
    let mut parser: *mut ftp_parselist_data = *parserp;
    if !parser.is_null() {
        Curl_fileinfo_cleanup((*parser).file_data);
    }
    Curl_cfree.expect("non-null function pointer")(parser as *mut libc::c_void);
    *parserp = 0 as *mut ftp_parselist_data;
}
#[no_mangle]
pub unsafe extern "C" fn Curl_ftp_parselist_geterror(
    mut pl_data: *mut ftp_parselist_data,
) -> CURLcode {
    return (*pl_data).error;
}
unsafe extern "C" fn ftp_pl_get_permission(mut str: *const i8) -> i32 {
    let mut permissions: i32 = 0 as i32;
    if *str.offset(0 as i32 as isize) as i32 == 'r' as i32 {
        permissions |= (1 as i32) << 8 as i32;
    } else if *str.offset(0 as i32 as isize) as i32 != '-' as i32 {
        permissions |= 0x1000000 as i32;
    }
    if *str.offset(1 as i32 as isize) as i32 == 'w' as i32 {
        permissions |= (1 as i32) << 7 as i32;
    } else if *str.offset(1 as i32 as isize) as i32 != '-' as i32 {
        permissions |= 0x1000000 as i32;
    }
    if *str.offset(2 as i32 as isize) as i32 == 'x' as i32 {
        permissions |= (1 as i32) << 6 as i32;
    } else if *str.offset(2 as i32 as isize) as i32 == 's' as i32 {
        permissions |= (1 as i32) << 6 as i32;
        permissions |= (1 as i32) << 11 as i32;
    } else if *str.offset(2 as i32 as isize) as i32 == 'S' as i32 {
        permissions |= (1 as i32) << 11 as i32;
    } else if *str.offset(2 as i32 as isize) as i32 != '-' as i32 {
        permissions |= 0x1000000 as i32;
    }
    if *str.offset(3 as i32 as isize) as i32 == 'r' as i32 {
        permissions |= (1 as i32) << 5 as i32;
    } else if *str.offset(3 as i32 as isize) as i32 != '-' as i32 {
        permissions |= 0x1000000 as i32;
    }
    if *str.offset(4 as i32 as isize) as i32 == 'w' as i32 {
        permissions |= (1 as i32) << 4 as i32;
    } else if *str.offset(4 as i32 as isize) as i32 != '-' as i32 {
        permissions |= 0x1000000 as i32;
    }
    if *str.offset(5 as i32 as isize) as i32 == 'x' as i32 {
        permissions |= (1 as i32) << 3 as i32;
    } else if *str.offset(5 as i32 as isize) as i32 == 's' as i32 {
        permissions |= (1 as i32) << 3 as i32;
        permissions |= (1 as i32) << 10 as i32;
    } else if *str.offset(5 as i32 as isize) as i32 == 'S' as i32 {
        permissions |= (1 as i32) << 10 as i32;
    } else if *str.offset(5 as i32 as isize) as i32 != '-' as i32 {
        permissions |= 0x1000000 as i32;
    }
    if *str.offset(6 as i32 as isize) as i32 == 'r' as i32 {
        permissions |= (1 as i32) << 2 as i32;
    } else if *str.offset(6 as i32 as isize) as i32 != '-' as i32 {
        permissions |= 0x1000000 as i32;
    }
    if *str.offset(7 as i32 as isize) as i32 == 'w' as i32 {
        permissions |= (1 as i32) << 1 as i32;
    } else if *str.offset(7 as i32 as isize) as i32 != '-' as i32 {
        permissions |= 0x1000000 as i32;
    }
    if *str.offset(8 as i32 as isize) as i32 == 'x' as i32 {
        permissions |= 1 as i32;
    } else if *str.offset(8 as i32 as isize) as i32 == 't' as i32 {
        permissions |= 1 as i32;
        permissions |= (1 as i32) << 9 as i32;
    } else if *str.offset(8 as i32 as isize) as i32 == 'T' as i32 {
        permissions |= (1 as i32) << 9 as i32;
    } else if *str.offset(8 as i32 as isize) as i32 != '-' as i32 {
        permissions |= 0x1000000 as i32;
    }
    return permissions;
}
unsafe extern "C" fn ftp_pl_insert_finfo(
    mut data: *mut Curl_easy,
    mut infop: *mut fileinfo,
) -> CURLcode {
    let mut compare: curl_fnmatch_callback = None;
    let mut wc: *mut WildcardData = &mut (*data).wildcard;
    let mut ftpwc: *mut ftp_wc = (*wc).protdata as *mut ftp_wc;
    let mut llist: *mut Curl_llist = &mut (*wc).filelist;
    let mut parser: *mut ftp_parselist_data = (*ftpwc).parser;
    let mut add: bool = 1 as i32 != 0;
    let mut finfo: *mut curl_fileinfo = &mut (*infop).info;
    let mut str: *mut i8 = (*finfo).b_data;
    let ref mut fresh0 = (*finfo).filename;
    *fresh0 = str.offset((*parser).offsets.filename as isize);
    let ref mut fresh1 = (*finfo).strings.group;
    *fresh1 = if (*parser).offsets.group != 0 {
        str.offset((*parser).offsets.group as isize)
    } else {
        0 as *mut i8
    };
    let ref mut fresh2 = (*finfo).strings.perm;
    *fresh2 = if (*parser).offsets.perm != 0 {
        str.offset((*parser).offsets.perm as isize)
    } else {
        0 as *mut i8
    };
    let ref mut fresh3 = (*finfo).strings.target;
    *fresh3 = if (*parser).offsets.symlink_target != 0 {
        str.offset((*parser).offsets.symlink_target as isize)
    } else {
        0 as *mut i8
    };
    let ref mut fresh4 = (*finfo).strings.time;
    *fresh4 = str.offset((*parser).offsets.time as isize);
    let ref mut fresh5 = (*finfo).strings.user;
    *fresh5 = if (*parser).offsets.user != 0 {
        str.offset((*parser).offsets.user as isize)
    } else {
        0 as *mut i8
    };
    compare = (*data).set.fnmatch;
    if compare.is_none() {
        compare = Some(
            Curl_fnmatch
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *const i8,
                    *const i8,
                ) -> i32,
        );
    }
    Curl_set_in_callback(data, 1 as i32 != 0);
    if compare
        .expect(
            "non-null function pointer",
        )((*data).set.fnmatch_data, (*wc).pattern, (*finfo).filename) == 0 as i32
    {
        if (*finfo).filetype as u32
            == CURLFILETYPE_SYMLINK as i32 as u32
            && !((*finfo).strings.target).is_null()
            && !(strstr(
                (*finfo).strings.target,
                b" -> \0" as *const u8 as *const i8,
            ))
                .is_null()
        {
            add = 0 as i32 != 0;
        }
    } else {
        add = 0 as i32 != 0;
    }
    Curl_set_in_callback(data, 0 as i32 != 0);
    if add {
        Curl_llist_insert_next(
            llist,
            (*llist).tail,
            finfo as *const libc::c_void,
            &mut (*infop).list,
        );
    } else {
        Curl_fileinfo_cleanup(infop);
    }
    let ref mut fresh6 = (*(*ftpwc).parser).file_data;
    *fresh6 = 0 as *mut fileinfo;
    return CURLE_OK;
}
#[no_mangle]
pub unsafe extern "C" fn Curl_ftp_parselist(
    mut buffer: *mut i8,
    mut size: size_t,
    mut nmemb: size_t,
    mut connptr: *mut libc::c_void,
) -> size_t {
    let mut current_block: u64;
    let mut bufflen: size_t = size.wrapping_mul(nmemb);
    let mut data: *mut Curl_easy = connptr as *mut Curl_easy;
    let mut ftpwc: *mut ftp_wc = (*data).wildcard.protdata as *mut ftp_wc;
    let mut parser: *mut ftp_parselist_data = (*ftpwc).parser;
    let mut infop: *mut fileinfo = 0 as *mut fileinfo;
    let mut finfo: *mut curl_fileinfo = 0 as *mut curl_fileinfo;
    let mut i: u64 = 0 as i32 as u64;
    let mut result: CURLcode = CURLE_OK;
    let mut retsize: size_t = bufflen;
    if !((*parser).error as u64 != 0) {
        if (*parser).os_type as u32
            == OS_TYPE_UNKNOWN as i32 as u32
            && bufflen > 0 as i32 as u64
        {
            (*parser)
                .os_type = (if *buffer.offset(0 as i32 as isize) as i32
                >= '0' as i32
                && *buffer.offset(0 as i32 as isize) as i32 <= '9' as i32
            {
                OS_TYPE_WIN_NT as i32
            } else {
                OS_TYPE_UNIX as i32
            }) as C2RustUnnamed_22;
        }
        loop {
            if !(i < bufflen) {
                current_block = 12024005797910882043;
                break;
            }
            let mut c: i8 = *buffer.offset(i as isize);
            if ((*parser).file_data).is_null() {
                let ref mut fresh7 = (*parser).file_data;
                *fresh7 = Curl_fileinfo_alloc();
                if ((*parser).file_data).is_null() {
                    (*parser).error = CURLE_OUT_OF_MEMORY;
                    current_block = 2744986921145312189;
                    break;
                } else {
                    let ref mut fresh8 = (*(*parser).file_data).info.b_data;
                    *fresh8 = Curl_cmalloc
                        .expect(
                            "non-null function pointer",
                        )(160 as i32 as size_t) as *mut i8;
                    if ((*(*parser).file_data).info.b_data).is_null() {
                        (*parser).error = CURLE_OUT_OF_MEMORY;
                        current_block = 2744986921145312189;
                        break;
                    } else {
                        (*(*parser).file_data)
                            .info
                            .b_size = 160 as i32 as size_t;
                        (*parser).item_offset = 0 as i32 as size_t;
                        (*parser).item_length = 0 as i32 as u32;
                    }
                }
            }
            infop = (*parser).file_data;
            finfo = &mut (*infop).info;
            let ref mut fresh9 = (*finfo).b_used;
            let fresh10 = *fresh9;
            *fresh9 = (*fresh9).wrapping_add(1);
            *((*finfo).b_data).offset(fresh10 as isize) = c;
            if (*finfo).b_used
                >= ((*finfo).b_size).wrapping_sub(1 as i32 as u64)
            {
                let mut tmp: *mut i8 = Curl_crealloc
                    .expect(
                        "non-null function pointer",
                    )(
                    (*finfo).b_data as *mut libc::c_void,
                    ((*finfo).b_size).wrapping_add(160 as i32 as u64),
                ) as *mut i8;
                if !tmp.is_null() {
                    let ref mut fresh11 = (*finfo).b_size;
                    *fresh11 = (*fresh11 as u64)
                        .wrapping_add(160 as i32 as u64) as size_t
                        as size_t;
                    let ref mut fresh12 = (*finfo).b_data;
                    *fresh12 = tmp;
                } else {
                    Curl_fileinfo_cleanup((*parser).file_data);
                    let ref mut fresh13 = (*parser).file_data;
                    *fresh13 = 0 as *mut fileinfo;
                    (*parser).error = CURLE_OUT_OF_MEMORY;
                    current_block = 2744986921145312189;
                    break;
                }
            }
            match (*parser).os_type as u32 {
                1 => {
                    match (*parser).state.UNIX.main as u32 {
                        0 => {
                            current_block = 6082618239964698303;
                            match current_block {
                                8766933510340254178 => {
                                    match (*parser).state.UNIX.sub.group as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_NAME;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh21 = (*parser).item_length;
                                            *fresh21 = (*fresh21).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.group = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_SIZE;
                                                (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                6741331514682881155 => {
                                    match (*parser).state.UNIX.sub.filename as u32 {
                                        0 => {
                                            current_block = 16568099337217562901;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 6238770140693924516;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 324927455815272852;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4559895070850021248 => {
                                    match (*parser).state.UNIX.sub.time as u32 {
                                        0 => {
                                            current_block = 6491746245349886758;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4254343112372971250;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 11885867108041370833;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 1386051155667515338;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 10847424462451774687;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 11933949776976427876;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                16531133314883224481 => {
                                    match (*parser).state.UNIX.sub.size as u32 {
                                        0 => {
                                            current_block = 17528034014223767392;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 16049509989560666770;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4254812759871570170 => {
                                    match (*parser).state.UNIX.sub.hlinks as u32 {
                                        0 => {
                                            current_block = 17295375881484672733;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 15282274978015228059;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                7896587573582807180 => {
                                    let ref mut fresh18 = (*parser).item_length;
                                    *fresh18 = (*fresh18).wrapping_add(1);
                                    if (*parser).item_length <= 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"rwx-tTsS\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 10 as i32 as u32
                                        {
                                        let mut perm: u32 = 0;
                                        if c as i32 != ' ' as i32 {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        } else {
                                            *((*finfo).b_data)
                                                .offset(
                                                    10 as i32 as isize,
                                                ) = 0 as i32 as i8;
                                            perm = ftp_pl_get_permission(
                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                            ) as u32;
                                            if perm & 0x1000000 as i32 as u32 != 0 {
                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                current_block = 2744986921145312189;
                                                break;
                                            } else {
                                                (*(*parser).file_data).info.flags
                                                    |= ((1 as i32) << 3 as i32) as u32;
                                                (*(*parser).file_data).info.perm = perm;
                                                (*parser).offsets.perm = (*parser).item_offset;
                                                (*parser).item_length = 0 as i32 as u32;
                                                (*parser).state.UNIX.main = PL_UNIX_HLINKS;
                                                (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_PRESPACE;
                                            }
                                        }
                                    }
                                }
                                4236813582425298261 => {
                                    match c as i32 {
                                        45 => {
                                            (*finfo).filetype = CURLFILETYPE_FILE;
                                        }
                                        100 => {
                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                        }
                                        108 => {
                                            (*finfo).filetype = CURLFILETYPE_SYMLINK;
                                        }
                                        112 => {
                                            (*finfo).filetype = CURLFILETYPE_NAMEDPIPE;
                                        }
                                        115 => {
                                            (*finfo).filetype = CURLFILETYPE_SOCKET;
                                        }
                                        99 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_CHAR;
                                        }
                                        98 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_BLOCK;
                                        }
                                        68 => {
                                            (*finfo).filetype = CURLFILETYPE_DOOR;
                                        }
                                        _ => {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    }
                                    (*parser).state.UNIX.main = PL_UNIX_PERMISSION;
                                    (*parser).item_length = 0 as i32 as u32;
                                    (*parser).item_offset = 1 as i32 as size_t;
                                }
                                6082618239964698303 => {
                                    match (*parser).state.UNIX.sub.total_dirsize as u32
                                    {
                                        0 => {
                                            current_block = 1625512947971215695;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4029943248288457101;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                18245268955835867220 => {
                                    match (*parser).state.UNIX.sub.user as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.user = PL_UNIX_USER_PARSING;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh20 = (*parser).item_length;
                                            *fresh20 = (*fresh20).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.user = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_GROUP;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.UNIX.sub.symlink as u32 {
                                        0 => {
                                            current_block = 218747262665541458;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4142149688065477410;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 714134998687897190;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 11742859648667696368;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 15755521303720483476;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 13215364868079927127;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        6 => {
                                            current_block = 8608877124123389102;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        7 => {
                                            current_block = 17502623293752361944;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        1 => {
                            current_block = 4236813582425298261;
                            match current_block {
                                8766933510340254178 => {
                                    match (*parser).state.UNIX.sub.group as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_NAME;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh21 = (*parser).item_length;
                                            *fresh21 = (*fresh21).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.group = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_SIZE;
                                                (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                6741331514682881155 => {
                                    match (*parser).state.UNIX.sub.filename as u32 {
                                        0 => {
                                            current_block = 16568099337217562901;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 6238770140693924516;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 324927455815272852;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4559895070850021248 => {
                                    match (*parser).state.UNIX.sub.time as u32 {
                                        0 => {
                                            current_block = 6491746245349886758;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4254343112372971250;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 11885867108041370833;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 1386051155667515338;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 10847424462451774687;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 11933949776976427876;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                16531133314883224481 => {
                                    match (*parser).state.UNIX.sub.size as u32 {
                                        0 => {
                                            current_block = 17528034014223767392;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 16049509989560666770;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4254812759871570170 => {
                                    match (*parser).state.UNIX.sub.hlinks as u32 {
                                        0 => {
                                            current_block = 17295375881484672733;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 15282274978015228059;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                7896587573582807180 => {
                                    let ref mut fresh18 = (*parser).item_length;
                                    *fresh18 = (*fresh18).wrapping_add(1);
                                    if (*parser).item_length <= 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"rwx-tTsS\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 10 as i32 as u32
                                        {
                                        let mut perm: u32 = 0;
                                        if c as i32 != ' ' as i32 {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        } else {
                                            *((*finfo).b_data)
                                                .offset(
                                                    10 as i32 as isize,
                                                ) = 0 as i32 as i8;
                                            perm = ftp_pl_get_permission(
                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                            ) as u32;
                                            if perm & 0x1000000 as i32 as u32 != 0 {
                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                current_block = 2744986921145312189;
                                                break;
                                            } else {
                                                (*(*parser).file_data).info.flags
                                                    |= ((1 as i32) << 3 as i32) as u32;
                                                (*(*parser).file_data).info.perm = perm;
                                                (*parser).offsets.perm = (*parser).item_offset;
                                                (*parser).item_length = 0 as i32 as u32;
                                                (*parser).state.UNIX.main = PL_UNIX_HLINKS;
                                                (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_PRESPACE;
                                            }
                                        }
                                    }
                                }
                                4236813582425298261 => {
                                    match c as i32 {
                                        45 => {
                                            (*finfo).filetype = CURLFILETYPE_FILE;
                                        }
                                        100 => {
                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                        }
                                        108 => {
                                            (*finfo).filetype = CURLFILETYPE_SYMLINK;
                                        }
                                        112 => {
                                            (*finfo).filetype = CURLFILETYPE_NAMEDPIPE;
                                        }
                                        115 => {
                                            (*finfo).filetype = CURLFILETYPE_SOCKET;
                                        }
                                        99 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_CHAR;
                                        }
                                        98 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_BLOCK;
                                        }
                                        68 => {
                                            (*finfo).filetype = CURLFILETYPE_DOOR;
                                        }
                                        _ => {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    }
                                    (*parser).state.UNIX.main = PL_UNIX_PERMISSION;
                                    (*parser).item_length = 0 as i32 as u32;
                                    (*parser).item_offset = 1 as i32 as size_t;
                                }
                                6082618239964698303 => {
                                    match (*parser).state.UNIX.sub.total_dirsize as u32
                                    {
                                        0 => {
                                            current_block = 1625512947971215695;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4029943248288457101;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                18245268955835867220 => {
                                    match (*parser).state.UNIX.sub.user as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.user = PL_UNIX_USER_PARSING;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh20 = (*parser).item_length;
                                            *fresh20 = (*fresh20).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.user = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_GROUP;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.UNIX.sub.symlink as u32 {
                                        0 => {
                                            current_block = 218747262665541458;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4142149688065477410;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 714134998687897190;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 11742859648667696368;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 15755521303720483476;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 13215364868079927127;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        6 => {
                                            current_block = 8608877124123389102;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        7 => {
                                            current_block = 17502623293752361944;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        2 => {
                            current_block = 7896587573582807180;
                            match current_block {
                                8766933510340254178 => {
                                    match (*parser).state.UNIX.sub.group as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_NAME;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh21 = (*parser).item_length;
                                            *fresh21 = (*fresh21).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.group = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_SIZE;
                                                (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                6741331514682881155 => {
                                    match (*parser).state.UNIX.sub.filename as u32 {
                                        0 => {
                                            current_block = 16568099337217562901;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 6238770140693924516;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 324927455815272852;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4559895070850021248 => {
                                    match (*parser).state.UNIX.sub.time as u32 {
                                        0 => {
                                            current_block = 6491746245349886758;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4254343112372971250;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 11885867108041370833;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 1386051155667515338;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 10847424462451774687;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 11933949776976427876;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                16531133314883224481 => {
                                    match (*parser).state.UNIX.sub.size as u32 {
                                        0 => {
                                            current_block = 17528034014223767392;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 16049509989560666770;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4254812759871570170 => {
                                    match (*parser).state.UNIX.sub.hlinks as u32 {
                                        0 => {
                                            current_block = 17295375881484672733;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 15282274978015228059;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                7896587573582807180 => {
                                    let ref mut fresh18 = (*parser).item_length;
                                    *fresh18 = (*fresh18).wrapping_add(1);
                                    if (*parser).item_length <= 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"rwx-tTsS\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 10 as i32 as u32
                                        {
                                        let mut perm: u32 = 0;
                                        if c as i32 != ' ' as i32 {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        } else {
                                            *((*finfo).b_data)
                                                .offset(
                                                    10 as i32 as isize,
                                                ) = 0 as i32 as i8;
                                            perm = ftp_pl_get_permission(
                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                            ) as u32;
                                            if perm & 0x1000000 as i32 as u32 != 0 {
                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                current_block = 2744986921145312189;
                                                break;
                                            } else {
                                                (*(*parser).file_data).info.flags
                                                    |= ((1 as i32) << 3 as i32) as u32;
                                                (*(*parser).file_data).info.perm = perm;
                                                (*parser).offsets.perm = (*parser).item_offset;
                                                (*parser).item_length = 0 as i32 as u32;
                                                (*parser).state.UNIX.main = PL_UNIX_HLINKS;
                                                (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_PRESPACE;
                                            }
                                        }
                                    }
                                }
                                4236813582425298261 => {
                                    match c as i32 {
                                        45 => {
                                            (*finfo).filetype = CURLFILETYPE_FILE;
                                        }
                                        100 => {
                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                        }
                                        108 => {
                                            (*finfo).filetype = CURLFILETYPE_SYMLINK;
                                        }
                                        112 => {
                                            (*finfo).filetype = CURLFILETYPE_NAMEDPIPE;
                                        }
                                        115 => {
                                            (*finfo).filetype = CURLFILETYPE_SOCKET;
                                        }
                                        99 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_CHAR;
                                        }
                                        98 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_BLOCK;
                                        }
                                        68 => {
                                            (*finfo).filetype = CURLFILETYPE_DOOR;
                                        }
                                        _ => {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    }
                                    (*parser).state.UNIX.main = PL_UNIX_PERMISSION;
                                    (*parser).item_length = 0 as i32 as u32;
                                    (*parser).item_offset = 1 as i32 as size_t;
                                }
                                6082618239964698303 => {
                                    match (*parser).state.UNIX.sub.total_dirsize as u32
                                    {
                                        0 => {
                                            current_block = 1625512947971215695;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4029943248288457101;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                18245268955835867220 => {
                                    match (*parser).state.UNIX.sub.user as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.user = PL_UNIX_USER_PARSING;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh20 = (*parser).item_length;
                                            *fresh20 = (*fresh20).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.user = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_GROUP;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.UNIX.sub.symlink as u32 {
                                        0 => {
                                            current_block = 218747262665541458;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4142149688065477410;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 714134998687897190;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 11742859648667696368;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 15755521303720483476;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 13215364868079927127;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        6 => {
                                            current_block = 8608877124123389102;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        7 => {
                                            current_block = 17502623293752361944;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        3 => {
                            current_block = 4254812759871570170;
                            match current_block {
                                8766933510340254178 => {
                                    match (*parser).state.UNIX.sub.group as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_NAME;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh21 = (*parser).item_length;
                                            *fresh21 = (*fresh21).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.group = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_SIZE;
                                                (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                6741331514682881155 => {
                                    match (*parser).state.UNIX.sub.filename as u32 {
                                        0 => {
                                            current_block = 16568099337217562901;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 6238770140693924516;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 324927455815272852;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4559895070850021248 => {
                                    match (*parser).state.UNIX.sub.time as u32 {
                                        0 => {
                                            current_block = 6491746245349886758;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4254343112372971250;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 11885867108041370833;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 1386051155667515338;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 10847424462451774687;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 11933949776976427876;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                16531133314883224481 => {
                                    match (*parser).state.UNIX.sub.size as u32 {
                                        0 => {
                                            current_block = 17528034014223767392;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 16049509989560666770;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4254812759871570170 => {
                                    match (*parser).state.UNIX.sub.hlinks as u32 {
                                        0 => {
                                            current_block = 17295375881484672733;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 15282274978015228059;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                7896587573582807180 => {
                                    let ref mut fresh18 = (*parser).item_length;
                                    *fresh18 = (*fresh18).wrapping_add(1);
                                    if (*parser).item_length <= 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"rwx-tTsS\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 10 as i32 as u32
                                        {
                                        let mut perm: u32 = 0;
                                        if c as i32 != ' ' as i32 {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        } else {
                                            *((*finfo).b_data)
                                                .offset(
                                                    10 as i32 as isize,
                                                ) = 0 as i32 as i8;
                                            perm = ftp_pl_get_permission(
                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                            ) as u32;
                                            if perm & 0x1000000 as i32 as u32 != 0 {
                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                current_block = 2744986921145312189;
                                                break;
                                            } else {
                                                (*(*parser).file_data).info.flags
                                                    |= ((1 as i32) << 3 as i32) as u32;
                                                (*(*parser).file_data).info.perm = perm;
                                                (*parser).offsets.perm = (*parser).item_offset;
                                                (*parser).item_length = 0 as i32 as u32;
                                                (*parser).state.UNIX.main = PL_UNIX_HLINKS;
                                                (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_PRESPACE;
                                            }
                                        }
                                    }
                                }
                                4236813582425298261 => {
                                    match c as i32 {
                                        45 => {
                                            (*finfo).filetype = CURLFILETYPE_FILE;
                                        }
                                        100 => {
                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                        }
                                        108 => {
                                            (*finfo).filetype = CURLFILETYPE_SYMLINK;
                                        }
                                        112 => {
                                            (*finfo).filetype = CURLFILETYPE_NAMEDPIPE;
                                        }
                                        115 => {
                                            (*finfo).filetype = CURLFILETYPE_SOCKET;
                                        }
                                        99 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_CHAR;
                                        }
                                        98 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_BLOCK;
                                        }
                                        68 => {
                                            (*finfo).filetype = CURLFILETYPE_DOOR;
                                        }
                                        _ => {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    }
                                    (*parser).state.UNIX.main = PL_UNIX_PERMISSION;
                                    (*parser).item_length = 0 as i32 as u32;
                                    (*parser).item_offset = 1 as i32 as size_t;
                                }
                                6082618239964698303 => {
                                    match (*parser).state.UNIX.sub.total_dirsize as u32
                                    {
                                        0 => {
                                            current_block = 1625512947971215695;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4029943248288457101;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                18245268955835867220 => {
                                    match (*parser).state.UNIX.sub.user as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.user = PL_UNIX_USER_PARSING;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh20 = (*parser).item_length;
                                            *fresh20 = (*fresh20).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.user = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_GROUP;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.UNIX.sub.symlink as u32 {
                                        0 => {
                                            current_block = 218747262665541458;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4142149688065477410;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 714134998687897190;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 11742859648667696368;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 15755521303720483476;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 13215364868079927127;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        6 => {
                                            current_block = 8608877124123389102;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        7 => {
                                            current_block = 17502623293752361944;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        4 => {
                            current_block = 18245268955835867220;
                            match current_block {
                                8766933510340254178 => {
                                    match (*parser).state.UNIX.sub.group as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_NAME;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh21 = (*parser).item_length;
                                            *fresh21 = (*fresh21).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.group = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_SIZE;
                                                (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                6741331514682881155 => {
                                    match (*parser).state.UNIX.sub.filename as u32 {
                                        0 => {
                                            current_block = 16568099337217562901;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 6238770140693924516;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 324927455815272852;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4559895070850021248 => {
                                    match (*parser).state.UNIX.sub.time as u32 {
                                        0 => {
                                            current_block = 6491746245349886758;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4254343112372971250;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 11885867108041370833;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 1386051155667515338;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 10847424462451774687;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 11933949776976427876;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                16531133314883224481 => {
                                    match (*parser).state.UNIX.sub.size as u32 {
                                        0 => {
                                            current_block = 17528034014223767392;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 16049509989560666770;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4254812759871570170 => {
                                    match (*parser).state.UNIX.sub.hlinks as u32 {
                                        0 => {
                                            current_block = 17295375881484672733;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 15282274978015228059;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                7896587573582807180 => {
                                    let ref mut fresh18 = (*parser).item_length;
                                    *fresh18 = (*fresh18).wrapping_add(1);
                                    if (*parser).item_length <= 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"rwx-tTsS\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 10 as i32 as u32
                                        {
                                        let mut perm: u32 = 0;
                                        if c as i32 != ' ' as i32 {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        } else {
                                            *((*finfo).b_data)
                                                .offset(
                                                    10 as i32 as isize,
                                                ) = 0 as i32 as i8;
                                            perm = ftp_pl_get_permission(
                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                            ) as u32;
                                            if perm & 0x1000000 as i32 as u32 != 0 {
                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                current_block = 2744986921145312189;
                                                break;
                                            } else {
                                                (*(*parser).file_data).info.flags
                                                    |= ((1 as i32) << 3 as i32) as u32;
                                                (*(*parser).file_data).info.perm = perm;
                                                (*parser).offsets.perm = (*parser).item_offset;
                                                (*parser).item_length = 0 as i32 as u32;
                                                (*parser).state.UNIX.main = PL_UNIX_HLINKS;
                                                (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_PRESPACE;
                                            }
                                        }
                                    }
                                }
                                4236813582425298261 => {
                                    match c as i32 {
                                        45 => {
                                            (*finfo).filetype = CURLFILETYPE_FILE;
                                        }
                                        100 => {
                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                        }
                                        108 => {
                                            (*finfo).filetype = CURLFILETYPE_SYMLINK;
                                        }
                                        112 => {
                                            (*finfo).filetype = CURLFILETYPE_NAMEDPIPE;
                                        }
                                        115 => {
                                            (*finfo).filetype = CURLFILETYPE_SOCKET;
                                        }
                                        99 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_CHAR;
                                        }
                                        98 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_BLOCK;
                                        }
                                        68 => {
                                            (*finfo).filetype = CURLFILETYPE_DOOR;
                                        }
                                        _ => {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    }
                                    (*parser).state.UNIX.main = PL_UNIX_PERMISSION;
                                    (*parser).item_length = 0 as i32 as u32;
                                    (*parser).item_offset = 1 as i32 as size_t;
                                }
                                6082618239964698303 => {
                                    match (*parser).state.UNIX.sub.total_dirsize as u32
                                    {
                                        0 => {
                                            current_block = 1625512947971215695;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4029943248288457101;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                18245268955835867220 => {
                                    match (*parser).state.UNIX.sub.user as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.user = PL_UNIX_USER_PARSING;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh20 = (*parser).item_length;
                                            *fresh20 = (*fresh20).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.user = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_GROUP;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.UNIX.sub.symlink as u32 {
                                        0 => {
                                            current_block = 218747262665541458;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4142149688065477410;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 714134998687897190;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 11742859648667696368;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 15755521303720483476;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 13215364868079927127;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        6 => {
                                            current_block = 8608877124123389102;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        7 => {
                                            current_block = 17502623293752361944;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        5 => {
                            current_block = 8766933510340254178;
                            match current_block {
                                8766933510340254178 => {
                                    match (*parser).state.UNIX.sub.group as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_NAME;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh21 = (*parser).item_length;
                                            *fresh21 = (*fresh21).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.group = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_SIZE;
                                                (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                6741331514682881155 => {
                                    match (*parser).state.UNIX.sub.filename as u32 {
                                        0 => {
                                            current_block = 16568099337217562901;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 6238770140693924516;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 324927455815272852;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4559895070850021248 => {
                                    match (*parser).state.UNIX.sub.time as u32 {
                                        0 => {
                                            current_block = 6491746245349886758;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4254343112372971250;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 11885867108041370833;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 1386051155667515338;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 10847424462451774687;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 11933949776976427876;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                16531133314883224481 => {
                                    match (*parser).state.UNIX.sub.size as u32 {
                                        0 => {
                                            current_block = 17528034014223767392;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 16049509989560666770;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4254812759871570170 => {
                                    match (*parser).state.UNIX.sub.hlinks as u32 {
                                        0 => {
                                            current_block = 17295375881484672733;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 15282274978015228059;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                7896587573582807180 => {
                                    let ref mut fresh18 = (*parser).item_length;
                                    *fresh18 = (*fresh18).wrapping_add(1);
                                    if (*parser).item_length <= 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"rwx-tTsS\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 10 as i32 as u32
                                        {
                                        let mut perm: u32 = 0;
                                        if c as i32 != ' ' as i32 {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        } else {
                                            *((*finfo).b_data)
                                                .offset(
                                                    10 as i32 as isize,
                                                ) = 0 as i32 as i8;
                                            perm = ftp_pl_get_permission(
                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                            ) as u32;
                                            if perm & 0x1000000 as i32 as u32 != 0 {
                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                current_block = 2744986921145312189;
                                                break;
                                            } else {
                                                (*(*parser).file_data).info.flags
                                                    |= ((1 as i32) << 3 as i32) as u32;
                                                (*(*parser).file_data).info.perm = perm;
                                                (*parser).offsets.perm = (*parser).item_offset;
                                                (*parser).item_length = 0 as i32 as u32;
                                                (*parser).state.UNIX.main = PL_UNIX_HLINKS;
                                                (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_PRESPACE;
                                            }
                                        }
                                    }
                                }
                                4236813582425298261 => {
                                    match c as i32 {
                                        45 => {
                                            (*finfo).filetype = CURLFILETYPE_FILE;
                                        }
                                        100 => {
                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                        }
                                        108 => {
                                            (*finfo).filetype = CURLFILETYPE_SYMLINK;
                                        }
                                        112 => {
                                            (*finfo).filetype = CURLFILETYPE_NAMEDPIPE;
                                        }
                                        115 => {
                                            (*finfo).filetype = CURLFILETYPE_SOCKET;
                                        }
                                        99 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_CHAR;
                                        }
                                        98 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_BLOCK;
                                        }
                                        68 => {
                                            (*finfo).filetype = CURLFILETYPE_DOOR;
                                        }
                                        _ => {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    }
                                    (*parser).state.UNIX.main = PL_UNIX_PERMISSION;
                                    (*parser).item_length = 0 as i32 as u32;
                                    (*parser).item_offset = 1 as i32 as size_t;
                                }
                                6082618239964698303 => {
                                    match (*parser).state.UNIX.sub.total_dirsize as u32
                                    {
                                        0 => {
                                            current_block = 1625512947971215695;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4029943248288457101;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                18245268955835867220 => {
                                    match (*parser).state.UNIX.sub.user as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.user = PL_UNIX_USER_PARSING;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh20 = (*parser).item_length;
                                            *fresh20 = (*fresh20).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.user = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_GROUP;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.UNIX.sub.symlink as u32 {
                                        0 => {
                                            current_block = 218747262665541458;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4142149688065477410;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 714134998687897190;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 11742859648667696368;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 15755521303720483476;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 13215364868079927127;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        6 => {
                                            current_block = 8608877124123389102;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        7 => {
                                            current_block = 17502623293752361944;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        6 => {
                            current_block = 16531133314883224481;
                            match current_block {
                                8766933510340254178 => {
                                    match (*parser).state.UNIX.sub.group as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_NAME;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh21 = (*parser).item_length;
                                            *fresh21 = (*fresh21).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.group = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_SIZE;
                                                (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                6741331514682881155 => {
                                    match (*parser).state.UNIX.sub.filename as u32 {
                                        0 => {
                                            current_block = 16568099337217562901;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 6238770140693924516;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 324927455815272852;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4559895070850021248 => {
                                    match (*parser).state.UNIX.sub.time as u32 {
                                        0 => {
                                            current_block = 6491746245349886758;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4254343112372971250;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 11885867108041370833;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 1386051155667515338;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 10847424462451774687;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 11933949776976427876;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                16531133314883224481 => {
                                    match (*parser).state.UNIX.sub.size as u32 {
                                        0 => {
                                            current_block = 17528034014223767392;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 16049509989560666770;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4254812759871570170 => {
                                    match (*parser).state.UNIX.sub.hlinks as u32 {
                                        0 => {
                                            current_block = 17295375881484672733;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 15282274978015228059;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                7896587573582807180 => {
                                    let ref mut fresh18 = (*parser).item_length;
                                    *fresh18 = (*fresh18).wrapping_add(1);
                                    if (*parser).item_length <= 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"rwx-tTsS\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 10 as i32 as u32
                                        {
                                        let mut perm: u32 = 0;
                                        if c as i32 != ' ' as i32 {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        } else {
                                            *((*finfo).b_data)
                                                .offset(
                                                    10 as i32 as isize,
                                                ) = 0 as i32 as i8;
                                            perm = ftp_pl_get_permission(
                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                            ) as u32;
                                            if perm & 0x1000000 as i32 as u32 != 0 {
                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                current_block = 2744986921145312189;
                                                break;
                                            } else {
                                                (*(*parser).file_data).info.flags
                                                    |= ((1 as i32) << 3 as i32) as u32;
                                                (*(*parser).file_data).info.perm = perm;
                                                (*parser).offsets.perm = (*parser).item_offset;
                                                (*parser).item_length = 0 as i32 as u32;
                                                (*parser).state.UNIX.main = PL_UNIX_HLINKS;
                                                (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_PRESPACE;
                                            }
                                        }
                                    }
                                }
                                4236813582425298261 => {
                                    match c as i32 {
                                        45 => {
                                            (*finfo).filetype = CURLFILETYPE_FILE;
                                        }
                                        100 => {
                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                        }
                                        108 => {
                                            (*finfo).filetype = CURLFILETYPE_SYMLINK;
                                        }
                                        112 => {
                                            (*finfo).filetype = CURLFILETYPE_NAMEDPIPE;
                                        }
                                        115 => {
                                            (*finfo).filetype = CURLFILETYPE_SOCKET;
                                        }
                                        99 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_CHAR;
                                        }
                                        98 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_BLOCK;
                                        }
                                        68 => {
                                            (*finfo).filetype = CURLFILETYPE_DOOR;
                                        }
                                        _ => {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    }
                                    (*parser).state.UNIX.main = PL_UNIX_PERMISSION;
                                    (*parser).item_length = 0 as i32 as u32;
                                    (*parser).item_offset = 1 as i32 as size_t;
                                }
                                6082618239964698303 => {
                                    match (*parser).state.UNIX.sub.total_dirsize as u32
                                    {
                                        0 => {
                                            current_block = 1625512947971215695;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4029943248288457101;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                18245268955835867220 => {
                                    match (*parser).state.UNIX.sub.user as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.user = PL_UNIX_USER_PARSING;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh20 = (*parser).item_length;
                                            *fresh20 = (*fresh20).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.user = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_GROUP;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.UNIX.sub.symlink as u32 {
                                        0 => {
                                            current_block = 218747262665541458;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4142149688065477410;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 714134998687897190;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 11742859648667696368;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 15755521303720483476;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 13215364868079927127;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        6 => {
                                            current_block = 8608877124123389102;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        7 => {
                                            current_block = 17502623293752361944;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        7 => {
                            current_block = 4559895070850021248;
                            match current_block {
                                8766933510340254178 => {
                                    match (*parser).state.UNIX.sub.group as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_NAME;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh21 = (*parser).item_length;
                                            *fresh21 = (*fresh21).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.group = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_SIZE;
                                                (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                6741331514682881155 => {
                                    match (*parser).state.UNIX.sub.filename as u32 {
                                        0 => {
                                            current_block = 16568099337217562901;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 6238770140693924516;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 324927455815272852;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4559895070850021248 => {
                                    match (*parser).state.UNIX.sub.time as u32 {
                                        0 => {
                                            current_block = 6491746245349886758;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4254343112372971250;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 11885867108041370833;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 1386051155667515338;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 10847424462451774687;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 11933949776976427876;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                16531133314883224481 => {
                                    match (*parser).state.UNIX.sub.size as u32 {
                                        0 => {
                                            current_block = 17528034014223767392;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 16049509989560666770;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4254812759871570170 => {
                                    match (*parser).state.UNIX.sub.hlinks as u32 {
                                        0 => {
                                            current_block = 17295375881484672733;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 15282274978015228059;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                7896587573582807180 => {
                                    let ref mut fresh18 = (*parser).item_length;
                                    *fresh18 = (*fresh18).wrapping_add(1);
                                    if (*parser).item_length <= 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"rwx-tTsS\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 10 as i32 as u32
                                        {
                                        let mut perm: u32 = 0;
                                        if c as i32 != ' ' as i32 {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        } else {
                                            *((*finfo).b_data)
                                                .offset(
                                                    10 as i32 as isize,
                                                ) = 0 as i32 as i8;
                                            perm = ftp_pl_get_permission(
                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                            ) as u32;
                                            if perm & 0x1000000 as i32 as u32 != 0 {
                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                current_block = 2744986921145312189;
                                                break;
                                            } else {
                                                (*(*parser).file_data).info.flags
                                                    |= ((1 as i32) << 3 as i32) as u32;
                                                (*(*parser).file_data).info.perm = perm;
                                                (*parser).offsets.perm = (*parser).item_offset;
                                                (*parser).item_length = 0 as i32 as u32;
                                                (*parser).state.UNIX.main = PL_UNIX_HLINKS;
                                                (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_PRESPACE;
                                            }
                                        }
                                    }
                                }
                                4236813582425298261 => {
                                    match c as i32 {
                                        45 => {
                                            (*finfo).filetype = CURLFILETYPE_FILE;
                                        }
                                        100 => {
                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                        }
                                        108 => {
                                            (*finfo).filetype = CURLFILETYPE_SYMLINK;
                                        }
                                        112 => {
                                            (*finfo).filetype = CURLFILETYPE_NAMEDPIPE;
                                        }
                                        115 => {
                                            (*finfo).filetype = CURLFILETYPE_SOCKET;
                                        }
                                        99 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_CHAR;
                                        }
                                        98 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_BLOCK;
                                        }
                                        68 => {
                                            (*finfo).filetype = CURLFILETYPE_DOOR;
                                        }
                                        _ => {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    }
                                    (*parser).state.UNIX.main = PL_UNIX_PERMISSION;
                                    (*parser).item_length = 0 as i32 as u32;
                                    (*parser).item_offset = 1 as i32 as size_t;
                                }
                                6082618239964698303 => {
                                    match (*parser).state.UNIX.sub.total_dirsize as u32
                                    {
                                        0 => {
                                            current_block = 1625512947971215695;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4029943248288457101;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                18245268955835867220 => {
                                    match (*parser).state.UNIX.sub.user as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.user = PL_UNIX_USER_PARSING;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh20 = (*parser).item_length;
                                            *fresh20 = (*fresh20).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.user = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_GROUP;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.UNIX.sub.symlink as u32 {
                                        0 => {
                                            current_block = 218747262665541458;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4142149688065477410;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 714134998687897190;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 11742859648667696368;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 15755521303720483476;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 13215364868079927127;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        6 => {
                                            current_block = 8608877124123389102;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        7 => {
                                            current_block = 17502623293752361944;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        8 => {
                            current_block = 6741331514682881155;
                            match current_block {
                                8766933510340254178 => {
                                    match (*parser).state.UNIX.sub.group as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_NAME;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh21 = (*parser).item_length;
                                            *fresh21 = (*fresh21).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.group = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_SIZE;
                                                (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                6741331514682881155 => {
                                    match (*parser).state.UNIX.sub.filename as u32 {
                                        0 => {
                                            current_block = 16568099337217562901;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 6238770140693924516;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 324927455815272852;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4559895070850021248 => {
                                    match (*parser).state.UNIX.sub.time as u32 {
                                        0 => {
                                            current_block = 6491746245349886758;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4254343112372971250;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 11885867108041370833;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 1386051155667515338;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 10847424462451774687;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 11933949776976427876;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                16531133314883224481 => {
                                    match (*parser).state.UNIX.sub.size as u32 {
                                        0 => {
                                            current_block = 17528034014223767392;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 16049509989560666770;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4254812759871570170 => {
                                    match (*parser).state.UNIX.sub.hlinks as u32 {
                                        0 => {
                                            current_block = 17295375881484672733;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 15282274978015228059;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                7896587573582807180 => {
                                    let ref mut fresh18 = (*parser).item_length;
                                    *fresh18 = (*fresh18).wrapping_add(1);
                                    if (*parser).item_length <= 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"rwx-tTsS\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 10 as i32 as u32
                                        {
                                        let mut perm: u32 = 0;
                                        if c as i32 != ' ' as i32 {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        } else {
                                            *((*finfo).b_data)
                                                .offset(
                                                    10 as i32 as isize,
                                                ) = 0 as i32 as i8;
                                            perm = ftp_pl_get_permission(
                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                            ) as u32;
                                            if perm & 0x1000000 as i32 as u32 != 0 {
                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                current_block = 2744986921145312189;
                                                break;
                                            } else {
                                                (*(*parser).file_data).info.flags
                                                    |= ((1 as i32) << 3 as i32) as u32;
                                                (*(*parser).file_data).info.perm = perm;
                                                (*parser).offsets.perm = (*parser).item_offset;
                                                (*parser).item_length = 0 as i32 as u32;
                                                (*parser).state.UNIX.main = PL_UNIX_HLINKS;
                                                (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_PRESPACE;
                                            }
                                        }
                                    }
                                }
                                4236813582425298261 => {
                                    match c as i32 {
                                        45 => {
                                            (*finfo).filetype = CURLFILETYPE_FILE;
                                        }
                                        100 => {
                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                        }
                                        108 => {
                                            (*finfo).filetype = CURLFILETYPE_SYMLINK;
                                        }
                                        112 => {
                                            (*finfo).filetype = CURLFILETYPE_NAMEDPIPE;
                                        }
                                        115 => {
                                            (*finfo).filetype = CURLFILETYPE_SOCKET;
                                        }
                                        99 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_CHAR;
                                        }
                                        98 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_BLOCK;
                                        }
                                        68 => {
                                            (*finfo).filetype = CURLFILETYPE_DOOR;
                                        }
                                        _ => {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    }
                                    (*parser).state.UNIX.main = PL_UNIX_PERMISSION;
                                    (*parser).item_length = 0 as i32 as u32;
                                    (*parser).item_offset = 1 as i32 as size_t;
                                }
                                6082618239964698303 => {
                                    match (*parser).state.UNIX.sub.total_dirsize as u32
                                    {
                                        0 => {
                                            current_block = 1625512947971215695;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4029943248288457101;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                18245268955835867220 => {
                                    match (*parser).state.UNIX.sub.user as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.user = PL_UNIX_USER_PARSING;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh20 = (*parser).item_length;
                                            *fresh20 = (*fresh20).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.user = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_GROUP;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.UNIX.sub.symlink as u32 {
                                        0 => {
                                            current_block = 218747262665541458;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4142149688065477410;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 714134998687897190;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 11742859648667696368;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 15755521303720483476;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 13215364868079927127;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        6 => {
                                            current_block = 8608877124123389102;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        7 => {
                                            current_block = 17502623293752361944;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        9 => {
                            current_block = 9132331705625042405;
                            match current_block {
                                8766933510340254178 => {
                                    match (*parser).state.UNIX.sub.group as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_NAME;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh21 = (*parser).item_length;
                                            *fresh21 = (*fresh21).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.group = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_SIZE;
                                                (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                6741331514682881155 => {
                                    match (*parser).state.UNIX.sub.filename as u32 {
                                        0 => {
                                            current_block = 16568099337217562901;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 6238770140693924516;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 324927455815272852;
                                            match current_block {
                                                16568099337217562901 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.filename = PL_UNIX_FILENAME_NAME;
                                                    }
                                                }
                                                6238770140693924516 => {
                                                    let ref mut fresh28 = (*parser).item_length;
                                                    *fresh28 = (*fresh28).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .filename = PL_UNIX_FILENAME_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4559895070850021248 => {
                                    match (*parser).state.UNIX.sub.time as u32 {
                                        0 => {
                                            current_block = 6491746245349886758;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4254343112372971250;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 11885867108041370833;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 1386051155667515338;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 10847424462451774687;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 11933949776976427876;
                                            match current_block {
                                                6491746245349886758 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART1;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                10847424462451774687 => {
                                                    let ref mut fresh26 = (*parser).item_length;
                                                    *fresh26 = (*fresh26).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART3;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                1386051155667515338 => {
                                                    let ref mut fresh25 = (*parser).item_length;
                                                    *fresh25 = (*fresh25).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART3;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                11885867108041370833 => {
                                                    let ref mut fresh24 = (*parser).item_length;
                                                    *fresh24 = (*fresh24).wrapping_add(1);
                                                    if c as i32 != ' ' as i32 {
                                                        if Curl_isalnum(c as u8 as i32) != 0 {
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PART2;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                4254343112372971250 => {
                                                    let ref mut fresh23 = (*parser).item_length;
                                                    *fresh23 = (*fresh23).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART2;
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh27 = (*parser).item_length;
                                                    *fresh27 = (*fresh27).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        if (*finfo).filetype as u32
                                                            == CURLFILETYPE_SYMLINK as i32 as u32
                                                        {
                                                            (*parser).state.UNIX.main = PL_UNIX_SYMLINK;
                                                            (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_PRESPACE;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILENAME;
                                                            (*parser)
                                                                .state
                                                                .UNIX
                                                                .sub
                                                                .filename = PL_UNIX_FILENAME_PRESPACE;
                                                        }
                                                    } else if Curl_isalnum(c as u8 as i32)
                                                            == 0 && c as i32 != '.' as i32
                                                            && c as i32 != ':' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                16531133314883224481 => {
                                    match (*parser).state.UNIX.sub.size as u32 {
                                        0 => {
                                            current_block = 17528034014223767392;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 16049509989560666770;
                                            match current_block {
                                                17528034014223767392 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.size = PL_UNIX_SIZE_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh22 = (*parser).item_length;
                                                    *fresh22 = (*fresh22).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p_0: *mut i8 = 0 as *mut i8;
                                                        let mut fsize: curl_off_t = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if curlx_strtoofft(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p_0,
                                                            10 as i32,
                                                            &mut fsize,
                                                        ) as u64 == 0
                                                        {
                                                            if *p_0.offset(0 as i32 as isize) as i32
                                                                == '\u{0}' as i32
                                                                && fsize != 0x7fffffffffffffff as i64
                                                                && fsize
                                                                    != -(0x7fffffffffffffff as i64) - 1 as i64
                                                            {
                                                                (*(*parser).file_data).info.flags
                                                                    |= ((1 as i32) << 6 as i32) as u32;
                                                                (*(*parser).file_data).info.size = fsize;
                                                            }
                                                            (*parser).item_length = 0 as i32 as u32;
                                                            (*parser).item_offset = 0 as i32 as size_t;
                                                            (*parser).state.UNIX.main = PL_UNIX_TIME;
                                                            (*parser).state.UNIX.sub.time = PL_UNIX_TIME_PREPART1;
                                                        }
                                                    } else if Curl_isdigit(c as u8 as i32)
                                                            == 0
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                4254812759871570170 => {
                                    match (*parser).state.UNIX.sub.hlinks as u32 {
                                        0 => {
                                            current_block = 17295375881484672733;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 15282274978015228059;
                                            match current_block {
                                                17295375881484672733 => {
                                                    if c as i32 != ' ' as i32 {
                                                        if c as i32 >= '0' as i32
                                                            && c as i32 <= '9' as i32
                                                        {
                                                            (*parser)
                                                                .item_offset = ((*finfo).b_used)
                                                                .wrapping_sub(1 as i32 as u64);
                                                            (*parser).item_length = 1 as i32 as u32;
                                                            (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_NUMBER;
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh19 = (*parser).item_length;
                                                    *fresh19 = (*fresh19).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        let mut p: *mut i8 = 0 as *mut i8;
                                                        let mut hlinks: i64 = 0;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        hlinks = strtol(
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                            &mut p,
                                                            10 as i32,
                                                        );
                                                        if *p.offset(0 as i32 as isize) as i32
                                                            == '\u{0}' as i32
                                                            && hlinks != 9223372036854775807 as i64
                                                            && hlinks
                                                                != -(9223372036854775807 as i64)
                                                                    - 1 as i64
                                                        {
                                                            (*(*parser).file_data).info.flags
                                                                |= ((1 as i32) << 7 as i32) as u32;
                                                            (*(*parser).file_data).info.hardlinks = hlinks;
                                                        }
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                        (*parser).state.UNIX.main = PL_UNIX_USER;
                                                        (*parser).state.UNIX.sub.user = PL_UNIX_USER_PRESPACE;
                                                    } else if (c as i32) < '0' as i32
                                                            || c as i32 > '9' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                7896587573582807180 => {
                                    let ref mut fresh18 = (*parser).item_length;
                                    *fresh18 = (*fresh18).wrapping_add(1);
                                    if (*parser).item_length <= 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"rwx-tTsS\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 10 as i32 as u32
                                        {
                                        let mut perm: u32 = 0;
                                        if c as i32 != ' ' as i32 {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        } else {
                                            *((*finfo).b_data)
                                                .offset(
                                                    10 as i32 as isize,
                                                ) = 0 as i32 as i8;
                                            perm = ftp_pl_get_permission(
                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                            ) as u32;
                                            if perm & 0x1000000 as i32 as u32 != 0 {
                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                current_block = 2744986921145312189;
                                                break;
                                            } else {
                                                (*(*parser).file_data).info.flags
                                                    |= ((1 as i32) << 3 as i32) as u32;
                                                (*(*parser).file_data).info.perm = perm;
                                                (*parser).offsets.perm = (*parser).item_offset;
                                                (*parser).item_length = 0 as i32 as u32;
                                                (*parser).state.UNIX.main = PL_UNIX_HLINKS;
                                                (*parser).state.UNIX.sub.hlinks = PL_UNIX_HLINKS_PRESPACE;
                                            }
                                        }
                                    }
                                }
                                4236813582425298261 => {
                                    match c as i32 {
                                        45 => {
                                            (*finfo).filetype = CURLFILETYPE_FILE;
                                        }
                                        100 => {
                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                        }
                                        108 => {
                                            (*finfo).filetype = CURLFILETYPE_SYMLINK;
                                        }
                                        112 => {
                                            (*finfo).filetype = CURLFILETYPE_NAMEDPIPE;
                                        }
                                        115 => {
                                            (*finfo).filetype = CURLFILETYPE_SOCKET;
                                        }
                                        99 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_CHAR;
                                        }
                                        98 => {
                                            (*finfo).filetype = CURLFILETYPE_DEVICE_BLOCK;
                                        }
                                        68 => {
                                            (*finfo).filetype = CURLFILETYPE_DOOR;
                                        }
                                        _ => {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    }
                                    (*parser).state.UNIX.main = PL_UNIX_PERMISSION;
                                    (*parser).item_length = 0 as i32 as u32;
                                    (*parser).item_offset = 1 as i32 as size_t;
                                }
                                6082618239964698303 => {
                                    match (*parser).state.UNIX.sub.total_dirsize as u32
                                    {
                                        0 => {
                                            current_block = 1625512947971215695;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4029943248288457101;
                                            match current_block {
                                                1625512947971215695 => {
                                                    if c as i32 == 't' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .total_dirsize = PL_UNIX_TOTALSIZE_READING;
                                                        let ref mut fresh14 = (*parser).item_length;
                                                        *fresh14 = (*fresh14).wrapping_add(1);
                                                    } else {
                                                        (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        (*finfo).b_used = 0 as i32 as size_t;
                                                        continue;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh15 = (*parser).item_length;
                                                    *fresh15 = (*fresh15).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        let ref mut fresh16 = (*parser).item_length;
                                                        *fresh16 = (*fresh16).wrapping_sub(1);
                                                        let ref mut fresh17 = (*finfo).b_used;
                                                        *fresh17 = (*fresh17).wrapping_sub(1);
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_length)
                                                                    .wrapping_sub(1 as i32 as u32) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strncmp(
                                                            b"total \0" as *const u8 as *const i8,
                                                            (*finfo).b_data,
                                                            6 as i32 as u64,
                                                        ) == 0 as i32
                                                        {
                                                            let mut endptr: *mut i8 = ((*finfo).b_data)
                                                                .offset(6 as i32 as isize);
                                                            while Curl_isspace(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            while Curl_isdigit(*endptr as u8 as i32)
                                                                != 0
                                                            {
                                                                endptr = endptr.offset(1);
                                                            }
                                                            if *endptr != 0 {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                                (*finfo).b_used = 0 as i32 as size_t;
                                                            }
                                                        } else {
                                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                18245268955835867220 => {
                                    match (*parser).state.UNIX.sub.user as u32 {
                                        0 => {
                                            if c as i32 != ' ' as i32 {
                                                (*parser)
                                                    .item_offset = ((*finfo).b_used)
                                                    .wrapping_sub(1 as i32 as u64);
                                                (*parser).item_length = 1 as i32 as u32;
                                                (*parser).state.UNIX.sub.user = PL_UNIX_USER_PARSING;
                                            }
                                        }
                                        1 => {
                                            let ref mut fresh20 = (*parser).item_length;
                                            *fresh20 = (*fresh20).wrapping_add(1);
                                            if c as i32 == ' ' as i32 {
                                                *((*finfo).b_data)
                                                    .offset(
                                                        ((*parser).item_offset)
                                                            .wrapping_add((*parser).item_length as u64)
                                                            .wrapping_sub(1 as i32 as u64) as isize,
                                                    ) = 0 as i32 as i8;
                                                (*parser).offsets.user = (*parser).item_offset;
                                                (*parser).state.UNIX.main = PL_UNIX_GROUP;
                                                (*parser).state.UNIX.sub.group = PL_UNIX_GROUP_PRESPACE;
                                                (*parser).item_offset = 0 as i32 as size_t;
                                                (*parser).item_length = 0 as i32 as u32;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.UNIX.sub.symlink as u32 {
                                        0 => {
                                            current_block = 218747262665541458;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 4142149688065477410;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 714134998687897190;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        3 => {
                                            current_block = 11742859648667696368;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        4 => {
                                            current_block = 15755521303720483476;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        5 => {
                                            current_block = 13215364868079927127;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        6 => {
                                            current_block = 8608877124123389102;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        7 => {
                                            current_block = 17502623293752361944;
                                            match current_block {
                                                218747262665541458 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                8608877124123389102 => {
                                                    let ref mut fresh33 = (*parser).item_length;
                                                    *fresh33 = (*fresh33).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_WINDOWSEOL;
                                                    } else if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    }
                                                }
                                                13215364868079927127 => {
                                                    if c as i32 != '\r' as i32
                                                        && c as i32 != '\n' as i32
                                                    {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_TARGET;
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                15755521303720483476 => {
                                                    let ref mut fresh32 = (*parser).item_length;
                                                    *fresh32 = (*fresh32).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET4;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(4 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).item_offset = 0 as i32 as size_t;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                11742859648667696368 => {
                                                    let ref mut fresh31 = (*parser).item_length;
                                                    *fresh31 = (*fresh31).wrapping_add(1);
                                                    if c as i32 == '>' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET3;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                714134998687897190 => {
                                                    let ref mut fresh30 = (*parser).item_length;
                                                    *fresh30 = (*fresh30).wrapping_add(1);
                                                    if c as i32 == '-' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET2;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    } else {
                                                        (*parser).state.UNIX.sub.symlink = PL_UNIX_SYMLINK_NAME;
                                                    }
                                                }
                                                4142149688065477410 => {
                                                    let ref mut fresh29 = (*parser).item_length;
                                                    *fresh29 = (*fresh29).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser)
                                                            .state
                                                            .UNIX
                                                            .sub
                                                            .symlink = PL_UNIX_SYMLINK_PRETARGET1;
                                                    } else if c as i32 == '\r' as i32
                                                            || c as i32 == '\n' as i32
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).offsets.symlink_target = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.UNIX.main = PL_UNIX_FILETYPE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                2 => {
                    match (*parser).state.NT.main as u32 {
                        0 => {
                            current_block = 15476878492472458447;
                            match current_block {
                                15476878492472458447 => {
                                    let ref mut fresh34 = (*parser).item_length;
                                    *fresh34 = (*fresh34).wrapping_add(1);
                                    if (*parser).item_length < 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"0123456789-\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 9 as i32 as u32
                                        {
                                        if c as i32 == ' ' as i32 {
                                            (*parser).state.NT.main = PL_WINNT_TIME;
                                            (*parser).state.NT.sub.time = PL_WINNT_TIME_PRESPACE;
                                        } else {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else {
                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                        current_block = 2744986921145312189;
                                        break;
                                    }
                                }
                                3431029620954861343 => {
                                    match (*parser).state.NT.sub.dirorsize as u32 {
                                        0 => {
                                            current_block = 9228458357077146477;
                                            match current_block {
                                                9228458357077146477 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_CONTENT;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh36 = (*parser).item_length;
                                                    *fresh36 = (*fresh36).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strcmp(
                                                            b"<DIR>\0" as *const u8 as *const i8,
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                        ) == 0 as i32
                                                        {
                                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                                            (*finfo).size = 0 as i32 as curl_off_t;
                                                        } else {
                                                            let mut endptr_0: *mut i8 = 0
                                                                as *mut i8;
                                                            if curlx_strtoofft(
                                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                                &mut endptr_0,
                                                                10 as i32,
                                                                &mut (*finfo).size,
                                                            ) as u64 != 0
                                                            {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*(*parser).file_data).info.filetype = CURLFILETYPE_FILE;
                                                            }
                                                        }
                                                        (*(*parser).file_data).info.flags
                                                            |= ((1 as i32) << 6 as i32) as u32;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).state.NT.main = PL_WINNT_FILENAME;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .filename = PL_WINNT_FILENAME_PRESPACE;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 8895217280548024133;
                                            match current_block {
                                                9228458357077146477 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_CONTENT;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh36 = (*parser).item_length;
                                                    *fresh36 = (*fresh36).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strcmp(
                                                            b"<DIR>\0" as *const u8 as *const i8,
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                        ) == 0 as i32
                                                        {
                                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                                            (*finfo).size = 0 as i32 as curl_off_t;
                                                        } else {
                                                            let mut endptr_0: *mut i8 = 0
                                                                as *mut i8;
                                                            if curlx_strtoofft(
                                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                                &mut endptr_0,
                                                                10 as i32,
                                                                &mut (*finfo).size,
                                                            ) as u64 != 0
                                                            {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*(*parser).file_data).info.filetype = CURLFILETYPE_FILE;
                                                            }
                                                        }
                                                        (*(*parser).file_data).info.flags
                                                            |= ((1 as i32) << 6 as i32) as u32;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).state.NT.main = PL_WINNT_FILENAME;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .filename = PL_WINNT_FILENAME_PRESPACE;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                12996067398018986521 => {
                                    let ref mut fresh35 = (*parser).item_length;
                                    *fresh35 = (*fresh35).wrapping_add(1);
                                    match (*parser).state.NT.sub.time as u32 {
                                        0 => {
                                            current_block = 13990509532960737566;
                                            match current_block {
                                                13990509532960737566 => {
                                                    if Curl_isspace(c as u8 as i32) == 0 {
                                                        (*parser).state.NT.sub.time = PL_WINNT_TIME_TIME;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).state.NT.main = PL_WINNT_DIRORSIZE;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_PRESPACE;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                    } else if (strchr(
                                                            b"APM0123456789:\0" as *const u8 as *const i8,
                                                            c as i32,
                                                        ))
                                                            .is_null()
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 11162204470139946426;
                                            match current_block {
                                                13990509532960737566 => {
                                                    if Curl_isspace(c as u8 as i32) == 0 {
                                                        (*parser).state.NT.sub.time = PL_WINNT_TIME_TIME;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).state.NT.main = PL_WINNT_DIRORSIZE;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_PRESPACE;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                    } else if (strchr(
                                                            b"APM0123456789:\0" as *const u8 as *const i8,
                                                            c as i32,
                                                        ))
                                                            .is_null()
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.NT.sub.filename as u32 {
                                        0 => {
                                            current_block = 14897595969540339567;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 5227621611186213189;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 10142230645781954144;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        1 => {
                            current_block = 12996067398018986521;
                            match current_block {
                                15476878492472458447 => {
                                    let ref mut fresh34 = (*parser).item_length;
                                    *fresh34 = (*fresh34).wrapping_add(1);
                                    if (*parser).item_length < 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"0123456789-\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 9 as i32 as u32
                                        {
                                        if c as i32 == ' ' as i32 {
                                            (*parser).state.NT.main = PL_WINNT_TIME;
                                            (*parser).state.NT.sub.time = PL_WINNT_TIME_PRESPACE;
                                        } else {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else {
                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                        current_block = 2744986921145312189;
                                        break;
                                    }
                                }
                                3431029620954861343 => {
                                    match (*parser).state.NT.sub.dirorsize as u32 {
                                        0 => {
                                            current_block = 9228458357077146477;
                                            match current_block {
                                                9228458357077146477 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_CONTENT;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh36 = (*parser).item_length;
                                                    *fresh36 = (*fresh36).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strcmp(
                                                            b"<DIR>\0" as *const u8 as *const i8,
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                        ) == 0 as i32
                                                        {
                                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                                            (*finfo).size = 0 as i32 as curl_off_t;
                                                        } else {
                                                            let mut endptr_0: *mut i8 = 0
                                                                as *mut i8;
                                                            if curlx_strtoofft(
                                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                                &mut endptr_0,
                                                                10 as i32,
                                                                &mut (*finfo).size,
                                                            ) as u64 != 0
                                                            {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*(*parser).file_data).info.filetype = CURLFILETYPE_FILE;
                                                            }
                                                        }
                                                        (*(*parser).file_data).info.flags
                                                            |= ((1 as i32) << 6 as i32) as u32;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).state.NT.main = PL_WINNT_FILENAME;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .filename = PL_WINNT_FILENAME_PRESPACE;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 8895217280548024133;
                                            match current_block {
                                                9228458357077146477 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_CONTENT;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh36 = (*parser).item_length;
                                                    *fresh36 = (*fresh36).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strcmp(
                                                            b"<DIR>\0" as *const u8 as *const i8,
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                        ) == 0 as i32
                                                        {
                                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                                            (*finfo).size = 0 as i32 as curl_off_t;
                                                        } else {
                                                            let mut endptr_0: *mut i8 = 0
                                                                as *mut i8;
                                                            if curlx_strtoofft(
                                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                                &mut endptr_0,
                                                                10 as i32,
                                                                &mut (*finfo).size,
                                                            ) as u64 != 0
                                                            {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*(*parser).file_data).info.filetype = CURLFILETYPE_FILE;
                                                            }
                                                        }
                                                        (*(*parser).file_data).info.flags
                                                            |= ((1 as i32) << 6 as i32) as u32;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).state.NT.main = PL_WINNT_FILENAME;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .filename = PL_WINNT_FILENAME_PRESPACE;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                12996067398018986521 => {
                                    let ref mut fresh35 = (*parser).item_length;
                                    *fresh35 = (*fresh35).wrapping_add(1);
                                    match (*parser).state.NT.sub.time as u32 {
                                        0 => {
                                            current_block = 13990509532960737566;
                                            match current_block {
                                                13990509532960737566 => {
                                                    if Curl_isspace(c as u8 as i32) == 0 {
                                                        (*parser).state.NT.sub.time = PL_WINNT_TIME_TIME;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).state.NT.main = PL_WINNT_DIRORSIZE;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_PRESPACE;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                    } else if (strchr(
                                                            b"APM0123456789:\0" as *const u8 as *const i8,
                                                            c as i32,
                                                        ))
                                                            .is_null()
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 11162204470139946426;
                                            match current_block {
                                                13990509532960737566 => {
                                                    if Curl_isspace(c as u8 as i32) == 0 {
                                                        (*parser).state.NT.sub.time = PL_WINNT_TIME_TIME;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).state.NT.main = PL_WINNT_DIRORSIZE;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_PRESPACE;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                    } else if (strchr(
                                                            b"APM0123456789:\0" as *const u8 as *const i8,
                                                            c as i32,
                                                        ))
                                                            .is_null()
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.NT.sub.filename as u32 {
                                        0 => {
                                            current_block = 14897595969540339567;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 5227621611186213189;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 10142230645781954144;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        2 => {
                            current_block = 3431029620954861343;
                            match current_block {
                                15476878492472458447 => {
                                    let ref mut fresh34 = (*parser).item_length;
                                    *fresh34 = (*fresh34).wrapping_add(1);
                                    if (*parser).item_length < 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"0123456789-\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 9 as i32 as u32
                                        {
                                        if c as i32 == ' ' as i32 {
                                            (*parser).state.NT.main = PL_WINNT_TIME;
                                            (*parser).state.NT.sub.time = PL_WINNT_TIME_PRESPACE;
                                        } else {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else {
                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                        current_block = 2744986921145312189;
                                        break;
                                    }
                                }
                                3431029620954861343 => {
                                    match (*parser).state.NT.sub.dirorsize as u32 {
                                        0 => {
                                            current_block = 9228458357077146477;
                                            match current_block {
                                                9228458357077146477 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_CONTENT;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh36 = (*parser).item_length;
                                                    *fresh36 = (*fresh36).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strcmp(
                                                            b"<DIR>\0" as *const u8 as *const i8,
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                        ) == 0 as i32
                                                        {
                                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                                            (*finfo).size = 0 as i32 as curl_off_t;
                                                        } else {
                                                            let mut endptr_0: *mut i8 = 0
                                                                as *mut i8;
                                                            if curlx_strtoofft(
                                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                                &mut endptr_0,
                                                                10 as i32,
                                                                &mut (*finfo).size,
                                                            ) as u64 != 0
                                                            {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*(*parser).file_data).info.filetype = CURLFILETYPE_FILE;
                                                            }
                                                        }
                                                        (*(*parser).file_data).info.flags
                                                            |= ((1 as i32) << 6 as i32) as u32;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).state.NT.main = PL_WINNT_FILENAME;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .filename = PL_WINNT_FILENAME_PRESPACE;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 8895217280548024133;
                                            match current_block {
                                                9228458357077146477 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_CONTENT;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh36 = (*parser).item_length;
                                                    *fresh36 = (*fresh36).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strcmp(
                                                            b"<DIR>\0" as *const u8 as *const i8,
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                        ) == 0 as i32
                                                        {
                                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                                            (*finfo).size = 0 as i32 as curl_off_t;
                                                        } else {
                                                            let mut endptr_0: *mut i8 = 0
                                                                as *mut i8;
                                                            if curlx_strtoofft(
                                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                                &mut endptr_0,
                                                                10 as i32,
                                                                &mut (*finfo).size,
                                                            ) as u64 != 0
                                                            {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*(*parser).file_data).info.filetype = CURLFILETYPE_FILE;
                                                            }
                                                        }
                                                        (*(*parser).file_data).info.flags
                                                            |= ((1 as i32) << 6 as i32) as u32;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).state.NT.main = PL_WINNT_FILENAME;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .filename = PL_WINNT_FILENAME_PRESPACE;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                12996067398018986521 => {
                                    let ref mut fresh35 = (*parser).item_length;
                                    *fresh35 = (*fresh35).wrapping_add(1);
                                    match (*parser).state.NT.sub.time as u32 {
                                        0 => {
                                            current_block = 13990509532960737566;
                                            match current_block {
                                                13990509532960737566 => {
                                                    if Curl_isspace(c as u8 as i32) == 0 {
                                                        (*parser).state.NT.sub.time = PL_WINNT_TIME_TIME;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).state.NT.main = PL_WINNT_DIRORSIZE;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_PRESPACE;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                    } else if (strchr(
                                                            b"APM0123456789:\0" as *const u8 as *const i8,
                                                            c as i32,
                                                        ))
                                                            .is_null()
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 11162204470139946426;
                                            match current_block {
                                                13990509532960737566 => {
                                                    if Curl_isspace(c as u8 as i32) == 0 {
                                                        (*parser).state.NT.sub.time = PL_WINNT_TIME_TIME;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).state.NT.main = PL_WINNT_DIRORSIZE;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_PRESPACE;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                    } else if (strchr(
                                                            b"APM0123456789:\0" as *const u8 as *const i8,
                                                            c as i32,
                                                        ))
                                                            .is_null()
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.NT.sub.filename as u32 {
                                        0 => {
                                            current_block = 14897595969540339567;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 5227621611186213189;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 10142230645781954144;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        3 => {
                            current_block = 4119781943706198705;
                            match current_block {
                                15476878492472458447 => {
                                    let ref mut fresh34 = (*parser).item_length;
                                    *fresh34 = (*fresh34).wrapping_add(1);
                                    if (*parser).item_length < 9 as i32 as u32
                                    {
                                        if (strchr(
                                            b"0123456789-\0" as *const u8 as *const i8,
                                            c as i32,
                                        ))
                                            .is_null()
                                        {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else if (*parser).item_length
                                            == 9 as i32 as u32
                                        {
                                        if c as i32 == ' ' as i32 {
                                            (*parser).state.NT.main = PL_WINNT_TIME;
                                            (*parser).state.NT.sub.time = PL_WINNT_TIME_PRESPACE;
                                        } else {
                                            (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                            current_block = 2744986921145312189;
                                            break;
                                        }
                                    } else {
                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                        current_block = 2744986921145312189;
                                        break;
                                    }
                                }
                                3431029620954861343 => {
                                    match (*parser).state.NT.sub.dirorsize as u32 {
                                        0 => {
                                            current_block = 9228458357077146477;
                                            match current_block {
                                                9228458357077146477 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_CONTENT;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh36 = (*parser).item_length;
                                                    *fresh36 = (*fresh36).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strcmp(
                                                            b"<DIR>\0" as *const u8 as *const i8,
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                        ) == 0 as i32
                                                        {
                                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                                            (*finfo).size = 0 as i32 as curl_off_t;
                                                        } else {
                                                            let mut endptr_0: *mut i8 = 0
                                                                as *mut i8;
                                                            if curlx_strtoofft(
                                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                                &mut endptr_0,
                                                                10 as i32,
                                                                &mut (*finfo).size,
                                                            ) as u64 != 0
                                                            {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*(*parser).file_data).info.filetype = CURLFILETYPE_FILE;
                                                            }
                                                        }
                                                        (*(*parser).file_data).info.flags
                                                            |= ((1 as i32) << 6 as i32) as u32;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).state.NT.main = PL_WINNT_FILENAME;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .filename = PL_WINNT_FILENAME_PRESPACE;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 8895217280548024133;
                                            match current_block {
                                                9228458357077146477 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_CONTENT;
                                                    }
                                                }
                                                _ => {
                                                    let ref mut fresh36 = (*parser).item_length;
                                                    *fresh36 = (*fresh36).wrapping_add(1);
                                                    if c as i32 == ' ' as i32 {
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        if strcmp(
                                                            b"<DIR>\0" as *const u8 as *const i8,
                                                            ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                        ) == 0 as i32
                                                        {
                                                            (*finfo).filetype = CURLFILETYPE_DIRECTORY;
                                                            (*finfo).size = 0 as i32 as curl_off_t;
                                                        } else {
                                                            let mut endptr_0: *mut i8 = 0
                                                                as *mut i8;
                                                            if curlx_strtoofft(
                                                                ((*finfo).b_data).offset((*parser).item_offset as isize),
                                                                &mut endptr_0,
                                                                10 as i32,
                                                                &mut (*finfo).size,
                                                            ) as u64 != 0
                                                            {
                                                                (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                                current_block = 2744986921145312189;
                                                                break;
                                                            } else {
                                                                (*(*parser).file_data).info.filetype = CURLFILETYPE_FILE;
                                                            }
                                                        }
                                                        (*(*parser).file_data).info.flags
                                                            |= ((1 as i32) << 6 as i32) as u32;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                        (*parser).state.NT.main = PL_WINNT_FILENAME;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .filename = PL_WINNT_FILENAME_PRESPACE;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                12996067398018986521 => {
                                    let ref mut fresh35 = (*parser).item_length;
                                    *fresh35 = (*fresh35).wrapping_add(1);
                                    match (*parser).state.NT.sub.time as u32 {
                                        0 => {
                                            current_block = 13990509532960737566;
                                            match current_block {
                                                13990509532960737566 => {
                                                    if Curl_isspace(c as u8 as i32) == 0 {
                                                        (*parser).state.NT.sub.time = PL_WINNT_TIME_TIME;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).state.NT.main = PL_WINNT_DIRORSIZE;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_PRESPACE;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                    } else if (strchr(
                                                            b"APM0123456789:\0" as *const u8 as *const i8,
                                                            c as i32,
                                                        ))
                                                            .is_null()
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 11162204470139946426;
                                            match current_block {
                                                13990509532960737566 => {
                                                    if Curl_isspace(c as u8 as i32) == 0 {
                                                        (*parser).state.NT.sub.time = PL_WINNT_TIME_TIME;
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == ' ' as i32 {
                                                        (*parser).offsets.time = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*parser).item_offset)
                                                                    .wrapping_add((*parser).item_length as u64)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        (*parser).state.NT.main = PL_WINNT_DIRORSIZE;
                                                        (*parser)
                                                            .state
                                                            .NT
                                                            .sub
                                                            .dirorsize = PL_WINNT_DIRORSIZE_PRESPACE;
                                                        (*parser).item_length = 0 as i32 as u32;
                                                    } else if (strchr(
                                                            b"APM0123456789:\0" as *const u8 as *const i8,
                                                            c as i32,
                                                        ))
                                                            .is_null()
                                                        {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {
                                    match (*parser).state.NT.sub.filename as u32 {
                                        0 => {
                                            current_block = 14897595969540339567;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        1 => {
                                            current_block = 5227621611186213189;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        2 => {
                                            current_block = 10142230645781954144;
                                            match current_block {
                                                14897595969540339567 => {
                                                    if c as i32 != ' ' as i32 {
                                                        (*parser)
                                                            .item_offset = ((*finfo).b_used)
                                                            .wrapping_sub(1 as i32 as u64);
                                                        (*parser).item_length = 1 as i32 as u32;
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_CONTENT;
                                                    }
                                                }
                                                5227621611186213189 => {
                                                    let ref mut fresh37 = (*parser).item_length;
                                                    *fresh37 = (*fresh37).wrapping_add(1);
                                                    if c as i32 == '\r' as i32 {
                                                        (*parser).state.NT.sub.filename = PL_WINNT_FILENAME_WINEOL;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                    } else if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        *((*finfo).b_data)
                                                            .offset(
                                                                ((*finfo).b_used)
                                                                    .wrapping_sub(1 as i32 as u64) as isize,
                                                            ) = 0 as i32 as i8;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    if c as i32 == '\n' as i32 {
                                                        (*parser).offsets.filename = (*parser).item_offset;
                                                        result = ftp_pl_insert_finfo(data, infop);
                                                        if result as u64 != 0 {
                                                            (*parser).error = result;
                                                            current_block = 2744986921145312189;
                                                            break;
                                                        } else {
                                                            (*parser).state.NT.main = PL_WINNT_DATE;
                                                            (*parser)
                                                                .state
                                                                .NT
                                                                .sub
                                                                .filename = PL_WINNT_FILENAME_PRESPACE;
                                                        }
                                                    } else {
                                                        (*parser).error = CURLE_FTP_BAD_FILE_LIST;
                                                        current_block = 2744986921145312189;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                _ => {
                    retsize = bufflen.wrapping_add(1 as i32 as u64);
                    current_block = 2744986921145312189;
                    break;
                }
            }
            i = i.wrapping_add(1);
        }
        match current_block {
            2744986921145312189 => {}
            _ => return retsize,
        }
    }
    if !((*parser).file_data).is_null() {
        Curl_fileinfo_cleanup((*parser).file_data);
        let ref mut fresh38 = (*parser).file_data;
        *fresh38 = 0 as *mut fileinfo;
    }
    return retsize;
}
